{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/process/browser.js","node_modules/three-canvas-renderer/index.js","node_modules/three.js-projector/index.js","node_modules/three/build/three.js","node_modules/tween.js/src/Tween.js","src/js/entry.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","this","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","THREE","RenderableObject","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","Vector3","vertexNormalsModel","vertexNormalsLength","color","Color","material","uvs","Vector2","position","positionWorld","positionScreen","Vector4","visible","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","getNextObjectInPool","_objectCount","_objectPoolLength","_objectPool","getNextVertexInPool","_vertexCount","_vertexPoolLength","_vertexPool","getNextFaceInPool","_faceCount","_facePoolLength","face","_facePool","getNextLineInPool","_lineCount","_linePoolLength","line","_linePool","getNextSpriteInPool","_spriteCount","_spritePoolLength","sprite","_spritePool","painterSort","b","clipLine","s1","s2","alpha1","alpha2","bc1near","w","bc2near","bc1far","bc2far","Math","max","min","lerp","_object","_vertex","_face","_line","_sprite","_modelMatrix","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","Box3","_boundingBox","_points3","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","Matrix3","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","camera","console","warn","project","unprojectVector","unproject","pickingRay","error","RenderList","setObject","value","normalMatrix","getNormalMatrix","matrixWorld","normals","projectVertex","applyMatrix4","invW","pushVertex","set","pushNormal","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","pushTriangle","c","side","DoubleSide","fromArray","applyMatrix3","normalize","normal","uv","renderList","projectScene","scene","sortObjects","sortElements","addObject","setFromMatrixPosition","applyProjection","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","traverseVisible","Light","Mesh","Line","frustumCulled","intersectsObject","Sprite","intersectsSprite","sort","ol","geometry","BufferGeometry","attributes","groups","undefined","positions","index","indices","group","start","count","Geometry","vertices","faces","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","v","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","target","targetVertex","fl","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","step","LineSegments","multiplyScalar","VertexColors","colors","abs","SpriteCanvasMaterial","parameters","Material","type","program","context","setValues","Object","create","constructor","clone","CanvasRenderer","calculateLights","_ambientLight","setRGB","_directionalLights","_pointLights","ll","_lights","light","lightColor","AmbientLight","add","DirectionalLight","PointLight","calculateLight","_lightColor","lightPosition","amount","dot","intensity","subVectors","distance","distanceTo","renderSprite","element","setOpacity","opacity","setBlending","blending","scaleX","_canvasWidthHalf","scaleY","_canvasHeightHalf","dist","sqrt","_elemBox","SpriteMaterial","texture","map","pattern","_patterns","textureToPattern","canvas","setFillStyle","bitmap","image","ox","width","offset","oy","height","sx","repeat","sy","cx","cy","_context","save","translate","rotate","fillRect","restore","getStyle","setStrokeStyle","renderLine","beginPath","moveTo","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","expandByScalar","LineDashedMaterial","setLineDash","dashSize","gapSize","renderFace3","uv1","uv2","uv3","_this","info","render","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","drawTriangle","MeshLambertMaterial","MeshPhongMaterial","_diffuseColor","_emissiveColor","emissive","FaceColors","multiply","_color","_centroid","divideScalar","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","MeshBasicMaterial","mapping","UVMapping","_uvs","patternPath","envMap","SphericalReflectionMapping","_normal","_normalViewMatrix","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","MeshNormalMaterial","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","document","createElement","getContext","setTransform","drawImage","repeatX","wrapS","RepeatWrapping","repeatY","wrapT","createPattern","onUpdate","u0","v0","u1","u2","d","det","idet","offsetX","offsetY","transform","expand","pixels","_contextGlobalAlpha","globalAlpha","_contextGlobalCompositeOperation","NormalBlending","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","MultiplyBlending","_contextLineWidth","lineWidth","_contextLineCap","lineCap","_contextLineJoin","lineJoin","_contextStrokeStyle","strokeStyle","_contextFillStyle","fillStyle","_contextLineDash","log","REVISION","_elements","_camera","_v1","_v2","_v3","_projector","_canvas","_canvasWidth","_canvasHeight","floor","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","alpha","_clearColor","_clearAlpha","Box2","_clearBox","domElement","autoClear","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","setPixelRatio","setSize","updateStyle","style","setViewport","setScissor","setScissorTest","setClearColor","setClearColorHex","hex","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","intersect","clearRect","g","makeEmpty","clearColor","clearDepth","clearStencil","Camera","el","overdraw","union","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_three2","priority","BSPTree","data","root","utils","createNode","insert","_vA","_vB","_vC","offset2","customSort","offsets","MeshFaceMaterial","v1p","v2p","v3p","targets","mode","LinePieces","btree","toArray","compareWith","node","Node","comparison","isBehind","fragments","separate","getNormal","getPointOnPlane","self","forEach","nodePriority","getPriority","compareWithPriority","back","front","output","traverse","elem","TriangleNode","LineNode","getPointSign","point","pointOnPlane","sign","sub","isPointInSegment","p1","p2","minX","minY","minZ","maxX","maxY","maxZ","isZero","EPSILON","linePlaneIntersection","upper","lower","intersectionPoint","pointsEqual","oldModelMatrix","IDENTITY_MATRIX","viewer","_fakePosition","viewerSign","thisSign","getSign","callback","isTriangle","Line3","pt","closestPointToPoint","sMax","sMin","newLine","s3","p3","i12","i23","i31","newTriangle","t1","t2","defineProperty","_three","global","factory","define","amd","EventDispatcher","Texture","magFilter","minFilter","format","anisotropy","encoding","TextureIdCount","uuid","generateUUID","sourceFile","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","LinearFilter","LinearMipMapLinearFilter","RGBAFormat","UnsignedByteType","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","WebGLRenderTarget","options","scissor","scissorTest","viewport","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","Quaternion","_x","_y","_z","_w","Float32Array","CubeTexture","images","CubeReflectionMapping","UniformContainer","seq","flatten","nBlocks","blockSize","firstElem","arrayCacheF32","allocTexUnits","renderer","arrayCacheI32","Int32Array","allocTextureUnit","setValue1f","gl","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","size","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","setValue","PureArrayUniform","StructuredUniform","addUniform","container","uniformObject","parseUniform","path","pathLength","RePathPart","lastIndex","match","exec","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","Infinity","LensFlarePlugin","flares","init","Uint16Array","vertexBuffer","createBuffer","elementBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","tempTexture","createTexture","occlusionTexture","state","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","RGBA","shader","vertexShader","join","fragmentShader","createProgram","getAttribLocation","uniforms","renderType","occlusionMap","screenPosition","createShader","FRAGMENT_SHADER","VERTEX_SHADER","prefix","getPrecision","shaderSource","compileShader","attachShader","linkProgram","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","vertexAttribPointer","FLOAT","disable","CULL_FACE","setDepthWrite","flare","containsPoint","activeTexture","TEXTURE0","TEXTURE1","copyTexImage2D","BLEND","enable","DEPTH_TEST","drawElements","TRIANGLES","UNSIGNED_SHORT","customUpdateCallback","updateLensFlares","j","jl","lensFlares","blendEquation","blendSrc","blendDst","resetGLState","SpritePlugin","sprites","uvOffset","uvScale","modelViewMatrix","fogType","fogDensity","fogNear","fogFar","fogColor","alphaTest","createElementNS","needsUpdate","painterSortStable","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","fog","isFog","near","far","isFogExp2","density","decompose","setDepthTest","depthTest","depthWrite","MaterialIdCount","shading","SmoothShading","NoColors","transparent","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","LessEqualDepth","clippingPlanes","clipShadows","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","_needsUpdate","count$1","ShaderMaterial","defines","clipping","skinning","morphNormals","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","MeshDepthMaterial","depthPacking","BasicDepthPacking","alphaMap","displacementMap","displacementScale","displacementBias","Sphere","center","radius","Plane","constant","p0","p4","p5","planes","WebGLShadowMap","_renderer","_objects","capabilities","getDepthMaterial","isPointLight","lightPositionWorld","result","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","isBufferGeometry","morphAttributes","isGeometry","useSkinning","isSkinnedMesh","variantIndex","_MorphingFlag","_SkinningFlag","localClippingEnabled","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","scope","renderSingleSided","renderReverseSided","lightPos","projectObject","shadowCamera","layers","mask","isMesh","isLine","isPoints","castShadow","_renderList","children","_gl","_state","_projScreenMatrix","_lightShadows","shadows","_shadowMapSize","_maxShadowMapSize","maxTextureSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","RGBADepthPacking","distanceShader","ShaderLib","distanceUniforms","UniformsUtils","depthMaterial","distanceMaterial","USE_SHADOWMAP","enabled","PCFShadowMap","faceCount","il","shadow","mapSize","vpWidth","vpHeight","pars","NearestFilter","updateProjectionMatrix","isSpotLightShadow","update","shadowMap","shadowMatrix","matrix","setRenderTarget","up","lookAt","vpDimensions","isMultiMaterial","k","kl","groupMaterial","renderBufferDirect","clearAlpha","Ray","origin","direction","Euler","order","_order","DefaultOrder","Layers","Object3D","onRotationChange","quaternion","setFromEuler","onQuaternionChange","setFromQuaternion","Object3DIdCount","DefaultUp","onChange","defineProperties","enumerable","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","receiveShadow","userData","onBeforeRender","count$2","end","Triangle","Face3","isVector3","isArray","isColor","aoMap","aoMapIntensity","specularMap","combine","MultiplyOperation","reflectivity","refractionRatio","BufferAttribute","itemSize","normalized","dynamic","updateRange","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Int32Attribute","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","setDynamic","GeometryIdCount","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","count$3","DirectGeometry","uvs2","drawRange","random","drawMode","TrianglesDrawMode","updateMorphTargets","BoxBufferGeometry","depth","widthSegments","heightSegments","depthSegments","calculateVertexCount","h","calculateIndexCount","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","addGroup","groupStart","vertexCount","indexCount","setIndex","addAttribute","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","OrthographicCamera","left","right","top","bottom","WebGLIndexedBufferRenderer","infoRender","setMode","get","UNSIGNED_INT","calls","renderInstances","extension","drawElementsInstancedANGLE","maxInstancedCount","WebGLBufferRenderer","drawArrays","isInterleavedBufferAttribute","drawArraysInstancedANGLE","WebGLLights","shadowBias","shadowRadius","shadowMapSize","coneCos","penumbraCos","decay","skyColor","groundColor","addLineNumbers","string","lines","split","WebGLShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","chunks","envMapCubeUV","bumpMap","normalMap","flatShading","logarithmicDepthBuffer","filter","filterEmptyLine","generateDefines","fetchAttributeLocations","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","ShaderChunk","unrollLoops","snippet","unroll","parseInt","WebGLProgram","__webglShader","shadowMapTypeDefine","shadowMapType","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","isRawShaderMaterial","maxBones","lightMap","emissiveMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","numClippingPlanes","shadowMapEnabled","sizeAttenuation","useFog","fogExp","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","deleteShader","cachedUniforms","getUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","floatVertexTextures","skeleton","nVertexUniforms","maxVertexUniforms","nVertexMatrices","bones","getTextureEncodingFromMap","gammaOverrideLinear","isTexture","isWebGLRenderTarget","programs","shaderIDs","MeshStandardMaterial","MeshPhysicalMaterial","PointsMaterial","parameterNames","getParameters","nClipPlanes","shaderID","getMaxPrecision","currentRenderTarget","getCurrentRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","FlatShading","maxMorphTargets","maxMorphNormals","directional","spot","hemi","getProgramCode","acquireProgram","p","pl","programInfo","releaseProgram","indexOf","pop","WebGLGeometries","properties","onGeometryDispose","event","buffergeometry","geometries","deleteAttribute","deleteAttributes","removeEventListener","property","delete","bufferproperty","memory","getAttributeBuffer","attribute","__webglBuffer","buffer","deleteBuffer","removeAttributeBuffer","addEventListener","_bufferGeometry","setFromObject","WebGLObjects","updateFromObject","updateAttribute","bufferType","attributeProperties","updateBuffer","usage","DYNAMIC_DRAW","bufferSubData","BYTES_PER_ELEMENT","subarray","getWireframeAttribute","TypeArray","WebGLTextures","paramThreeToGL","clampToMaxSize","maxSize","isPowerOfTwo","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","nearestPowerOfTwo","textureNeedsPowerOfTwo","filterFallback","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","_infoMemory","textures","onRenderTargetDispose","renderTarget","deallocateRenderTarget","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","dispose","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","__version","uploadTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isCompressedTexture","isDataTexture","cubeImage","maxCubemapSize","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","RGBFormat","getCompressedTextureFormats","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","generateMipmap","setTextureCubeDynamic","textureType","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isDepthTexture","internalFormat","DEPTH_COMPONENT","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthStencilFormat","DEPTH_STENCIL","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","isCube","webglDepthTexture","DepthFormat","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGL2RenderingContext","WebGLProperties","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","setClear","equals","reset","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","setTest","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","setDepthFunc","setFlipSided","setCullFace","CullFaceBack","newAttributes","enabledAttributes","enableVertexAttribArray","attributeDivisors","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","compressedTextureFormats","formats","getParameter","COMPRESSED_TEXTURE_FORMATS","NoBlending","currentBlending","currentPremultipledAlpha","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","SRC_COLOR","CustomBlending","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","setColorWrite","colorBuffer","setStencilTest","setStencilWrite","stencilWrite","setStencilFunc","setStencilOp","currentFlipSided","frontFace","CW","CCW","cullFace","CullFaceNone","currentCullFace","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","currentLineWidth","setPolygonOffset","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","getScissorTest","currentScissorTest","SCISSOR_TEST","webglSlot","maxTextures","currentTextureSlot","webglType","boundTexture","currentBoundTextures","emptyTextures","currentScissor","currentViewport","maxVertexAttributes","MAX_VERTEX_ATTRIBS","MAX_TEXTURE_IMAGE_UNITS","buffers","WebGLCapabilities","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","HIGH_FLOAT","MEDIUM_FLOAT","maxPrecision","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","WebGLExtensions","getExtension","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","i4","plane","renderingShadows","enableLocalClipping","beginShadows","endShadows","setState","cache","fromCache","nGlobal","lGlobal","clippingState","WebGLRenderer","getTargetPixelRatio","_currentRenderTarget","glClearColor","_premultipliedAlpha","setDefaultGLState","_currentScissor","_scissor","_currentViewport","_viewport","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","preventDefault","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programCache","setupVertexAttributes","startIndex","isInstancedBufferGeometry","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","SHORT","INT","BYTE","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","absNumericalSort","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","isObjectViewable","computeBoundingSphere","_sphere","isSphereViewable","isSpriteViewable","sphere","intersectsSphere","_clipping","negRad","distanceToPoint","isLight","isSprite","isLensFlare","isImmediateRenderObject","renderObjects","overrideMaterial","setMaterial","setProgram","renderBufferImmediate","initMaterial","materialProperties","programChange","numSupportedMorphTargets","numSupportedMorphNormals","lightsHash","hash","ambientLightColor","ambient","directionalLights","spotLights","pointLights","hemisphereLights","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","uniformsList","seqWithValue","dynamicUniforms","splitDynamic","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","markUniformsLightsNeedsUpdate","refreshUniformsFog","isMeshDepthMaterial","refreshUniformsCommon","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshNormalMaterial","upload","dynUniforms","evalDynamic","diffuse","emissiveIntensity","uvScaleMap","offsetRepeat","flipEnvMap","isCubeTexture","totalSize","clientHeight","lightMapIntensity","specular","shininess","bumpScale","normalScale","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","setupShadows","lightShadowsLength","setupLights","directionalLength","pointLength","spotLength","hemiLength","isAmbientLight","isDirectionalLight","lightCache","transformDirection","bias","isSpotLight","cos","angle","penumbra","identity","setPosition","isHemisphereLight","textureUnit","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","RGBA_S3TC_DXT1_Format","COMPRESSED_RGBA_S3TC_DXT1_EXT","RGBA_S3TC_DXT3_Format","COMPRESSED_RGBA_S3TC_DXT3_EXT","RGBA_S3TC_DXT5_Format","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","RGB_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","RGBA_PVRTC_4BPPV1_Format","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","MinEquation","MIN_EXT","MaxEquation","MAX_EXT","UnsignedInt248Type","UNSIGNED_INT_24_8_WEBGL","_alpha","_depth","_stencil","_antialias","antialias","_preserveDrawingBuffer","preserveDrawingBuffer","autoClearColor","autoClearDepth","autoClearStencil","toneMappingExposure","toneMappingWhitePoint","_currentFramebuffer","_currentScissorTest","_width","_height","_scissorTest","_infoRender","points","rangeMin","rangeMax","MaxIndex","bufferRenderer","indexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","backgroundBoxShader","backgroundBoxMesh","spritePlugin","lensFlarePlugin","forceContextLoss","loseContext","getSize","boolean","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","nx","ny","nz","uvArray","colorArray","updateBuffers","geometryProgram","activeInfluences","removeAttribute","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","LINES","TriangleStripDrawMode","TRIANGLE_STRIP","TriangleFanDrawMode","TRIANGLE_FAN","isLineSegments","LINE_STRIP","POINTS","forceClear","isCamera","background","extractRotation","frontFaceDirection","FrontFaceDirectionCW","warned","setTexture","readRenderTargetPixels","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","FogExp2","Fog","Scene","LensFlare","LOD","levels","Skeleton","boneInverses","identityMatrix","slice","nextPowerOfTwo","ceil","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","Bone","skin","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","bone","gbone","pos","rotq","scl","normalizeSkinWeights","bind","Points","Group","VideoTexture","video","requestAnimationFrame","readyState","HAVE_CURRENT_DATA","CanvasTexture","DepthTexture","WireframeGeometry","sortFunction","edge","keys","numEdges","edges","key","toString","coords","index2","getX","getY","getZ","numTris","index1","ParametricGeometry","func","slices","stacks","verts","sliceCount","uva","uvb","uvc","uvd","computeFaceNormals","computeVertexNormals","PolyhedronGeometry","detail","prepare","that","azimuth","PI","inclination","make","centroid","azi","correctUV","subdivide","cols","pow","aj","bj","rows","atan2","mergeVertices","TetrahedronGeometry","OctahedronGeometry","IcosahedronGeometry","DodecahedronGeometry","TubeGeometry","segments","radialSegments","closed","taper","vert","NoTaper","tangent","binormal","ip","jp","grid","numpoints","pos2","frames","FrenetFrames","tangents","binormals","getPointAt","sin","TorusKnotBufferGeometry","tube","tubularSegments","q","calculatePositionOnCurve","cu","su","quOverP","cs","indexOffset","P1","P2","B","T","N","addVectors","crossVectors","setXYZ","setXY","setX","TorusKnotGeometry","heightScale","fromBufferGeometry","TorusBufferGeometry","arc","TorusGeometry","ExtrudeGeometry","shapes","addShapeList","TextGeometry","text","font","isFont","generateShapes","curveSegments","bevelThickness","bevelSize","bevelEnabled","SphereBufferGeometry","phiStart","phiLength","thetaStart","thetaLength","thetaEnd","verticesRow","px","py","pz","v4","SphereGeometry","RingBufferGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","segment","radiusStep","thetaSegmentLevel","RingGeometry","PlaneGeometry","LatheBufferGeometry","clamp","base","inverseSegments","phi","n1","n2","LatheGeometry","ShapeGeometry","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","vert1","vert2","face1","face2","CylinderBufferGeometry","radiusTop","radiusBottom","openEnded","nbCap","generateTorso","slope","indexRow","theta","sinTheta","cosTheta","halfHeight","indexArray","i1","i2","i3","generateCap","centerIndexStart","centerIndexEnd","CylinderGeometry","ConeGeometry","ConeBufferGeometry","CircleBufferGeometry","ii","CircleGeometry","BoxGeometry","ShadowMaterial","merge","UniformsLib","RawShaderMaterial","STANDARD","PHYSICAL","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","onStart","itemStart","url","itemEnd","itemError","XHRLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","BinaryTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","HemisphereLight","updateMatrix","LightShadow","SpotLightShadow","SpotLight","power","DirectionalLightShadow","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrackConstructor","times","values","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","optimize","VectorKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","NumberKeyframeTrack","StringKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","KeyframeTrack","AnimationClip","duration","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","Loader","onLoadStart","onLoadProgress","onLoadComplete","JSONLoader","withCredentials","ObjectLoader","texturePath","Curve","LineCurve","CurvePath","curves","autoClose","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","SplineCurve","CubicBezierCurve","QuadraticBezierCurve","Shape","Path","holes","currentPoint","fromPoints","ShapePath","subPaths","currentPath","Font","FontLoader","getAudioContext","window","AudioContext","webkitAudioContext","AudioLoader","StereoCamera","eyeSep","cameraL","cameraR","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","AudioListener","gain","createGain","connect","destination","Audio","listener","source","createBufferSource","onended","onEnded","getInput","autoplay","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","typeName","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","PropertyBinding","rootNode","parsedPath","parseTrackName","findNode","nodeName","AnimationObjectGroup","var_args","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindings","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","LoopRepeat","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","ray","params","threshold","PointCloud","ascSort","intersectObject","raycaster","intersects","recursive","raycast","Clock","autoStart","oldTime","elapsedTime","running","Spline","interpolate","t3","intPoint","w2","w3","pa","pb","pc","pd","initFromArray","getPoint","getControlPointsArray","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","Spherical","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","fps","createAnimation","setAnimationWeight","ImmediateRenderObject","renderCallback","VertexNormalsHelper","nNormals","objGeometry","SpotLightHelper","cone","SkeletonHelper","getBoneList","isBone","PointLightHelper","sphereSize","HemisphereLightHelper","rotateX","lightSphere","GridHelper","divisions","color1","color2","FaceNormalsHelper","DirectionalLightHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","BoundingBoxHelper","box","BoxHelper","ArrowHelper","headLength","headWidth","lineGeometry","coneGeometry","setDirection","setLength","AxisHelper","ClosedSplineCurve3","CatmullRomCurve3","ArcCurve","aRadius","Face4","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","EdgesHelper","WireframeHelper","Number","Function","assign","nextKey","hasOwnProperty","_listeners","listeners","hasEventListener","listenerArray","splice","dispatchEvent","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceFrontBack","FrontFaceDirectionCCW","BasicShadowMap","BlendingMode","TextureMapping","TextureWrapping","TextureFilter","RGBEFormat","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","RAD2DEG","chars","rnd","euclideanModulo","m","mapLinear","a1","a2","b1","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","round","isVector2","setScalar","scalar","setY","setComponent","getComponent","addScaledVector","subScalar","isFinite","divide","clampScalar","minVal","maxVal","clampLength","roundToZero","lengthSq","lengthManhattan","distanceToSquared","dx","dy","distanceToManhattan","lerpVectors","fromAttribute","rotateAround","toJSON","meta","getDataURL","toDataURL","metadata","generator","wrap","transformUv","isVector4","setZ","setW","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","onChangeCallback","euler","isEuler","c1","c2","c3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","EPS","vFrom","vTo","inverse","conjugate","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","qa","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","z0","w0","z1","w1","sqrSin","tDir","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","qx","qy","qz","qw","iz","iw","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","angleTo","dz","setFromSpherical","sinPhiRadius","setFromMatrixColumn","setFromMatrixScale","sz","temp","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","copyPosition","me","extractBasis","xAxis","yAxis","zAxis","makeBasis","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","z2","wx","wy","wz","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","applyToVector3Array","applyToBuffer","determinant","transpose","tmp","flattenToArrayOffset","getPosition","throwOnDegenerate","t11","t12","t13","t14","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","invSX","invSY","invSZ","makeFrustum","makePerspective","ymax","tan","ymin","xmin","xmax","makeOrthographic","onUpdateCallback","merged","uniforms_src","uniforms_dst","parameter_src","isMatrix3","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_fragment","fog_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_flip","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","setHex","setStyle","setHSL","hue2rgb","handleAlpha","parseFloat","charAt","ColorKeywords","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","delta","offsetHSL","addColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","basic","lambert","phong","standard","dashed","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","expandByPoint","setFromCenterAndSize","halfSize","getCenter","expandByVector","containsBox","clampPoint","clampedPoint","isMaterial","newValue","currentValue","extractFromCache","isRoot","srcPlanes","dstPlanes","isBox3","setFromArray","closestPoint","intersectsPlane","getBoundingSphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setFromMatrix4","matrix4","transposeIntoArray","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","negRadius","d1","d2","at","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","diff","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","RotationOrders","asin","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","toggle","test","isObject3D","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseAncestors","force","isRootObject","JSON","stringify","parse","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","startEnd_startP","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","triangle","area","midpoint","edgeList","projectedPoint","minDistance","isBufferAttribute","copyAt","copyArray","copyColorsArray","copyIndicesArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXYZW","computeBoundingBox","addFace","tempNormals","tempUVs","tempUVs2","cb","ab","vA","vB","vC","areaWeighted","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexColors","uvCopy","mergeMesh","mesh","verticesMap","unique","changes","precisionPoints","faceIndicesToRemove","dupIndex","idx","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","morphTarget","morphNormal","getIndex","getAttribute","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","array2","setDrawMode","morphTargetDictionary","ml","uvIntersection","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","uvA","uvB","uvC","faceIndex","inverseMatrix","tempA","tempB","tempC","fvA","fvB","fvC","faceMaterial","uvs_f","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","clearViewOffset","skew","isOrthographicCamera","zoomW","zoomH","scaleW","scaleH","vecX","vecY","wantedRotation","matrixPosition","guessSizeSq","level","addLevel","getObjectForDistance","pose","offsetMatrix","sw","vec","skinWeight","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","tz","mat","getTangentAt","ShapeUtils","contour","triangulate","snip","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","addShape","scalePt2","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","position2","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","getSpacedPoints","shapePoints","extractPoints","reverse","bs","contourMovements","oneHoleMovements","holesMovements","verticesMovements","indexA","indexB","indexC","indexD","Geometries","freeze","isShadowMaterial","Materials","Cache","files","file","load","cached","request","XMLHttpRequest","open","response","status","responseType","overrideMimeType","send","setPath","setResponseType","setWithCredentials","loadTexture","loader","texDatas","loaded","mipmapCount","isCubemap","DataTextureLoader","texData","onload","URL","revokeObjectURL","src","blob","createObjectURL","setCrossOrigin","crossOrigin","urls","isJPEG","search","arraySlice","from","to","isTypedArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrackPrototype","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","ValueTypeName","getInterpolation","shift","timeOffset","trim","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","json","trackType","_getTrackTypeForValueTypeName","track","toLowerCase","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","parts","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","TYPED_ARRAYS","typedArray","drawcalls","extractUrlBase","initMaterials","createMaterial","textureLoader","materialLoader","fullPath","Handlers","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","handlers","regex","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","loadImage","parseConstant","getGeometry","getMaterial","isInteger","getUtoTmapping","getPoints","lengths","getLengths","cacheArcLengths","current","last","sum","updateArcLengths","targetArcLength","arcLengths","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getPointFunc","isLineCurve","curve","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","resolution","isEllipseCurve","isSplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","twoPi","deltaAngle","samePoints","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","point0","point1","point2","point3","PathPrototype","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","extractAllPoints","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","createPaths","String","paths","ret","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","outline","_cachedOutline","action","ha","decodeAudioData","audioBuffer","eyeRight","eyeLeft","eyeSepOnProjection","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","setNodeSource","audioNode","setBuffer","play","pause","stop","currentTime","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetArray","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","subscribe_","firstValidIndex","bindings","isAnimationObjectGroup","re","matches","results","searchSkeleton","searchNodeSubtree","childNode","subTreeNode","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","_nActiveBindings","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","_removeInactiveBinding","uncacheAction","bindingsByName","_addInactiveBinding","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","instances","isInterleavedBuffer","setFromCamera","intersectObjects","performance","Date","getElapsedTime","getDelta","newTime","other","makeSafe","vec3","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","objPos","objNorm","vector2","coneLength","coneWidth","boneList","matrixWorldInv","boneMatrix","setColors","lightPlane","targetLine","setPoint","setColor","CubicPoly","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","SplineCurve3","CubicBezierCurve3","QuadraticBezierCurve3","LineCurve3","SceneUtils","createMultiMaterialObject","detach","attach","LineStrip","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","extrude","makeGeometry","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","audioLoader","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","CubeGeometry","Particle","TWEEN","_tweens","getAll","removeAll","tween","preserve","hrtime","getTime","Tween","_valuesStart","_valuesEnd","_valuesStartRepeat","_duration","_repeat","_yoyo","_isPlaying","_reversed","_delayTime","_easingFunction","Easing","Linear","_interpolationFunction","Interpolation","_chainedTweens","_onStartCallback","_onStartCallbackFired","_onUpdateCallback","_onCompleteCallback","_onStopCallback","field","stopChainedTweens","numChainedTweens","delay","yoyo","easing","chain","onComplete","onStop","elapsed","Quadratic","In","Out","InOut","Cubic","Quartic","Quintic","Sinusoidal","Exponential","Circular","Elastic","Back","Bounce","fn","Utils","Bezier","pw","bn","Bernstein","CatmullRom","fc","Factorial","debounce","wait","immediate","later","callNow","buildCube","randomNum","setIntervalX","intervalID","setInterval","clearInterval","getElementById","innerWidth","innerHeight","mouse","devicePixelRatio","appendChild","onDocumentMouseDown","onDocumentTouchStart","onWindowResize","getRandomColor","clientX","touches","clientY","clientWidth","animate","callAnimation","windowWidth","documentElement","animateOnResize","particles","hasChildNodes","removeChild","firstChild","about","classList","scrollAnimate","work","contact","scroll","pageYOffset","aboutTop","getBoundingClientRect","workTop","smoothScroll","anchor","percentage","easingPattern","startLocation","endLocation","offsetParent","offsetTop","increments","timeLapsed","animateScroll","scrollTo","travelled","body","scrollHeight","runAnimation","scrollToggle","querySelectorAll","dataID","dataTarget","querySelector","dataSpeed","dataEasing"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n * @author Ramshackle-Jamathon / https://github.com/Ramshackle-Jamathon\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t_vector3 = new THREE.Vector3(),\n\t_vector4 = new THREE.Vector4(),\n\n\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t_boundingBox = new THREE.Box3(),\n\t_points3 = new Array( 3 ),\n\t_points4 = new Array( 4 ),\n\n\t_viewMatrix = new THREE.Matrix4(),\n\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t_modelMatrix,\n\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t_normalMatrix = new THREE.Matrix3(),\n\n\t_frustum = new THREE.Frustum(),\n\n\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\t\tvar material = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tfunction setObject( value ) {\n\n\t\t\tobject = value;\n\t\t\tmaterial = object.material;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t}\n\n\t\tfunction projectVertex( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t}\n\n\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t}\n\n\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t}\n\n\t\tfunction pushUv( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t}\n\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t}\n\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t}\n\n\t\tfunction pushLine( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t_line = getNextLineInPool();\n\n\t\t\t_line.id = object.id;\n\t\t\t_line.v1.copy( v1 );\n\t\t\t_line.v2.copy( v2 );\n\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t_line.material = object.material;\n\n\t\t\t_renderData.elements.push( _line );\n\n\t\t}\n\n\t\tfunction pushTriangle( a, b, c ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t// use first vertex normal as face normal\n\n\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t}\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tfunction addObject( object ) {\n\n\t\t\t_object = getNextObjectInPool();\n\t\t\t_object.id = object.id;\n\t\t\t_object.object = object;\n\n\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t_object.z = _vector3.z;\n\t\t\t_object.renderOrder = object.renderOrder;\n\n\t\t\t_renderData.objects.push( _object );\n\n\t\t}\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\t_renderData.lights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tmaterial = isFaceMaterial === true\n\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tvar invW = 1 / _vector4.w;\n\n\t\t\t\t_vector4.z *= invW;\n\n\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t\t_sprite.object = object;\n\n\t\t\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t\t\t_sprite.material = object.material;\n\n\t\t\t\t\t_renderData.elements.push( _sprite );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++;\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++;\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t// Z = -1 and Z = +1, respectively.\n\t\tbc1near =  s1.z + s1.w,\n\t\tbc2near =  s2.z + s2.w,\n\t\tbc1far =  - s1.z + s1.w,\n\t\tbc2far =  - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = \"SpriteCanvasMaterial\";\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.program = function ( context, color ) {};\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\nTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.SpriteCanvasMaterial();\n\n\tmaterial.copy( this );\n\tmaterial.color.copy( this.color );\n\tmaterial.program = this.program;\n\n\treturn material;\n\n};\n\n//\n\nTHREE.CanvasRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _this = this,\n\t_renderData, _elements, _lights,\n\t_projector = new THREE.Projector(),\n\n\t_canvas = parameters.canvas !== undefined\n\t\t\t ? parameters.canvas\n\t\t\t : document.createElement( 'canvas' ),\n\n\t_canvasWidth = _canvas.width,\n\t_canvasHeight = _canvas.height,\n\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n\t_viewportX = 0,\n\t_viewportY = 0,\n\t_viewportWidth = _canvasWidth,\n\t_viewportHeight = _canvasHeight,\n\n\t_pixelRatio = 1,\n\n\t_context = _canvas.getContext( '2d', {\n\t\talpha: parameters.alpha === true\n\t} ),\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\n\t_contextGlobalAlpha = 1,\n\t_contextGlobalCompositeOperation = 0,\n\t_contextStrokeStyle = null,\n\t_contextFillStyle = null,\n\t_contextLineWidth = null,\n\t_contextLineCap = null,\n\t_contextLineJoin = null,\n\t_contextLineDash = [],\n\n\t_camera,\n\n\t_v1, _v2, _v3, _v4,\n\t_v5 = new THREE.RenderableVertex(),\n\t_v6 = new THREE.RenderableVertex(),\n\n\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\n\t_color = new THREE.Color(),\n\t_color1 = new THREE.Color(),\n\t_color2 = new THREE.Color(),\n\t_color3 = new THREE.Color(),\n\t_color4 = new THREE.Color(),\n\n\t_diffuseColor = new THREE.Color(),\n\t_emissiveColor = new THREE.Color(),\n\n\t_lightColor = new THREE.Color(),\n\n\t_patterns = {},\n\n\t_image, _uvs,\n\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n\t_clipBox = new THREE.Box2(),\n\t_clearBox = new THREE.Box2(),\n\t_elemBox = new THREE.Box2(),\n\n\t_ambientLight = new THREE.Color(),\n\t_directionalLights = new THREE.Color(),\n\t_pointLights = new THREE.Color(),\n\n\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t_centroid = new THREE.Vector3(),\n\t_normal = new THREE.Vector3(),\n\t_normalViewMatrix = new THREE.Matrix3();\n\n\t/* TODO\n\t_canvas.mozImageSmoothingEnabled = false;\n\t_canvas.webkitImageSmoothingEnabled = false;\n\t_canvas.msImageSmoothingEnabled = false;\n\t_canvas.imageSmoothingEnabled = false;\n\t*/\n\n\t// dash+gap fallbacks for Firefox and everything else\n\n\tif ( _context.setLineDash === undefined ) {\n\n\t\t_context.setLineDash = function () {};\n\n\t}\n\n\tthis.domElement = _canvas;\n\n\tthis.autoClear = true;\n\tthis.sortObjects = true;\n\tthis.sortElements = true;\n\n\tthis.info = {\n\n\t\trender: {\n\n\t\t\tvertices: 0,\n\t\t\tfaces: 0\n\n\t\t}\n\n\t};\n\n\t// WebGLRenderer compatibility\n\n\tthis.supportsVertexTextures = function () {};\n\tthis.setFaceCulling = function () {};\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _context;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _context.getContextAttributes();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value !== undefined ) _pixelRatio = value;\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_canvasWidth = width * _pixelRatio;\n\t\t_canvasHeight = height * _pixelRatio;\n\n\t\t_canvas.width = _canvasWidth;\n\t\t_canvas.height = _canvasHeight;\n\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_contextGlobalAlpha = 1;\n\t\t_contextGlobalCompositeOperation = 0;\n\t\t_contextStrokeStyle = null;\n\t\t_contextFillStyle = null;\n\t\t_contextLineWidth = null;\n\t\t_contextLineCap = null;\n\t\t_contextLineJoin = null;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewportX = x * _pixelRatio;\n\t\t_viewportY = y * _pixelRatio;\n\n\t\t_viewportWidth = width * _pixelRatio;\n\t\t_viewportHeight = height * _pixelRatio;\n\n\t};\n\n\tthis.setScissor = function () {};\n\tthis.setScissorTest = function () {};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t};\n\n\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\tthis.setClearColor( hex, alpha );\n\n\t};\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn 0;\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tif ( _clearBox.isEmpty() === false ) {\n\n\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t_clearBox.expandByScalar( 2 );\n\n\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\n\t\t\tif ( _clearAlpha < 1 ) {\n\n\t\t\t\t_context.clearRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( _clearAlpha > 0 ) {\n\n\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\tsetOpacity( 1 );\n\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n\t\t\t\t_context.fillRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_clearBox.makeEmpty();\n\n\t\t}\n\n\t};\n\n\t// compatibility\n\n\tthis.clearColor = function () {};\n\tthis.clearDepth = function () {};\n\tthis.clearStencil = function () {};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.autoClear === true ) this.clear();\n\n\t\t_this.info.render.vertices = 0;\n\t\t_this.info.render.faces = 0;\n\n\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t_elements = _renderData.elements;\n\t\t_lights = _renderData.lights;\n\t\t_camera = camera;\n\n\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t/* DEBUG\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t*/\n\n\t\tcalculateLights();\n\n\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\tvar element = _elements[ e ];\n\n\t\t\tvar material = element.material;\n\n\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t_elemBox.makeEmpty();\n\n\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t_v1 = element;\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\tif ( material.overdraw > 0 ) {\n\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n\t\t\t\t}\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t_v3.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t*/\n\n\t\t\t_clearBox.union( _elemBox );\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetLineWidth( 1 );\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t*/\n\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t};\n\n\t//\n\n\tfunction calculateLights() {\n\n\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\t\t\tvar lightColor = light.color;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\t_ambientLight.add( lightColor );\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_directionalLights.add( lightColor );\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_pointLights.add( lightColor );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction calculateLight( position, normal, color ) {\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\n\t\t\t_lightColor.copy( light.color );\n\n\t\t\tif ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderSprite( v1, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\n\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\n\t\tif ( material instanceof THREE.SpriteMaterial ) {\n\n\t\t\tvar texture = material.map;\n\n\t\t\tif ( texture !== null ) {\n\n\t\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t\t\tvar bitmap = texture.image;\n\n\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\n\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\n\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\tvar cy = scaleY / sy;\n\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t_context.restore();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// no texture\n\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t_context.restore();\n\n\t\t\t}\n\n\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX, scaleY );\n\n\t\t\tmaterial.program( _context );\n\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t_context.stroke();\n\t\t*/\n\n\t}\n\n\tfunction renderLine( v1, v2, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\n\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\n\t\t\t} else {\n\n\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\n\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\n\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\n\t\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\t\tgrad = colorStyle1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsetStrokeStyle( grad );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_context.stroke();\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\n\t\t\t_context.stroke();\n\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\tsetLineDash( [] );\n\n\t\t}\n\n\t}\n\n\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n\t\t_this.info.render.vertices += 3;\n\t\t_this.info.render.faces ++;\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\n\t\t\t_diffuseColor.copy( material.color );\n\t\t\t_emissiveColor.copy( material.emissive );\n\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t}\n\n\t\t\t_color.copy( _ambientLight );\n\n\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\n\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar mapping = material.map.mapping;\n\n\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\n\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.envMap !== null ) {\n\n\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_color.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t}\n\n\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else {\n\n\t\t\t_color.setRGB( 1, 1, 1 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( x0, y0 );\n\t\t_context.lineTo( x1, y1 );\n\t\t_context.lineTo( x2, y2 );\n\t\t_context.closePath();\n\n\t}\n\n\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\n\t\tsetLineWidth( linewidth );\n\t\tsetLineCap( linecap );\n\t\tsetLineJoin( linejoin );\n\t\tsetStrokeStyle( color.getStyle() );\n\n\t\t_context.stroke();\n\n\t\t_elemBox.expandByScalar( linewidth * 2 );\n\n\t}\n\n\tfunction fillPath( color ) {\n\n\t\tsetFillStyle( color.getStyle() );\n\t\t_context.fill();\n\n\t}\n\n\tfunction textureToPattern( texture ) {\n\n\t\tif ( texture.version === 0 ||\n\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\ttexture instanceof THREE.DataTexture ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\n\t\t}\n\n\t\tvar image = texture.image;\n\n\t\tif ( image.complete === false ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: 0\n\t\t\t};\n\n\t\t}\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width;\n\t\tcanvas.height = image.height;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\tcontext.drawImage( image, 0, 0 );\n\n\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\n\n\t\tvar repeat = 'no-repeat';\n\n\t\tif ( repeatX === true && repeatY === true ) {\n\n\t\t\trepeat = 'repeat';\n\n\t\t} else if ( repeatX === true ) {\n\n\t\t\trepeat = 'repeat-x';\n\n\t\t} else if ( repeatY === true ) {\n\n\t\t\trepeat = 'repeat-y';\n\n\t\t}\n\n\t\tvar pattern = _context.createPattern( canvas, repeat );\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\treturn {\n\t\t\tcanvas: pattern,\n\t\t\tversion: texture.version\n\t\t};\n\n\t}\n\n\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n\t\tvar pattern = _patterns[ texture.id ];\n\n\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\tpattern = textureToPattern( texture );\n\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t}\n\n\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t} else {\n\n\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t_context.fill();\n\t\t\treturn;\n\n\t\t}\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\twidth = texture.image.width * texture.repeat.x,\n\t\theight = texture.image.height * texture.repeat.y;\n\n\t\tu0 = ( u0 + offsetX ) * width;\n\t\tv0 = ( v0 + offsetY ) * height;\n\n\t\tu1 = ( u1 + offsetX ) * width;\n\t\tv1 = ( v1 + offsetY ) * height;\n\n\t\tu2 = ( u2 + offsetX ) * width;\n\t\tv2 = ( v2 + offsetY ) * height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.fill();\n\t\t_context.restore();\n\n\t}\n\n\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\twidth = image.width - 1,\n\t\theight = image.height - 1;\n\n\t\tu0 *= width; v0 *= height;\n\t\tu1 *= width; v1 *= height;\n\t\tu2 *= width; v2 *= height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.clip();\n\t\t_context.drawImage( image, 0, 0 );\n\t\t_context.restore();\n\n\t}\n\n\t// Hide anti-alias gaps\n\n\tfunction expand( v1, v2, pixels ) {\n\n\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\tdet = x * x + y * y, idet;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = pixels / Math.sqrt( det );\n\n\t\tx *= idet; y *= idet;\n\n\t\tv2.x += x; v2.y += y;\n\t\tv1.x -= x; v1.y -= y;\n\n\t}\n\n\t// Context cached methods.\n\n\tfunction setOpacity( value ) {\n\n\t\tif ( _contextGlobalAlpha !== value ) {\n\n\t\t\t_context.globalAlpha = value;\n\t\t\t_contextGlobalAlpha = value;\n\n\t\t}\n\n\t}\n\n\tfunction setBlending( value ) {\n\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\n\t\t\tif ( value === THREE.NormalBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'darker';\n\n\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\n\t\t\t}\n\n\t\t\t_contextGlobalCompositeOperation = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineWidth( value ) {\n\n\t\tif ( _contextLineWidth !== value ) {\n\n\t\t\t_context.lineWidth = value;\n\t\t\t_contextLineWidth = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineCap( value ) {\n\n\t\t// \"butt\", \"round\", \"square\"\n\n\t\tif ( _contextLineCap !== value ) {\n\n\t\t\t_context.lineCap = value;\n\t\t\t_contextLineCap = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineJoin( value ) {\n\n\t\t// \"round\", \"bevel\", \"miter\"\n\n\t\tif ( _contextLineJoin !== value ) {\n\n\t\t\t_context.lineJoin = value;\n\t\t\t_contextLineJoin = value;\n\n\t\t}\n\n\t}\n\n\tfunction setStrokeStyle( value ) {\n\n\t\tif ( _contextStrokeStyle !== value ) {\n\n\t\t\t_context.strokeStyle = value;\n\t\t\t_contextStrokeStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setFillStyle( value ) {\n\n\t\tif ( _contextFillStyle !== value ) {\n\n\t\t\t_context.fillStyle = value;\n\t\t\t_contextFillStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineDash( value ) {\n\n\t\tif ( _contextLineDash.length !== value.length ) {\n\n\t\t\t_context.setLineDash( value );\n\t\t\t_contextLineDash = value;\n\n\t\t}\n\n\t}\n\n};\n\nmodule.exports = THREE;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.RenderableObject = undefined;\nexports.RenderableFace = RenderableFace;\nexports.RenderableVertex = RenderableVertex;\nexports.RenderableLine = RenderableLine;\nexports.RenderableSprite = RenderableSprite;\nexports.Projector = Projector;\n\nvar _three = require('three');\n\nvar _three2 = _interopRequireDefault(_three);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * @author mrdoob / http://mrdoob.com/\n                                                                                                                                                           * @author supereggbert / http://www.paulbrunt.co.uk/\n                                                                                                                                                           * @author julianwa / https://github.com/julianwa\n                                                                                                                                                           */\n\nvar i, l, o; // counters\n\nvar RenderableObject = exports.RenderableObject = function RenderableObject() {\n    _classCallCheck(this, RenderableObject);\n\n    this.id = 0;\n\n    this.object = null;\n    this.z = 0;\n};\n\n;\n\nfunction RenderableFace() {\n\n    this.id = 0;\n\n    this.v1 = new _three2.default.RenderableVertex();\n    this.v2 = new _three2.default.RenderableVertex();\n    this.v3 = new _three2.default.RenderableVertex();\n\n    this.normalModel = new _three2.default.Vector3();\n\n    this.vertexNormalsModel = [new _three2.default.Vector3(), new _three2.default.Vector3(), new _three2.default.Vector3()];\n    this.vertexNormalsLength = 0;\n\n    this.color = new _three2.default.Color();\n    this.material = null;\n    this.uvs = [new _three2.default.Vector2(), new _three2.default.Vector2(), new _three2.default.Vector2()];\n    this.priority = null;\n\n    this.z = 0;\n};\n\nRenderableFace.prototype.copy = function (face) {\n    this.v1.copy(face.v1);\n    this.v2.copy(face.v2);\n    this.v3.copy(face.v3);\n\n    this.normalModel.copy(face.normalModel);\n\n    this.vertexNormalsModel = face.vertexNormalsModel;\n    this.vertexNormalsLength = face.vertexNormalsLength;\n\n    this.color = face.color;\n    this.material = face.material;\n    this.uvs = face.uvs;\n    this.priority = face.priority;\n};\n\nfunction RenderableVertex() {\n\n    this.position = new _three2.default.Vector3();\n    this.positionWorld = new _three2.default.Vector3();\n    this.positionScreen = new _three2.default.Vector4();\n\n    this.visible = true;\n};\n\nRenderableVertex.prototype.copy = function (vertex) {\n\n    this.positionWorld.copy(vertex.positionWorld);\n    this.positionScreen.copy(vertex.positionScreen);\n};\n\nfunction RenderableLine() {\n\n    this.id = 0;\n\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n\n    this.vertexColors = [new _three2.default.Color(), new _three2.default.Color()];\n    this.material = null;\n\n    this.z = 0;\n};\n\nRenderableLine.prototype.copy = function (line) {\n    this.v1.copy(line.v1);\n    this.v2.copy(line.v2);\n\n    this.vertexColors = line.vertexColors;\n    this.material = line.material;\n};\n\nfunction RenderableSprite() {\n\n    this.id = 0;\n\n    this.object = null;\n\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n\n    this.rotation = 0;\n    this.scale = new _three2.default.Vector2();\n\n    this.material = null;\n};\n\nfunction Projector() {\n\n    var _object,\n        _objectCount,\n        _objectPool = [],\n        _objectPoolLength = 0,\n        _vertex,\n        _camera,\n        _vertexCount,\n        _vertexPool = [],\n        _vertexPoolLength = 0,\n        _face,\n        _faceCount,\n        _facePool = [],\n        _facePoolLength = 0,\n        _line,\n        _lineCount,\n        _linePool = [],\n        _linePoolLength = 0,\n        _sprite,\n        _spriteCount,\n        _spritePool = [],\n        _spritePoolLength = 0,\n        _renderData = { objects: [], lights: [], elements: [] },\n        _vA = new _three2.default.Vector3(),\n        _vB = new _three2.default.Vector3(),\n        _vC = new _three2.default.Vector3(),\n        _vector3 = new _three2.default.Vector3(),\n        _vector4 = new _three2.default.Vector4(),\n        _clipBox = new _three2.default.Box3(new _three2.default.Vector3(-1, -1, -1), new _three2.default.Vector3(1, 1, 1)),\n        _boundingBox = new _three2.default.Box3(),\n        _points3 = new Array(3),\n        _points4 = new Array(4),\n        _viewMatrix = new _three2.default.Matrix4(),\n        _viewProjectionMatrix = new _three2.default.Matrix4(),\n        _modelMatrix,\n        _modelViewProjectionMatrix = new _three2.default.Matrix4(),\n        _normalMatrix = new _three2.default.Matrix3(),\n        _frustum = new _three2.default.Frustum(),\n        _clippedVertex1PositionScreen = new _three2.default.Vector4(),\n        _clippedVertex2PositionScreen = new _three2.default.Vector4();\n\n    this.projectVector = function (vector, camera) {\n\n        console.warn('THREE.Projector: .projectVector() is now vector.project().');\n        vector.project(camera);\n    };\n\n    this.unprojectVector = function (vector, camera) {\n\n        console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n        vector.unproject(camera);\n    };\n\n    this.pickingRay = function (vector, camera) {\n\n        console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n    };\n\n    var RenderList = function RenderList() {\n\n        var normals = [];\n        var uvs = [];\n\n        var object = null;\n        var material = null;\n\n        var normalMatrix = new _three2.default.Matrix3();\n\n        var setObject = function setObject(value) {\n\n            object = value;\n            material = object.material;\n\n            normalMatrix.getNormalMatrix(object.matrixWorld);\n\n            normals.length = 0;\n            uvs.length = 0;\n        };\n\n        var projectVertex = function projectVertex(vertex) {\n\n            var position = vertex.position;\n            var positionWorld = vertex.positionWorld;\n            var positionScreen = vertex.positionScreen;\n\n            positionWorld.copy(position).applyMatrix4(_modelMatrix);\n            positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n\n            var invW = 1 / positionScreen.w;\n\n            positionScreen.x *= invW;\n            positionScreen.y *= invW;\n            positionScreen.z *= invW;\n\n            vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n        };\n\n        var pushVertex = function pushVertex(x, y, z) {\n\n            _vertex = getNextVertexInPool();\n            _vertex.position.set(x, y, z);\n\n            projectVertex(_vertex);\n        };\n\n        var pushNormal = function pushNormal(x, y, z) {\n\n            normals.push(x, y, z);\n        };\n\n        var pushUv = function pushUv(x, y) {\n\n            uvs.push(x, y);\n        };\n\n        var checkTriangleVisibility = function checkTriangleVisibility(v1, v2, v3) {\n\n            if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n\n            _points3[0] = v1.positionScreen;\n            _points3[1] = v2.positionScreen;\n            _points3[2] = v3.positionScreen;\n\n            return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n        };\n\n        var checkBackfaceCulling = function checkBackfaceCulling(v1, v2, v3) {\n\n            return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n        };\n\n        var pushLine = function pushLine(a, b) {\n\n            var v1 = _vertexPool[a];\n            var v2 = _vertexPool[b];\n\n            _line = getNextLineInPool();\n\n            _line.id = object.id;\n            _line.v1.copy(v1);\n            _line.v2.copy(v2);\n            _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n\n            _line.material = object.material;\n\n            _renderData.elements.push(_line);\n        };\n\n        var pushTriangle = function pushTriangle(a, b, c) {\n\n            var v1 = _vertexPool[a];\n            var v2 = _vertexPool[b];\n            var v3 = _vertexPool[c];\n\n            if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n            if (material.side === _three2.default.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n\n                _face = getNextFaceInPool();\n\n                _face.id = object.id;\n                _face.priority = face.priority;\n                _face.v1.copy(v1);\n                _face.v2.copy(v2);\n                _face.v3.copy(v3);\n                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\n                for (var i = 0; i < 3; i++) {\n\n                    var offset = arguments[i] * 3;\n                    var normal = _face.vertexNormalsModel[i];\n\n                    normal.set(normals[offset], normals[offset + 1], normals[offset + 2]);\n                    normal.applyMatrix3(normalMatrix).normalize();\n\n                    var offset2 = arguments[i] * 2;\n\n                    var uv = _face.uvs[i];\n                    uv.set(uvs[offset2], uvs[offset2 + 1]);\n                }\n\n                _face.vertexNormalsLength = 3;\n\n                _face.material = object.material;\n\n                _renderData.elements.push(_face);\n            }\n        };\n\n        return {\n            setObject: setObject,\n            projectVertex: projectVertex,\n            checkTriangleVisibility: checkTriangleVisibility,\n            checkBackfaceCulling: checkBackfaceCulling,\n            pushVertex: pushVertex,\n            pushNormal: pushNormal,\n            pushUv: pushUv,\n            pushLine: pushLine,\n            pushTriangle: pushTriangle\n        };\n    };\n\n    var renderList = new RenderList();\n\n    this.projectScene = function (scene, camera, sortObjects, sortElements) {\n\n        _faceCount = 0;\n        _lineCount = 0;\n        _spriteCount = 0;\n\n        _renderData.elements.length = 0;\n\n        _camera = camera;\n\n        if (scene.autoUpdate === true) scene.updateMatrixWorld();\n        if (camera.parent === undefined) camera.updateMatrixWorld();\n\n        _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n        _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n        _frustum.setFromMatrix(_viewProjectionMatrix);\n\n        _objectCount = 0;\n\n        _renderData.objects.length = 0;\n        _renderData.lights.length = 0;\n\n        scene.traverseVisible(function (object) {\n\n            if (object instanceof _three2.default.Light) {\n\n                _renderData.lights.push(object);\n            } else if (object instanceof _three2.default.Mesh || object instanceof _three2.default.Line || object instanceof _three2.default.Sprite) {\n\n                if (object.material.visible === false) return;\n\n                if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n\n                    _object = getNextObjectInPool();\n                    _object.id = object.id;\n                    _object.object = object;\n\n                    _vector3.setFromMatrixPosition(object.matrixWorld);\n                    _vector3.applyProjection(_viewProjectionMatrix);\n                    _object.z = _vector3.z;\n\n                    _renderData.objects.push(_object);\n                }\n            }\n        });\n\n        if (sortObjects === true) {\n\n            _renderData.objects.sort(customSort);\n        }\n\n        for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n\n            var object = _renderData.objects[o].object;\n            var geometry = object.geometry;\n\n            renderList.setObject(object);\n\n            _modelMatrix = object.matrixWorld;\n\n            _vertexCount = 0;\n\n            if (object instanceof _three2.default.Mesh) {\n\n                if (geometry instanceof _three2.default.BufferGeometry) {\n\n                    var attributes = geometry.attributes;\n                    var offsets = geometry.offsets;\n\n                    if (attributes.position === undefined) continue;\n\n                    var positions = attributes.position.array;\n\n                    for (i = 0, l = positions.length; i < l; i += 3) {\n\n                        renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                    }\n\n                    if (attributes.normal !== undefined) {\n\n                        var normals = attributes.normal.array;\n\n                        for (i = 0, l = normals.length; i < l; i += 3) {\n\n                            renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n                        }\n                    }\n\n                    if (attributes.uv !== undefined) {\n\n                        var uvs = attributes.uv.array;\n\n                        for (i = 0, l = uvs.length; i < l; i += 2) {\n\n                            renderList.pushUv(uvs[i], uvs[i + 1]);\n                        }\n                    }\n\n                    if (attributes.index !== undefined) {\n\n                        var indices = attributes.index.array;\n\n                        if (offsets.length > 0) {\n\n                            for (o = 0; o < offsets.length; o++) {\n\n                                var offset = offsets[o];\n                                var index = offset.index;\n\n                                for (i = offset.start, l = offset.start + offset.count; i < l; i += 3) {\n\n                                    renderList.pushTriangle(indices[i] + index, indices[i + 1] + index, indices[i + 2] + index);\n                                }\n                            }\n                        } else {\n\n                            for (i = 0, l = indices.length; i < l; i += 3) {\n\n                                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                            }\n                        }\n                    } else {\n\n                        for (i = 0, l = positions.length / 3; i < l; i += 3) {\n\n                            renderList.pushTriangle(i, i + 1, i + 2);\n                        }\n                    }\n                } else if (geometry instanceof _three2.default.Geometry) {\n\n                    var vertices = geometry.vertices;\n                    var faces = geometry.faces;\n                    var faceVertexUvs = geometry.faceVertexUvs[0];\n\n                    _normalMatrix.getNormalMatrix(_modelMatrix);\n\n                    var isFaceMaterial = object.material instanceof _three2.default.MeshFaceMaterial;\n                    var objectMaterials = isFaceMaterial === true ? object.material : null;\n\n                    for (var v = 0, vl = vertices.length; v < vl; v++) {\n\n                        var vertex = vertices[v];\n                        renderList.pushVertex(vertex.x, vertex.y, vertex.z);\n                    }\n\n                    for (var f = 0, fl = faces.length; f < fl; f++) {\n\n                        var face = faces[f];\n\n                        var material;\n                        if (isFaceMaterial === true) {\n                            material = objectMaterials.materials[face.materialIndex];\n                        } else {\n                            material = object.material;\n                        }\n\n                        if (material === undefined) continue;\n\n                        var side = material.side;\n\n                        var v1 = _vertexPool[face.a];\n                        var v2 = _vertexPool[face.b];\n                        var v3 = _vertexPool[face.c];\n\n                        if (material.morphTargets === true) {\n\n                            var morphTargets = geometry.morphTargets;\n                            var morphInfluences = object.morphTargetInfluences;\n\n                            var v1p = v1.position;\n                            var v2p = v2.position;\n                            var v3p = v3.position;\n\n                            _vA.set(0, 0, 0);\n                            _vB.set(0, 0, 0);\n                            _vC.set(0, 0, 0);\n\n                            for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n\n                                var influence = morphInfluences[t];\n\n                                if (influence === 0) continue;\n\n                                var targets = morphTargets[t].vertices;\n\n                                _vA.x += (targets[face.a].x - v1p.x) * influence;\n                                _vA.y += (targets[face.a].y - v1p.y) * influence;\n                                _vA.z += (targets[face.a].z - v1p.z) * influence;\n\n                                _vB.x += (targets[face.b].x - v2p.x) * influence;\n                                _vB.y += (targets[face.b].y - v2p.y) * influence;\n                                _vB.z += (targets[face.b].z - v2p.z) * influence;\n\n                                _vC.x += (targets[face.c].x - v3p.x) * influence;\n                                _vC.y += (targets[face.c].y - v3p.y) * influence;\n                                _vC.z += (targets[face.c].z - v3p.z) * influence;\n                            }\n\n                            v1.position.add(_vA);\n                            v2.position.add(_vB);\n                            v3.position.add(_vC);\n\n                            renderList.projectVertex(v1);\n                            renderList.projectVertex(v2);\n                            renderList.projectVertex(v3);\n                        }\n\n                        if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n\n                        var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\n                        if (side !== _three2.default.DoubleSide) {\n                            if (side === _three2.default.FrontSide && visible === false) continue;\n                            if (side === _three2.default.BackSide && visible === true) continue;\n                        }\n\n                        _face = getNextFaceInPool();\n\n                        _face.id = object.id;\n                        _face.priority = face.priority;\n                        _face.v1.copy(v1);\n                        _face.v2.copy(v2);\n                        _face.v3.copy(v3);\n\n                        _face.normalModel.copy(face.normal);\n\n                        if (visible === false && (side === _three2.default.BackSide || side === _three2.default.DoubleSide)) {\n\n                            _face.normalModel.negate();\n                        }\n\n                        _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\n                        var faceVertexNormals = face.vertexNormals;\n\n                        for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n\n                            var normalModel = _face.vertexNormalsModel[n];\n                            normalModel.copy(faceVertexNormals[n]);\n\n                            if (visible === false && (side === _three2.default.BackSide || side === _three2.default.DoubleSide)) {\n\n                                normalModel.negate();\n                            }\n\n                            normalModel.applyMatrix3(_normalMatrix).normalize();\n                        }\n\n                        _face.vertexNormalsLength = faceVertexNormals.length;\n\n                        var vertexUvs = faceVertexUvs[f];\n\n                        if (vertexUvs !== undefined) {\n\n                            for (var u = 0; u < 3; u++) {\n\n                                _face.uvs[u].copy(vertexUvs[u]);\n                            }\n                        }\n\n                        _face.color = face.color;\n                        _face.material = material;\n\n                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\n                        _renderData.elements.push(_face);\n                    }\n                }\n            } else if (object instanceof _three2.default.Line) {\n\n                if (geometry instanceof _three2.default.BufferGeometry) {\n\n                    var attributes = geometry.attributes;\n\n                    if (attributes.position !== undefined) {\n\n                        var positions = attributes.position.array;\n\n                        for (i = 0, l = positions.length; i < l; i += 3) {\n\n                            renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                        }\n\n                        if (attributes.index !== undefined) {\n\n                            var indices = attributes.index.array;\n\n                            for (i = 0, l = indices.length; i < l; i += 2) {\n\n                                renderList.pushLine(indices[i], indices[i + 1]);\n                            }\n                        } else {\n\n                            var step = object.mode === _three2.default.LinePieces ? 2 : 1;\n\n                            for (i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n\n                                renderList.pushLine(i, i + 1);\n                            }\n                        }\n                    }\n                } else if (geometry instanceof _three2.default.Geometry) {\n\n                    _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n                    var vertices = object.geometry.vertices;\n\n                    if (vertices.length === 0) continue;\n\n                    var v1 = getNextVertexInPool();\n                    v1.positionWorld.copy(vertices[0]);\n                    v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n\n                    // Handle LineStrip and LinePieces\n                    var step = object.mode === _three2.default.LinePieces ? 2 : 1;\n\n                    for (var v = 1, vl = vertices.length; v < vl; v++) {\n\n                        v1 = getNextVertexInPool();\n                        v1.positionWorld.copy(vertices[v]);\n                        v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n\n                        if ((v + 1) % step > 0) continue;\n\n                        v2 = _vertexPool[_vertexCount - 2];\n\n                        _clippedVertex1PositionScreen.copy(v1.positionScreen);\n                        _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\n                        if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n\n                            // Perform the perspective divide\n                            _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n                            _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\n                            _line = getNextLineInPool();\n\n                            _line.id = object.id;\n                            _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n                            _line.v1.positionWorld.copy(v1.positionWorld);\n\n                            _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n                            _line.v2.positionWorld.copy(v2.positionWorld);\n\n                            _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n\n                            _line.material = object.material;\n\n                            if (object.material.vertexColors === _three2.default.VertexColors) {\n\n                                _line.vertexColors[0].copy(object.geometry.colors[v]);\n                                _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                            }\n\n                            _renderData.elements.push(_line);\n                        }\n                    }\n                }\n            } else if (object instanceof _three2.default.Sprite) {\n\n                _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n                _vector4.applyMatrix4(_viewProjectionMatrix);\n\n                var invW = 1 / _vector4.w;\n\n                _vector4.z *= invW;\n\n                if (_vector4.z >= -1 && _vector4.z <= 1) {\n\n                    _sprite = getNextSpriteInPool();\n                    _sprite.id = object.id;\n                    _sprite.x = _vector4.x * invW;\n                    _sprite.y = _vector4.y * invW;\n                    _sprite.z = _vector4.z;\n                    _sprite.object = object;\n\n                    _sprite.rotation = object.rotation;\n\n                    _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n                    _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n\n                    _sprite.material = object.material;\n\n                    _renderData.elements.push(_sprite);\n                }\n            }\n        }\n\n        if (sortElements === true) {}\n\n        //_renderData.elements.sort( customSort );\n\n        // Build the BSP tree\n        var btree = new BSPTree(_renderData.elements);\n        _renderData.elements = btree.toArray();\n        //_renderData.elements.length = 15;\n\n        return _renderData;\n    };\n\n    // Pools\n\n    function getNextObjectInPool() {\n\n        if (_objectCount === _objectPoolLength) {\n\n            var object = new RenderableObject();\n            _objectPool.push(object);\n            _objectPoolLength++;\n            _objectCount++;\n            return object;\n        }\n\n        return _objectPool[_objectCount++];\n    }\n\n    function getNextVertexInPool() {\n\n        if (_vertexCount === _vertexPoolLength) {\n\n            var vertex = new RenderableVertex();\n            _vertexPool.push(vertex);\n            _vertexPoolLength++;\n            _vertexCount++;\n            return vertex;\n        }\n\n        return _vertexPool[_vertexCount++];\n    }\n\n    function getNextFaceInPool() {\n\n        if (_faceCount === _facePoolLength) {\n\n            var face = new RenderableFace();\n            _facePool.push(face);\n            _facePoolLength++;\n            _faceCount++;\n            return face;\n        }\n\n        return _facePool[_faceCount++];\n    }\n\n    function getNextLineInPool() {\n\n        if (_lineCount === _linePoolLength) {\n\n            var line = new RenderableLine();\n            _linePool.push(line);\n            _linePoolLength++;\n            _lineCount++;\n            return line;\n        }\n\n        return _linePool[_lineCount++];\n    }\n\n    function getNextSpriteInPool() {\n\n        if (_spriteCount === _spritePoolLength) {\n\n            var sprite = new RenderableSprite();\n            _spritePool.push(sprite);\n            _spritePoolLength++;\n            _spriteCount++;\n            return sprite;\n        }\n\n        return _spritePool[_spriteCount++];\n    }\n\n    function BSPTree(data) {\n        if (data.length) {\n            this.root = BSPTree.utils.createNode(data[0]);\n            for (var i = 1; i < data.length; i++) {\n                this.insert(data[i]);\n            }\n        }\n    }\n\n    BSPTree.prototype.insert = function (element, compareWith) {\n        compareWith = compareWith || this.root;\n        var node = element instanceof BSPTree.Node ? element : BSPTree.utils.createNode(element);\n\n        var comparison = node.isBehind(compareWith);\n        if (comparison === undefined) {\n            var fragments = node.separate(compareWith.getNormal(), compareWith.getPointOnPlane());\n\n            var self = this;\n\n            fragments.forEach(function (f) {\n                self.insert(f, compareWith);\n            });\n            return;\n        }\n\n        if (comparison === 0) {\n            var nodePriority = BSPTree.utils.getPriority(node);\n            var compareWithPriority = BSPTree.utils.getPriority(compareWith);\n\n            if (nodePriority > compareWithPriority) {\n                comparison = -1;\n            } else {\n                comparison = 1;\n            }\n        }\n\n        if (comparison === 1) {\n            if (!compareWith.back) {\n                compareWith.back = node;\n            } else {\n                this.insert(node, compareWith.back);\n            }\n        } else {\n            if (!compareWith.front) {\n                compareWith.front = node;\n            } else {\n                this.insert(node, compareWith.front);\n            }\n        }\n    };\n\n    BSPTree.prototype.toArray = function () {\n        var output = [];\n\n        if (this.root) {\n            this.root.traverse(function (elem) {\n                output.push(elem);\n            });\n        }\n\n        return output;\n    };\n\n    BSPTree.utils = {\n        createNode: function createNode(element) {\n            return new (element.v3 ? BSPTree.TriangleNode : BSPTree.LineNode)(element);\n        },\n        getPointSign: function getPointSign(normal, point, pointOnPlane) {\n            return this.sign(normal.dot(point.clone().sub(pointOnPlane)));\n        },\n        getPriority: function getPriority(node) {\n            if (typeof node.element.priority === 'number') {\n                return node.element.priority;\n            } else {\n                return 0;\n            }\n        },\n        isPointInSegment: function isPointInSegment(point, p1, p2) {\n            // This function assumes that point lies on the line\n            // and determines whether it is in line _segment_\n            var minX = Math.min(p1.x, p2.x);\n            var minY = Math.min(p1.y, p2.y);\n            var minZ = Math.min(p1.z, p2.z);\n            var maxX = Math.max(p1.x, p2.x);\n            var maxY = Math.max(p1.y, p2.y);\n            var maxZ = Math.max(p1.z, p2.z);\n\n            return point.x >= minX && point.x <= maxX && point.y >= minY && point.y <= maxY && point.z >= minZ && point.z <= maxZ;\n        },\n        isZero: function isZero(x) {\n            return Math.abs(x) < this.EPSILON;\n        },\n        linePlaneIntersection: function linePlaneIntersection(normal, pointOnPlane, p1, p2) {\n            var upper = pointOnPlane.clone().sub(p1);\n            upper = upper.dot(normal);\n\n            var l = p2.clone().sub(p1);\n            var lower = l.dot(normal);\n\n            if (lower === 0) return undefined;\n\n            var d = upper / lower;\n\n            var intersectionPoint = l.multiplyScalar(d).add(p1);\n\n            return BSPTree.utils.isPointInSegment(intersectionPoint, p1, p2) ? intersectionPoint : undefined;\n        },\n        pointsEqual: function pointsEqual(p1, p2) {\n            return this.isZero(p2.distanceTo(p1));\n        },\n        projectVertex: function projectVertex(vertex) {\n            var oldModelMatrix = _modelMatrix;\n            _modelMatrix = this.IDENTITY_MATRIX;\n            renderList.projectVertex(vertex);\n            vertex.positionScreen.w = 1;\n            _modelMatrix = oldModelMatrix;\n        },\n        sign: function sign(x) {\n            if (this.isZero(x)) {\n                return 0;\n            } else if (x > 0) {\n                return 1;\n            } else {\n                return -1;\n            }\n        },\n\n        EPSILON: 1e-6,\n        IDENTITY_MATRIX: new _three2.default.Matrix4()\n    };\n\n    BSPTree.Node = function () {\n        this.back = null;\n        this.front = null;\n    };\n\n    BSPTree.Node.prototype.isBehind = function (node) {\n        var normal = node.getNormal();\n        var point = node.getPointOnPlane();\n\n        var viewer = _camera._fakePosition || _camera.position;\n        var viewerSign = BSPTree.utils.getPointSign(normal, viewer, point);\n        var thisSign = this.getSign(normal, point);\n\n        if (thisSign === undefined) return undefined;\n\n        if (thisSign === 0) return 0;\n\n        if (viewerSign !== thisSign) {\n            return 1;\n        } else {\n            return -1;\n        }\n    };\n\n    BSPTree.Node.prototype.traverse = function (callback) {\n        if (!callback) {\n            return;\n        }\n\n        if (this.back) {\n            this.back.traverse(callback);\n        }\n\n        callback(this.element);\n\n        if (this.front) {\n            this.front.traverse(callback);\n        }\n    };\n\n    BSPTree.LineNode = function (element) {\n        this.element = element;\n        this.isTriangle = false;\n    };\n    BSPTree.LineNode.prototype = Object.create(BSPTree.Node.prototype);\n\n    BSPTree.LineNode.prototype.getNormal = function () {\n        var l = new _three2.default.Line3(this.element.v1.positionWorld, this.element.v2.positionWorld);\n        var pt = l.closestPointToPoint(_camera.position, false);\n        return pt.sub(_camera.position);\n    };\n\n    BSPTree.LineNode.prototype.getPointOnPlane = function () {\n        return this.element.v1.positionWorld;\n    };\n\n    BSPTree.LineNode.prototype.getSign = function (normal, pointOnPlane) {\n        var s1 = BSPTree.utils.getPointSign(normal, this.element.v1.positionWorld, pointOnPlane);\n        var s2 = BSPTree.utils.getPointSign(normal, this.element.v2.positionWorld, pointOnPlane);\n\n        var sMax = Math.max(s1, s2);\n        var sMin = Math.min(s1, s2);\n\n        switch (Math.abs(sMax - sMin)) {\n            case 0:\n                return sMax;\n            case 1:\n                return sMax || sMin;\n            case 2:\n                return undefined;\n            default:\n                throw new Error('It looks like some unexpected FP error!');\n        }\n    };\n\n    BSPTree.LineNode.prototype.separate = function (normal, point) {\n        var intersectionPoint = BSPTree.utils.linePlaneIntersection(normal, point, this.element.v1.positionWorld, this.element.v2.positionWorld);\n\n        if (intersectionPoint) {\n            var newLine = getNextLineInPool();\n            newLine.copy(this.element);\n\n            var vertex = getNextVertexInPool();\n            vertex.position.copy(intersectionPoint);\n            BSPTree.utils.projectVertex(vertex);\n\n            newLine.v1.copy(vertex);\n            newLine.v2 = this.element.v2;\n            this.element.v2 = vertex;\n\n            return [this, BSPTree.utils.createNode(newLine)];\n        } else {\n            return [this];\n        }\n    };\n\n    BSPTree.TriangleNode = function (element) {\n        this.element = element;\n        this.isTriangle = true;\n    };\n    BSPTree.TriangleNode.prototype = Object.create(BSPTree.Node.prototype);\n\n    BSPTree.TriangleNode.prototype.getNormal = function () {\n        return this.element.normalModel;\n    };\n\n    BSPTree.TriangleNode.prototype.getPointOnPlane = function () {\n        return this.element.v1.positionWorld;\n    };\n\n    BSPTree.TriangleNode.prototype.getSign = function (normal, pointOnPlane) {\n        var s1 = BSPTree.utils.getPointSign(normal, this.element.v1.positionWorld, pointOnPlane);\n        var s2 = BSPTree.utils.getPointSign(normal, this.element.v2.positionWorld, pointOnPlane);\n        var s3 = BSPTree.utils.getPointSign(normal, this.element.v3.positionWorld, pointOnPlane);\n\n        var sMax = Math.max(s1, s2, s3);\n        var sMin = Math.min(s1, s2, s3);\n\n        switch (Math.abs(sMax - sMin)) {\n            case 0:\n                return sMax;\n            case 1:\n                return sMax || sMin;\n            case 2:\n                return undefined;\n            default:\n                throw new Error('It looks like some unexpected FP error!');\n        }\n    };\n\n    BSPTree.TriangleNode.prototype.separate = function (normal, pointOnPlane) {\n        var p1 = this.element.v1.positionWorld;\n        var p2 = this.element.v2.positionWorld;\n        var p3 = this.element.v3.positionWorld;\n\n        // Intersection points\n        var i12 = BSPTree.utils.linePlaneIntersection(normal, pointOnPlane, p1, p2);\n        var i23 = BSPTree.utils.linePlaneIntersection(normal, pointOnPlane, p2, p3);\n        var i31 = BSPTree.utils.linePlaneIntersection(normal, pointOnPlane, p3, p1);\n\n        if (i12 && i23 && i31) {\n            // Special case, one split point is a vertex\n            // In this case we split triangle into two\n            var iVertex, iSide;\n\n            var vertex = getNextVertexInPool();\n            var newTriangle = getNextFaceInPool();\n            newTriangle.copy(this.element);\n\n            if (BSPTree.utils.pointsEqual(i12, i23)) {\n                vertex.position = i31;\n                BSPTree.utils.projectVertex(vertex);\n\n                this.element.v3.copy(vertex);\n                newTriangle.v1 = vertex;\n            } else if (BSPTree.utils.pointsEqual(i23, i31)) {\n                vertex.position = i12;\n                BSPTree.utils.projectVertex(vertex);\n\n                this.element.v1.copy(vertex);\n                newTriangle.v2 = vertex;\n            } else {\n                vertex.position = i23;\n                BSPTree.utils.projectVertex(vertex);\n\n                this.element.v2.copy(vertex);\n                newTriangle.v3 = vertex;\n            }\n\n            return [this, BSPTree.utils.createNode(newTriangle)];\n        } else {\n            var t1 = getNextFaceInPool();\n            var t2 = getNextFaceInPool();\n\n            t1.copy(this.element);\n            t2.copy(this.element);\n\n            var v1 = getNextVertexInPool();\n            var v2 = getNextVertexInPool();\n\n            // Split triangle into three triangles\n            if (!i12) {\n                this.element.v1.position = i31;\n                this.element.v2.position = i23;\n                BSPTree.utils.projectVertex(this.element.v1);\n                BSPTree.utils.projectVertex(this.element.v2);\n\n                t1.v2.copy(this.element.v2);\n                t1.v3.copy(this.element.v1);\n\n                t2.v3.copy(this.element.v2);\n            } else if (!i23) {\n                this.element.v2.position = i12;\n                this.element.v3.position = i31;\n                BSPTree.utils.projectVertex(this.element.v2);\n                BSPTree.utils.projectVertex(this.element.v3);\n\n                t1.v1.copy(this.element.v2);\n                t1.v3.copy(this.element.v3);\n\n                t2.v1.copy(this.element.v3);\n            } else {\n                this.element.v1.position = i12;\n                this.element.v3.position = i23;\n                BSPTree.utils.projectVertex(this.element.v1);\n                BSPTree.utils.projectVertex(this.element.v3);\n\n                t1.v1.copy(this.element.v1);\n                t1.v2.copy(this.element.v3);\n\n                t2.v2.copy(this.element.v1);\n            }\n\n            return [this, BSPTree.utils.createNode(t1), BSPTree.utils.createNode(t2)];\n        }\n    };\n\n    function painterSort(a, b) {\n        if (a.z !== b.z) {\n\n            return b.z - a.z;\n\n            // Fallback: compare ids\n        } else if (a.id !== b.id) {\n\n            return a.id - b.id;\n        } else {\n            // Faces seem to be equal!\n            return 0;\n        }\n    }\n\n    function clipLine(s1, s2) {\n\n        var alpha1 = 0,\n            alpha2 = 1,\n\n\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n        // Z = -1 and Z = +1, respectively.\n        bc1near = s1.z + s1.w,\n            bc2near = s2.z + s2.w,\n            bc1far = -s1.z + s1.w,\n            bc2far = -s2.z + s2.w;\n\n        if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n\n            // Both vertices lie entirely within all clip planes.\n            return true;\n        } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n\n            // Both vertices lie entirely outside one of the clip planes.\n            return false;\n        } else {\n\n            // The line segment spans at least one clip plane.\n\n            if (bc1near < 0) {\n\n                // v1 lies outside the near plane, v2 inside\n                alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n            } else if (bc2near < 0) {\n\n                // v2 lies outside the near plane, v1 inside\n                alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n            }\n\n            if (bc1far < 0) {\n\n                // v1 lies outside the far plane, v2 inside\n                alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n            } else if (bc2far < 0) {\n\n                // v2 lies outside the far plane, v2 inside\n                alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n            }\n\n            if (alpha2 < alpha1) {\n\n                // The line segment spans two boundaries, but is outside both of them.\n                // (This can't happen when we're only clipping against just near/far but good\n                //  to leave the check here for future usage if other clip planes are added.)\n                return false;\n            } else {\n\n                // Update the s1 and s2 vertices to match the clipped line segment.\n                s1.lerp(s2, alpha1);\n                s2.lerp(s1, 1 - alpha2);\n\n                return true;\n            }\n        }\n    }\n};\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.THREE = global.THREE || {})));\n}(this, (function (exports) { 'use strict';\n\n    // Polyfills\n\n    if ( Number.EPSILON === undefined ) {\n\n    \tNumber.EPSILON = Math.pow( 2, - 52 );\n\n    }\n\n    //\n\n    if ( Math.sign === undefined ) {\n\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n    \tMath.sign = function ( x ) {\n\n    \t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n    \t};\n\n    }\n\n    if ( Function.prototype.name === undefined ) {\n\n    \t// Missing in IE9-11.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n    \tObject.defineProperty( Function.prototype, 'name', {\n\n    \t\tget: function () {\n\n    \t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n    \t\t}\n\n    \t} );\n\n    }\n\n    if ( Object.assign === undefined ) {\n\n    \t// Missing in IE.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n    \t( function () {\n\n    \t\tObject.assign = function ( target ) {\n\n    \t\t\t'use strict';\n\n    \t\t\tif ( target === undefined || target === null ) {\n\n    \t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n    \t\t\t}\n\n    \t\t\tvar output = Object( target );\n\n    \t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n    \t\t\t\tvar source = arguments[ index ];\n\n    \t\t\t\tif ( source !== undefined && source !== null ) {\n\n    \t\t\t\t\tfor ( var nextKey in source ) {\n\n    \t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n    \t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn output;\n\n    \t\t};\n\n    \t} )();\n\n    }\n\n    /**\n     * https://github.com/mrdoob/eventdispatcher.js/\n     */\n\n    function EventDispatcher() {}\n\n    Object.assign( EventDispatcher.prototype, {\n\n    \taddEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) this._listeners = {};\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] === undefined ) {\n\n    \t\t\tlisteners[ type ] = [];\n\n    \t\t}\n\n    \t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n    \t\t\tlisteners[ type ].push( listener );\n\n    \t\t}\n\n    \t},\n\n    \thasEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return false;\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tremoveEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tvar index = listenerArray.indexOf( listener );\n\n    \t\t\tif ( index !== - 1 ) {\n\n    \t\t\t\tlistenerArray.splice( index, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tdispatchEvent: function ( event ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ event.type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tevent.target = this;\n\n    \t\t\tvar array = [], i = 0;\n    \t\t\tvar length = listenerArray.length;\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ] = listenerArray[ i ];\n\n    \t\t\t}\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ].call( this, event );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    var REVISION = '81';\n    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n    var CullFaceNone = 0;\n    var CullFaceBack = 1;\n    var CullFaceFront = 2;\n    var CullFaceFrontBack = 3;\n    var FrontFaceDirectionCW = 0;\n    var FrontFaceDirectionCCW = 1;\n    var BasicShadowMap = 0;\n    var PCFShadowMap = 1;\n    var PCFSoftShadowMap = 2;\n    var FrontSide = 0;\n    var BackSide = 1;\n    var DoubleSide = 2;\n    var FlatShading = 1;\n    var SmoothShading = 2;\n    var NoColors = 0;\n    var FaceColors = 1;\n    var VertexColors = 2;\n    var NoBlending = 0;\n    var NormalBlending = 1;\n    var AdditiveBlending = 2;\n    var SubtractiveBlending = 3;\n    var MultiplyBlending = 4;\n    var CustomBlending = 5;\n    var BlendingMode = {\n        NoBlending: NoBlending,\n        NormalBlending: NormalBlending,\n        AdditiveBlending: AdditiveBlending,\n        SubtractiveBlending: SubtractiveBlending,\n        MultiplyBlending: MultiplyBlending,\n        CustomBlending: CustomBlending\n    };\n    var AddEquation = 100;\n    var SubtractEquation = 101;\n    var ReverseSubtractEquation = 102;\n    var MinEquation = 103;\n    var MaxEquation = 104;\n    var ZeroFactor = 200;\n    var OneFactor = 201;\n    var SrcColorFactor = 202;\n    var OneMinusSrcColorFactor = 203;\n    var SrcAlphaFactor = 204;\n    var OneMinusSrcAlphaFactor = 205;\n    var DstAlphaFactor = 206;\n    var OneMinusDstAlphaFactor = 207;\n    var DstColorFactor = 208;\n    var OneMinusDstColorFactor = 209;\n    var SrcAlphaSaturateFactor = 210;\n    var NeverDepth = 0;\n    var AlwaysDepth = 1;\n    var LessDepth = 2;\n    var LessEqualDepth = 3;\n    var EqualDepth = 4;\n    var GreaterEqualDepth = 5;\n    var GreaterDepth = 6;\n    var NotEqualDepth = 7;\n    var MultiplyOperation = 0;\n    var MixOperation = 1;\n    var AddOperation = 2;\n    var NoToneMapping = 0;\n    var LinearToneMapping = 1;\n    var ReinhardToneMapping = 2;\n    var Uncharted2ToneMapping = 3;\n    var CineonToneMapping = 4;\n    var UVMapping = 300;\n    var CubeReflectionMapping = 301;\n    var CubeRefractionMapping = 302;\n    var EquirectangularReflectionMapping = 303;\n    var EquirectangularRefractionMapping = 304;\n    var SphericalReflectionMapping = 305;\n    var CubeUVReflectionMapping = 306;\n    var CubeUVRefractionMapping = 307;\n    var TextureMapping = {\n        UVMapping: UVMapping,\n        CubeReflectionMapping: CubeReflectionMapping,\n        CubeRefractionMapping: CubeRefractionMapping,\n        EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n        EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n        SphericalReflectionMapping: SphericalReflectionMapping,\n        CubeUVReflectionMapping: CubeUVReflectionMapping,\n        CubeUVRefractionMapping: CubeUVRefractionMapping\n    };\n    var RepeatWrapping = 1000;\n    var ClampToEdgeWrapping = 1001;\n    var MirroredRepeatWrapping = 1002;\n    var TextureWrapping = {\n        RepeatWrapping: RepeatWrapping,\n        ClampToEdgeWrapping: ClampToEdgeWrapping,\n        MirroredRepeatWrapping: MirroredRepeatWrapping\n    };\n    var NearestFilter = 1003;\n    var NearestMipMapNearestFilter = 1004;\n    var NearestMipMapLinearFilter = 1005;\n    var LinearFilter = 1006;\n    var LinearMipMapNearestFilter = 1007;\n    var LinearMipMapLinearFilter = 1008;\n    var TextureFilter = {\n        NearestFilter: NearestFilter,\n        NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n        NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n        LinearFilter: LinearFilter,\n        LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n        LinearMipMapLinearFilter: LinearMipMapLinearFilter\n    };\n    var UnsignedByteType = 1009;\n    var ByteType = 1010;\n    var ShortType = 1011;\n    var UnsignedShortType = 1012;\n    var IntType = 1013;\n    var UnsignedIntType = 1014;\n    var FloatType = 1015;\n    var HalfFloatType = 1016;\n    var UnsignedShort4444Type = 1017;\n    var UnsignedShort5551Type = 1018;\n    var UnsignedShort565Type = 1019;\n    var UnsignedInt248Type = 1020;\n    var AlphaFormat = 1021;\n    var RGBFormat = 1022;\n    var RGBAFormat = 1023;\n    var LuminanceFormat = 1024;\n    var LuminanceAlphaFormat = 1025;\n    var RGBEFormat = RGBAFormat;\n    var DepthFormat = 1026;\n    var DepthStencilFormat = 1027;\n    var RGB_S3TC_DXT1_Format = 2001;\n    var RGBA_S3TC_DXT1_Format = 2002;\n    var RGBA_S3TC_DXT3_Format = 2003;\n    var RGBA_S3TC_DXT5_Format = 2004;\n    var RGB_PVRTC_4BPPV1_Format = 2100;\n    var RGB_PVRTC_2BPPV1_Format = 2101;\n    var RGBA_PVRTC_4BPPV1_Format = 2102;\n    var RGBA_PVRTC_2BPPV1_Format = 2103;\n    var RGB_ETC1_Format = 2151;\n    var LoopOnce = 2200;\n    var LoopRepeat = 2201;\n    var LoopPingPong = 2202;\n    var InterpolateDiscrete = 2300;\n    var InterpolateLinear = 2301;\n    var InterpolateSmooth = 2302;\n    var ZeroCurvatureEnding = 2400;\n    var ZeroSlopeEnding = 2401;\n    var WrapAroundEnding = 2402;\n    var TrianglesDrawMode = 0;\n    var TriangleStripDrawMode = 1;\n    var TriangleFanDrawMode = 2;\n    var LinearEncoding = 3000;\n    var sRGBEncoding = 3001;\n    var GammaEncoding = 3007;\n    var RGBEEncoding = 3002;\n    var LogLuvEncoding = 3003;\n    var RGBM7Encoding = 3004;\n    var RGBM16Encoding = 3005;\n    var RGBDEncoding = 3006;\n    var BasicDepthPacking = 3200;\n    var RGBADepthPacking = 3201;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Math = {\n\n    \tDEG2RAD: Math.PI / 180,\n    \tRAD2DEG: 180 / Math.PI,\n\n    \tgenerateUUID: function () {\n\n    \t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n    \t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n    \t\tvar uuid = new Array( 36 );\n    \t\tvar rnd = 0, r;\n\n    \t\treturn function generateUUID() {\n\n    \t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n    \t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n    \t\t\t\t\tuuid[ i ] = '-';\n\n    \t\t\t\t} else if ( i === 14 ) {\n\n    \t\t\t\t\tuuid[ i ] = '4';\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n    \t\t\t\t\tr = rnd & 0xf;\n    \t\t\t\t\trnd = rnd >> 4;\n    \t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn uuid.join( '' );\n\n    \t\t};\n\n    \t}(),\n\n    \tclamp: function ( value, min, max ) {\n\n    \t\treturn Math.max( min, Math.min( max, value ) );\n\n    \t},\n\n    \t// compute euclidian modulo of m % n\n    \t// https://en.wikipedia.org/wiki/Modulo_operation\n\n    \teuclideanModulo: function ( n, m ) {\n\n    \t\treturn ( ( n % m ) + m ) % m;\n\n    \t},\n\n    \t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n    \tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n    \t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n    \t},\n\n    \t// http://en.wikipedia.org/wiki/Smoothstep\n\n    \tsmoothstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * ( 3 - 2 * x );\n\n    \t},\n\n    \tsmootherstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n    \t},\n\n    \trandom16: function () {\n\n    \t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n    \t\treturn Math.random();\n\n    \t},\n\n    \t// Random integer from <low, high> interval\n\n    \trandInt: function ( low, high ) {\n\n    \t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n    \t},\n\n    \t// Random float from <low, high> interval\n\n    \trandFloat: function ( low, high ) {\n\n    \t\treturn low + Math.random() * ( high - low );\n\n    \t},\n\n    \t// Random float from <-range/2, range/2> interval\n\n    \trandFloatSpread: function ( range ) {\n\n    \t\treturn range * ( 0.5 - Math.random() );\n\n    \t},\n\n    \tdegToRad: function ( degrees ) {\n\n    \t\treturn degrees * exports.Math.DEG2RAD;\n\n    \t},\n\n    \tradToDeg: function ( radians ) {\n\n    \t\treturn radians * exports.Math.RAD2DEG;\n\n    \t},\n\n    \tisPowerOfTwo: function ( value ) {\n\n    \t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n    \t},\n\n    \tnearestPowerOfTwo: function ( value ) {\n\n    \t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n    \t},\n\n    \tnextPowerOfTwo: function ( value ) {\n\n    \t\tvalue --;\n    \t\tvalue |= value >> 1;\n    \t\tvalue |= value >> 2;\n    \t\tvalue |= value >> 4;\n    \t\tvalue |= value >> 8;\n    \t\tvalue |= value >> 16;\n    \t\tvalue ++;\n\n    \t\treturn value;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author philogb / http://blog.thejit.org/\n     * @author egraether / http://egraether.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    function Vector2( x, y ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n\n    }\n\n    Vector2.prototype = {\n\n    \tconstructor: Vector2,\n\n    \tisVector2: true,\n\n    \tget width() {\n\n    \t\treturn this.x;\n\n    \t},\n\n    \tset width( value ) {\n\n    \t\tthis.x = value;\n\n    \t},\n\n    \tget height() {\n\n    \t\treturn this.y;\n\n    \t},\n\n    \tset height( value ) {\n\n    \t\tthis.y = value;\n\n    \t},\n\n    \t//\n\n    \tset: function ( x, y ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v ) {\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector2();\n    \t\t\t\tmax = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n    \t},\n\n    \tlengthManhattan: function() {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tangle: function () {\n\n    \t\t// computes the angle in radians with respect to the positive x-axis\n\n    \t\tvar angle = Math.atan2( this.y, this.x );\n\n    \t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n    \t\treturn angle;\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y;\n    \t\treturn dx * dx + dy * dy;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateAround: function ( center, angle ) {\n\n    \t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n    \t\tvar x = this.x - center.x;\n    \t\tvar y = this.y - center.y;\n\n    \t\tthis.x = x * c - y * s + center.x;\n    \t\tthis.y = x * s + y * c + center.y;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     */\n\n    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.sourceFile = '';\n\n    \tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n    \tthis.mipmaps = [];\n\n    \tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n    \tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n    \tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n    \tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n    \tthis.format = format !== undefined ? format : RGBAFormat;\n    \tthis.type = type !== undefined ? type : UnsignedByteType;\n\n    \tthis.offset = new Vector2( 0, 0 );\n    \tthis.repeat = new Vector2( 1, 1 );\n\n    \tthis.generateMipmaps = true;\n    \tthis.premultiplyAlpha = false;\n    \tthis.flipY = true;\n    \tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n    \t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n    \t//\n    \t// Also changing the encoding after already used by a Material will not automatically make the Material\n    \t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n    \tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\n    \tthis.version = 0;\n    \tthis.onUpdate = null;\n\n    }\n\n    Texture.DEFAULT_IMAGE = undefined;\n    Texture.DEFAULT_MAPPING = UVMapping;\n\n    Texture.prototype = {\n\n    \tconstructor: Texture,\n\n    \tisTexture: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.image = source.image;\n    \t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n    \t\tthis.mapping = source.mapping;\n\n    \t\tthis.wrapS = source.wrapS;\n    \t\tthis.wrapT = source.wrapT;\n\n    \t\tthis.magFilter = source.magFilter;\n    \t\tthis.minFilter = source.minFilter;\n\n    \t\tthis.anisotropy = source.anisotropy;\n\n    \t\tthis.format = source.format;\n    \t\tthis.type = source.type;\n\n    \t\tthis.offset.copy( source.offset );\n    \t\tthis.repeat.copy( source.repeat );\n\n    \t\tthis.generateMipmaps = source.generateMipmaps;\n    \t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n    \t\tthis.flipY = source.flipY;\n    \t\tthis.unpackAlignment = source.unpackAlignment;\n    \t\tthis.encoding = source.encoding;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n    \t\t\treturn meta.textures[ this.uuid ];\n\n    \t\t}\n\n    \t\tfunction getDataURL( image ) {\n\n    \t\t\tvar canvas;\n\n    \t\t\tif ( image.toDataURL !== undefined ) {\n\n    \t\t\t\tcanvas = image;\n\n    \t\t\t} else {\n\n    \t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\t\tcanvas.width = image.width;\n    \t\t\t\tcanvas.height = image.height;\n\n    \t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n    \t\t\t}\n\n    \t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n    \t\t\t} else {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Texture',\n    \t\t\t\tgenerator: 'Texture.toJSON'\n    \t\t\t},\n\n    \t\t\tuuid: this.uuid,\n    \t\t\tname: this.name,\n\n    \t\t\tmapping: this.mapping,\n\n    \t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n    \t\t\toffset: [ this.offset.x, this.offset.y ],\n    \t\t\twrap: [ this.wrapS, this.wrapT ],\n\n    \t\t\tminFilter: this.minFilter,\n    \t\t\tmagFilter: this.magFilter,\n    \t\t\tanisotropy: this.anisotropy,\n\n    \t\t\tflipY: this.flipY\n    \t\t};\n\n    \t\tif ( this.image !== undefined ) {\n\n    \t\t\t// TODO: Move to THREE.Image\n\n    \t\t\tvar image = this.image;\n\n    \t\t\tif ( image.uuid === undefined ) {\n\n    \t\t\t\timage.uuid = exports.Math.generateUUID(); // UGH\n\n    \t\t\t}\n\n    \t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.images[ image.uuid ] = {\n    \t\t\t\t\tuuid: image.uuid,\n    \t\t\t\t\turl: getDataURL( image )\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\toutput.image = image.uuid;\n\n    \t\t}\n\n    \t\tmeta.textures[ this.uuid ] = output;\n\n    \t\treturn output;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t},\n\n    \ttransformUv: function ( uv ) {\n\n    \t\tif ( this.mapping !== UVMapping )  return;\n\n    \t\tuv.multiply( this.repeat );\n    \t\tuv.add( this.offset );\n\n    \t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n    \t\t\tswitch ( this.wrapS ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n    \t\t\tswitch ( this.wrapT ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.flipY ) {\n\n    \t\t\tuv.y = 1 - uv.y;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    Object.assign( Texture.prototype, EventDispatcher.prototype );\n\n    var count = 0;\n    function TextureIdCount() { return count++; };\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector4( x, y, z, w ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n    \tthis.w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Vector4.prototype = {\n\n    \tconstructor: Vector4,\n\n    \tisVector4: true,\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n    \t\tthis.w = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( w ) {\n\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tcase 3: this.w = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tcase 3: return this.w;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n    \t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n    \t\tthis.w += v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n    \t\tthis.w += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n    \t\tthis.w = a.w + b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n    \t\tthis.w += v.w * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n    \t\tthis.w -= v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n    \t\tthis.w -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n    \t\tthis.w = a.w - b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n    \t\t\tthis.w *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n    \t\t\tthis.w = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n    \t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tsetAxisAngleFromQuaternion: function ( q ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n    \t\t// q is assumed to be normalized\n\n    \t\tthis.w = 2 * Math.acos( q.w );\n\n    \t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n    \t\tif ( s < 0.0001 ) {\n\n    \t\t\t this.x = 1;\n    \t\t\t this.y = 0;\n    \t\t\t this.z = 0;\n\n    \t\t} else {\n\n    \t\t\t this.x = q.x / s;\n    \t\t\t this.y = q.y / s;\n    \t\t\t this.z = q.z / s;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar angle, x, y, z,\t\t// variables for result\n    \t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n    \t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n    \t\t\tte = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n    \t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n    \t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n    \t\t\t// singularity found\n    \t\t\t// first check for identity matrix which must have +1 for all terms\n    \t\t\t// in leading diagonal and zero in other terms\n\n    \t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n    \t\t\t\t// this singularity is identity matrix so angle = 0\n\n    \t\t\t\tthis.set( 1, 0, 0, 0 );\n\n    \t\t\t\treturn this; // zero angle, arbitrary axis\n\n    \t\t\t}\n\n    \t\t\t// otherwise this singularity is angle = 180\n\n    \t\t\tangle = Math.PI;\n\n    \t\t\tvar xx = ( m11 + 1 ) / 2;\n    \t\t\tvar yy = ( m22 + 1 ) / 2;\n    \t\t\tvar zz = ( m33 + 1 ) / 2;\n    \t\t\tvar xy = ( m12 + m21 ) / 4;\n    \t\t\tvar xz = ( m13 + m31 ) / 4;\n    \t\t\tvar yz = ( m23 + m32 ) / 4;\n\n    \t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n    \t\t\t\t// m11 is the largest diagonal term\n\n    \t\t\t\tif ( xx < epsilon ) {\n\n    \t\t\t\t\tx = 0;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tx = Math.sqrt( xx );\n    \t\t\t\t\ty = xy / x;\n    \t\t\t\t\tz = xz / x;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( yy > zz ) {\n\n    \t\t\t\t// m22 is the largest diagonal term\n\n    \t\t\t\tif ( yy < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ty = Math.sqrt( yy );\n    \t\t\t\t\tx = xy / y;\n    \t\t\t\t\tz = yz / y;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// m33 is the largest diagonal term so base result on this\n\n    \t\t\t\tif ( zz < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tz = Math.sqrt( zz );\n    \t\t\t\t\tx = xz / z;\n    \t\t\t\t\ty = yz / z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.set( x, y, z, angle );\n\n    \t\t\treturn this; // return 180 deg rotation\n\n    \t\t}\n\n    \t\t// as we have reached here there are no singularities so we can handle normally\n\n    \t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n    \t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n    \t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n    \t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n    \t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n    \t\t// caught by singularity test above, but I've left it in just in case\n\n    \t\tthis.x = ( m32 - m23 ) / s;\n    \t\tthis.y = ( m13 - m31 ) / s;\n    \t\tthis.z = ( m21 - m12 ) / s;\n    \t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n    \t\tthis.w = Math.min( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n    \t\tthis.w = Math.max( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n    \t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector4();\n    \t\t\t\tmax = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n    \t\tthis.w = Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n    \t\tthis.w = Math.ceil( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n    \t\tthis.w = Math.round( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n    \t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n    \t\tthis.w = - this.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n    \t\tthis.w += ( v.w - this.w ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n    \t\tthis.w = array[ offset + 3 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n    \t\tarray[ offset + 3 ] = this.w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n    \t\tthis.w = attribute.array[ index + 3 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author szimek / https://github.com/szimek/\n     * @author alteredq / http://alteredqualia.com/\n     * @author Marius Kintel / https://github.com/kintel\n     */\n\n    /*\n     In options, we can specify:\n     * Texture parameters for an auto-generated target texture\n     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n    */\n    function WebGLRenderTarget( width, height, options ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.width = width;\n    \tthis.height = height;\n\n    \tthis.scissor = new Vector4( 0, 0, width, height );\n    \tthis.scissorTest = false;\n\n    \tthis.viewport = new Vector4( 0, 0, width, height );\n\n    \toptions = options || {};\n\n    \tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n    \tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n    \tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n    \tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n    \tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n    }\n\n    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\n    \tisWebGLRenderTarget: true,\n\n    \tsetSize: function ( width, height ) {\n\n    \t\tif ( this.width !== width || this.height !== height ) {\n\n    \t\t\tthis.width = width;\n    \t\t\tthis.height = height;\n\n    \t\t\tthis.dispose();\n\n    \t\t}\n\n    \t\tthis.viewport.set( 0, 0, width, height );\n    \t\tthis.scissor.set( 0, 0, width, height );\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.width = source.width;\n    \t\tthis.height = source.height;\n\n    \t\tthis.viewport.copy( source.viewport );\n\n    \t\tthis.texture = source.texture.clone();\n\n    \t\tthis.depthBuffer = source.depthBuffer;\n    \t\tthis.stencilBuffer = source.stencilBuffer;\n    \t\tthis.depthTexture = source.depthTexture;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com\n     */\n\n    function WebGLRenderTargetCube( width, height, options ) {\n\n    \tWebGLRenderTarget.call( this, width, height, options );\n\n    \tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n    \tthis.activeMipMapLevel = 0;\n\n    }\n\n    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Quaternion( x, y, z, w ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Quaternion.prototype = {\n\n    \tconstructor: Quaternion,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget w () {\n\n    \t\treturn this._w;\n\n    \t},\n\n    \tset w ( value ) {\n\n    \t\tthis._w = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._w = w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n    \t},\n\n    \tcopy: function ( quaternion ) {\n\n    \t\tthis._x = quaternion.x;\n    \t\tthis._y = quaternion.y;\n    \t\tthis._z = quaternion.z;\n    \t\tthis._w = quaternion.w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromEuler: function ( euler, update ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n    \t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    \t\t//\tcontent/SpinCalc.m\n\n    \t\tvar c1 = Math.cos( euler._x / 2 );\n    \t\tvar c2 = Math.cos( euler._y / 2 );\n    \t\tvar c3 = Math.cos( euler._z / 2 );\n    \t\tvar s1 = Math.sin( euler._x / 2 );\n    \t\tvar s2 = Math.sin( euler._y / 2 );\n    \t\tvar s3 = Math.sin( euler._z / 2 );\n\n    \t\tvar order = euler.order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t}\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    \t\t// assumes axis is normalized\n\n    \t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n    \t\tthis._x = axis.x * s;\n    \t\tthis._y = axis.y * s;\n    \t\tthis._z = axis.z * s;\n    \t\tthis._w = Math.cos( halfAngle );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n    \t\t\ttrace = m11 + m22 + m33,\n    \t\t\ts;\n\n    \t\tif ( trace > 0 ) {\n\n    \t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n    \t\t\tthis._w = 0.25 / s;\n    \t\t\tthis._x = ( m32 - m23 ) * s;\n    \t\t\tthis._y = ( m13 - m31 ) * s;\n    \t\t\tthis._z = ( m21 - m12 ) * s;\n\n    \t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n    \t\t\tthis._w = ( m32 - m23 ) / s;\n    \t\t\tthis._x = 0.25 * s;\n    \t\t\tthis._y = ( m12 + m21 ) / s;\n    \t\t\tthis._z = ( m13 + m31 ) / s;\n\n    \t\t} else if ( m22 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n    \t\t\tthis._w = ( m13 - m31 ) / s;\n    \t\t\tthis._x = ( m12 + m21 ) / s;\n    \t\t\tthis._y = 0.25 * s;\n    \t\t\tthis._z = ( m23 + m32 ) / s;\n\n    \t\t} else {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n    \t\t\tthis._w = ( m21 - m12 ) / s;\n    \t\t\tthis._x = ( m13 + m31 ) / s;\n    \t\t\tthis._y = ( m23 + m32 ) / s;\n    \t\t\tthis._z = 0.25 * s;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromUnitVectors: function () {\n\n    \t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n    \t\t// assumes direction vectors vFrom and vTo are normalized\n\n    \t\tvar v1, r;\n\n    \t\tvar EPS = 0.000001;\n\n    \t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tr = vFrom.dot( vTo ) + 1;\n\n    \t\t\tif ( r < EPS ) {\n\n    \t\t\t\tr = 0;\n\n    \t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n    \t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tv1.crossVectors( vFrom, vTo );\n\n    \t\t\t}\n\n    \t\t\tthis._x = v1.x;\n    \t\t\tthis._y = v1.y;\n    \t\t\tthis._z = v1.z;\n    \t\t\tthis._w = r;\n\n    \t\t\treturn this.normalize();\n\n    \t\t};\n\n    \t}(),\n\n    \tinverse: function () {\n\n    \t\treturn this.conjugate().normalize();\n\n    \t},\n\n    \tconjugate: function () {\n\n    \t\tthis._x *= - 1;\n    \t\tthis._y *= - 1;\n    \t\tthis._z *= - 1;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tvar l = this.length();\n\n    \t\tif ( l === 0 ) {\n\n    \t\t\tthis._x = 0;\n    \t\t\tthis._y = 0;\n    \t\t\tthis._z = 0;\n    \t\t\tthis._w = 1;\n\n    \t\t} else {\n\n    \t\t\tl = 1 / l;\n\n    \t\t\tthis._x = this._x * l;\n    \t\t\tthis._y = this._y * l;\n    \t\t\tthis._z = this._z * l;\n    \t\t\tthis._w = this._w * l;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( q, p ) {\n\n    \t\tif ( p !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n    \t\t\treturn this.multiplyQuaternions( q, p );\n\n    \t\t}\n\n    \t\treturn this.multiplyQuaternions( this, q );\n\n    \t},\n\n    \tpremultiply: function ( q ) {\n\n    \t\treturn this.multiplyQuaternions( q, this );\n\n    \t},\n\n    \tmultiplyQuaternions: function ( a, b ) {\n\n    \t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n    \t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n    \t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n    \t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    \t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    \t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    \t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tslerp: function ( qb, t ) {\n\n    \t\tif ( t === 0 ) return this;\n    \t\tif ( t === 1 ) return this.copy( qb );\n\n    \t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n    \t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    \t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    \t\tif ( cosHalfTheta < 0 ) {\n\n    \t\t\tthis._w = - qb._w;\n    \t\t\tthis._x = - qb._x;\n    \t\t\tthis._y = - qb._y;\n    \t\t\tthis._z = - qb._z;\n\n    \t\t\tcosHalfTheta = - cosHalfTheta;\n\n    \t\t} else {\n\n    \t\t\tthis.copy( qb );\n\n    \t\t}\n\n    \t\tif ( cosHalfTheta >= 1.0 ) {\n\n    \t\t\tthis._w = w;\n    \t\t\tthis._x = x;\n    \t\t\tthis._y = y;\n    \t\t\tthis._z = z;\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n    \t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n    \t\t\tthis._w = 0.5 * ( w + this._w );\n    \t\t\tthis._x = 0.5 * ( x + this._x );\n    \t\t\tthis._y = 0.5 * ( y + this._y );\n    \t\t\tthis._z = 0.5 * ( z + this._z );\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n    \t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n    \t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n    \t\tthis._w = ( w * ratioA + this._w * ratioB );\n    \t\tthis._x = ( x * ratioA + this._x * ratioB );\n    \t\tthis._y = ( y * ratioA + this._y * ratioB );\n    \t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( quaternion ) {\n\n    \t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis._x = array[ offset ];\n    \t\tthis._y = array[ offset + 1 ];\n    \t\tthis._z = array[ offset + 2 ];\n    \t\tthis._w = array[ offset + 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    Object.assign( Quaternion, {\n\n    \tslerp: function( qa, qb, qm, t ) {\n\n    \t\treturn qm.copy( qa ).slerp( qb, t );\n\n    \t},\n\n    \tslerpFlat: function(\n    \t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n    \t\t// fuzz-free, array-based Quaternion SLERP operation\n\n    \t\tvar x0 = src0[ srcOffset0 + 0 ],\n    \t\t\ty0 = src0[ srcOffset0 + 1 ],\n    \t\t\tz0 = src0[ srcOffset0 + 2 ],\n    \t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n    \t\t\tx1 = src1[ srcOffset1 + 0 ],\n    \t\t\ty1 = src1[ srcOffset1 + 1 ],\n    \t\t\tz1 = src1[ srcOffset1 + 2 ],\n    \t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n    \t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n    \t\t\tvar s = 1 - t,\n\n    \t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n    \t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n    \t\t\t\tsqrSin = 1 - cos * cos;\n\n    \t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n    \t\t\tif ( sqrSin > Number.EPSILON ) {\n\n    \t\t\t\tvar sin = Math.sqrt( sqrSin ),\n    \t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n    \t\t\t\ts = Math.sin( s * len ) / sin;\n    \t\t\t\tt = Math.sin( t * len ) / sin;\n\n    \t\t\t}\n\n    \t\t\tvar tDir = t * dir;\n\n    \t\t\tx0 = x0 * s + x1 * tDir;\n    \t\t\ty0 = y0 * s + y1 * tDir;\n    \t\t\tz0 = z0 * s + z1 * tDir;\n    \t\t\tw0 = w0 * s + w1 * tDir;\n\n    \t\t\t// Normalize in case we just did a lerp:\n    \t\t\tif ( s === 1 - t ) {\n\n    \t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n    \t\t\t\tx0 *= f;\n    \t\t\t\ty0 *= f;\n    \t\t\t\tz0 *= f;\n    \t\t\t\tw0 *= f;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tdst[ dstOffset ] = x0;\n    \t\tdst[ dstOffset + 1 ] = y0;\n    \t\tdst[ dstOffset + 2 ] = z0;\n    \t\tdst[ dstOffset + 3 ] = w0;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author *kile / http://kile.stravaganza.org/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector3( x, y, z ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n\n    }\n\n    Vector3.prototype = {\n\n    \tconstructor: Vector3,\n\n    \tisVector3: true,\n\n    \tset: function ( x, y, z ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n    \t\t\treturn this.multiplyVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n    \t\tthis.z *= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x * b.x;\n    \t\tthis.y = a.y * b.y;\n    \t\tthis.z = a.z * b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyEuler: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyEuler( euler ) {\n\n    \t\t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n    \t\t\t}\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyAxisAngle: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyAxisAngle( axis, angle ) {\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix3: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyProjection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 projection matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n    \t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n    \t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n    \t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n    \t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyQuaternion: function ( q ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n    \t\t// calculate quat * vector\n\n    \t\tvar ix =  qw * x + qy * z - qz * y;\n    \t\tvar iy =  qw * y + qz * x - qx * z;\n    \t\tvar iz =  qw * z + qx * y - qy * x;\n    \t\tvar iw = - qx * x - qy * y - qz * z;\n\n    \t\t// calculate result * inverse quat\n\n    \t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n    \t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n    \t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function project( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tunproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function unproject( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \ttransformDirection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n    \t\t// vector interpreted as a direction\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n    \t\treturn this.normalize();\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n    \t\tthis.z /= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector3();\n    \t\t\t\tmax = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tcross: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n    \t\t\treturn this.crossVectors( v, w );\n\n    \t\t}\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n\n    \t\tthis.x = y * v.z - z * v.y;\n    \t\tthis.y = z * v.x - x * v.z;\n    \t\tthis.z = x * v.y - y * v.x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossVectors: function ( a, b ) {\n\n    \t\tvar ax = a.x, ay = a.y, az = a.z;\n    \t\tvar bx = b.x, by = b.y, bz = b.z;\n\n    \t\tthis.x = ay * bz - az * by;\n    \t\tthis.y = az * bx - ax * bz;\n    \t\tthis.z = ax * by - ay * bx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tprojectOnVector: function ( vector ) {\n\n    \t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n    \t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n    \t},\n\n    \tprojectOnPlane: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function projectOnPlane( planeNormal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n    \t\t\treturn this.sub( v1 );\n\n    \t\t};\n\n    \t}(),\n\n    \treflect: function () {\n\n    \t\t// reflect incident vector off plane orthogonal to normal\n    \t\t// normal is assumed to have unit length\n\n    \t\tvar v1;\n\n    \t\treturn function reflect( normal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tangleTo: function ( v ) {\n\n    \t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n    \t\t// clamp, to handle numerical problems\n\n    \t\treturn Math.acos( exports.Math.clamp( theta, - 1, 1 ) );\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n    \t\treturn dx * dx + dy * dy + dz * dz;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n    \t},\n\n    \tsetFromSpherical: function( s ) {\n\n    \t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n    \t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n    \t\tthis.y = Math.cos( s.phi ) * s.radius;\n    \t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixPosition: function ( m ) {\n\n    \t\treturn this.setFromMatrixColumn( m, 3 );\n\n    \t},\n\n    \tsetFromMatrixScale: function ( m ) {\n\n    \t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n    \t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n    \t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n    \t\tthis.x = sx;\n    \t\tthis.y = sy;\n    \t\tthis.z = sz;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixColumn: function ( m, index ) {\n\n    \t\tif ( typeof m === 'number' ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n    \t\t\tvar temp = m\n    \t\t\tm = index;\n    \t\t\tindex = temp;\n\n    \t\t}\n\n    \t\treturn this.fromArray( m.elements, index * 4 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author jordi_ros / http://plattsoft.com\n     * @author D1plo1d / http://github.com/D1plo1d\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author timknip / http://www.floorplanner.com/\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Matrix4() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0, 0,\n    \t\t0, 1, 0, 0,\n    \t\t0, 0, 1, 0,\n    \t\t0, 0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix4.prototype = {\n\n    \tconstructor: Matrix4,\n\n    \tisMatrix4: true,\n\n    \tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n    \t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n    \t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n    \t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, 0,\n    \t\t\t0, 1, 0, 0,\n    \t\t\t0, 0, 1, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new Matrix4().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tthis.elements.set( m.elements );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyPosition: function ( m ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = m.elements;\n\n    \t\tte[ 12 ] = me[ 12 ];\n    \t\tte[ 13 ] = me[ 13 ];\n    \t\tte[ 14 ] = me[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\txAxis.setFromMatrixColumn( this, 0 );\n    \t\tyAxis.setFromMatrixColumn( this, 1 );\n    \t\tzAxis.setFromMatrixColumn( this, 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\tthis.set(\n    \t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n    \t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n    \t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n    \t\t\t0,       0,       0,       1\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \textractRotation: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function extractRotation( m ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tvar te = this.elements;\n    \t\t\tvar me = m.elements;\n\n    \t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n    \t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n    \t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n    \t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n    \t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n    \t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n    \t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n    \t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n    \t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n    \t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n    \t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n    \t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeRotationFromEuler: function ( euler ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = euler.x, y = euler.y, z = euler.z;\n    \t\tvar a = Math.cos( x ), b = Math.sin( x );\n    \t\tvar c = Math.cos( y ), d = Math.sin( y );\n    \t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n    \t\tif ( euler.order === 'XYZ' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - c * f;\n    \t\t\tte[ 8 ] = d;\n\n    \t\t\tte[ 1 ] = af + be * d;\n    \t\t\tte[ 5 ] = ae - bf * d;\n    \t\t\tte[ 9 ] = - b * c;\n\n    \t\t\tte[ 2 ] = bf - ae * d;\n    \t\t\tte[ 6 ] = be + af * d;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YXZ' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce + df * b;\n    \t\t\tte[ 4 ] = de * b - cf;\n    \t\t\tte[ 8 ] = a * d;\n\n    \t\t\tte[ 1 ] = a * f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b;\n\n    \t\t\tte[ 2 ] = cf * b - de;\n    \t\t\tte[ 6 ] = df + ce * b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZXY' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce - df * b;\n    \t\t\tte[ 4 ] = - a * f;\n    \t\t\tte[ 8 ] = de + cf * b;\n\n    \t\t\tte[ 1 ] = cf + de * b;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = df - ce * b;\n\n    \t\t\tte[ 2 ] = - a * d;\n    \t\t\tte[ 6 ] = b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZYX' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = be * d - af;\n    \t\t\tte[ 8 ] = ae * d + bf;\n\n    \t\t\tte[ 1 ] = c * f;\n    \t\t\tte[ 5 ] = bf * d + ae;\n    \t\t\tte[ 9 ] = af * d - be;\n\n    \t\t\tte[ 2 ] = - d;\n    \t\t\tte[ 6 ] = b * c;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YZX' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = bd - ac * f;\n    \t\t\tte[ 8 ] = bc * f + ad;\n\n    \t\t\tte[ 1 ] = f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b * e;\n\n    \t\t\tte[ 2 ] = - d * e;\n    \t\t\tte[ 6 ] = ad * f + bc;\n    \t\t\tte[ 10 ] = ac - bd * f;\n\n    \t\t} else if ( euler.order === 'XZY' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - f;\n    \t\t\tte[ 8 ] = d * e;\n\n    \t\t\tte[ 1 ] = ac * f + bd;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = ad * f - bc;\n\n    \t\t\tte[ 2 ] = bc * f - ad;\n    \t\t\tte[ 6 ] = b * e;\n    \t\t\tte[ 10 ] = bd * f + ac;\n\n    \t\t}\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationFromQuaternion: function ( q ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n    \t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n    \t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n    \t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n    \t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n    \t\tte[ 0 ] = 1 - ( yy + zz );\n    \t\tte[ 4 ] = xy - wz;\n    \t\tte[ 8 ] = xz + wy;\n\n    \t\tte[ 1 ] = xy + wz;\n    \t\tte[ 5 ] = 1 - ( xx + zz );\n    \t\tte[ 9 ] = yz - wx;\n\n    \t\tte[ 2 ] = xz - wy;\n    \t\tte[ 6 ] = yz + wx;\n    \t\tte[ 10 ] = 1 - ( xx + yy );\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlookAt: function () {\n\n    \t\tvar x, y, z;\n\n    \t\treturn function lookAt( eye, target, up ) {\n\n    \t\t\tif ( x === undefined ) {\n\n    \t\t\t\tx = new Vector3();\n    \t\t\t\ty = new Vector3();\n    \t\t\t\tz = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tz.subVectors( eye, target ).normalize();\n\n    \t\t\tif ( z.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z = 1;\n\n    \t\t\t}\n\n    \t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\tif ( x.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z += 0.0001;\n    \t\t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\t}\n\n    \t\t\ty.crossVectors( z, x );\n\n\n    \t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n    \t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n    \t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiply: function ( m, n ) {\n\n    \t\tif ( n !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n    \t\t\treturn this.multiplyMatrices( m, n );\n\n    \t\t}\n\n    \t\treturn this.multiplyMatrices( this, m );\n\n    \t},\n\n    \tpremultiply: function ( m ) {\n\n    \t\treturn this.multiplyMatrices( m, this );\n\n    \t},\n\n    \tmultiplyMatrices: function ( a, b ) {\n\n    \t\tvar ae = a.elements;\n    \t\tvar be = b.elements;\n    \t\tvar te = this.elements;\n\n    \t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n    \t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n    \t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n    \t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n    \t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n    \t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n    \t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n    \t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n    \t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    \t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    \t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    \t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n    \t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    \t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    \t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    \t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n    \t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    \t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    \t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    \t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n    \t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    \t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    \t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    \t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyToArray: function ( a, b, r ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tthis.multiplyMatrices( a, b );\n\n    \t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n    \t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n    \t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n    \t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n    \t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix4( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix4( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n    \t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n    \t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n    \t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n    \t\t//TODO: make this more efficient\n    \t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n    \t\treturn (\n    \t\t\tn41 * (\n    \t\t\t\t+ n14 * n23 * n32\n    \t\t\t\t - n13 * n24 * n32\n    \t\t\t\t - n14 * n22 * n33\n    \t\t\t\t + n12 * n24 * n33\n    \t\t\t\t + n13 * n22 * n34\n    \t\t\t\t - n12 * n23 * n34\n    \t\t\t) +\n    \t\t\tn42 * (\n    \t\t\t\t+ n11 * n23 * n34\n    \t\t\t\t - n11 * n24 * n33\n    \t\t\t\t + n14 * n21 * n33\n    \t\t\t\t - n13 * n21 * n34\n    \t\t\t\t + n13 * n24 * n31\n    \t\t\t\t - n14 * n23 * n31\n    \t\t\t) +\n    \t\t\tn43 * (\n    \t\t\t\t+ n11 * n24 * n32\n    \t\t\t\t - n11 * n22 * n34\n    \t\t\t\t - n14 * n21 * n32\n    \t\t\t\t + n12 * n21 * n34\n    \t\t\t\t + n14 * n22 * n31\n    \t\t\t\t - n12 * n24 * n31\n    \t\t\t) +\n    \t\t\tn44 * (\n    \t\t\t\t- n13 * n22 * n31\n    \t\t\t\t - n11 * n23 * n32\n    \t\t\t\t + n11 * n22 * n33\n    \t\t\t\t + n13 * n21 * n32\n    \t\t\t\t - n12 * n21 * n33\n    \t\t\t\t + n12 * n23 * n31\n    \t\t\t)\n\n    \t\t);\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar te = this.elements;\n    \t\tvar tmp;\n\n    \t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n    \t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n    \t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n    \t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n    \t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n    \t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetPosition: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function getPosition() {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n    \t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetPosition: function ( v ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 12 ] = v.x;\n    \t\tte[ 13 ] = v.y;\n    \t\tte[ 14 ] = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetInverse: function ( m, throwOnDegenerate ) {\n\n    \t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    \t\tvar te = this.elements,\n    \t\t\tme = m.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n    \t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n    \t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n    \t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n    \t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n    \t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n    \t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n    \t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n    \t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n    \t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n    \t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n    \t\tte[ 4 ] = t12 * detInv;\n    \t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n    \t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n    \t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n    \t\tte[ 8 ] = t13 * detInv;\n    \t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n    \t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n    \t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n    \t\tte[ 12 ] = t14 * detInv;\n    \t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n    \t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n    \t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \tscale: function ( v ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = v.x, y = v.y, z = v.z;\n\n    \t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n    \t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n    \t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n    \t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetMaxScaleOnAxis: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n    \t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n    \t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n    \t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n    \t},\n\n    \tmakeTranslation: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, x,\n    \t\t\t0, 1, 0, y,\n    \t\t\t0, 0, 1, z,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationX: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t1, 0,  0, 0,\n    \t\t\t0, c, - s, 0,\n    \t\t\t0, s,  c, 0,\n    \t\t\t0, 0,  0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationY: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t c, 0, s, 0,\n    \t\t\t 0, 1, 0, 0,\n    \t\t\t- s, 0, c, 0,\n    \t\t\t 0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationZ: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\tc, - s, 0, 0,\n    \t\t\ts,  c, 0, 0,\n    \t\t\t0,  0, 1, 0,\n    \t\t\t0,  0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationAxis: function ( axis, angle ) {\n\n    \t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n    \t\tvar c = Math.cos( angle );\n    \t\tvar s = Math.sin( angle );\n    \t\tvar t = 1 - c;\n    \t\tvar x = axis.x, y = axis.y, z = axis.z;\n    \t\tvar tx = t * x, ty = t * y;\n\n    \t\tthis.set(\n\n    \t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n    \t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n    \t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\t return this;\n\n    \t},\n\n    \tmakeScale: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\tx, 0, 0, 0,\n    \t\t\t0, y, 0, 0,\n    \t\t\t0, 0, z, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tcompose: function ( position, quaternion, scale ) {\n\n    \t\tthis.makeRotationFromQuaternion( quaternion );\n    \t\tthis.scale( scale );\n    \t\tthis.setPosition( position );\n\n    \t\treturn this;\n\n    \t},\n\n    \tdecompose: function () {\n\n    \t\tvar vector, matrix;\n\n    \t\treturn function decompose( position, quaternion, scale ) {\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tvector = new Vector3();\n    \t\t\t\tmatrix = new Matrix4();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n    \t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n    \t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n    \t\t\t// if determine is negative, we need to invert one scale\n    \t\t\tvar det = this.determinant();\n    \t\t\tif ( det < 0 ) {\n\n    \t\t\t\tsx = - sx;\n\n    \t\t\t}\n\n    \t\t\tposition.x = te[ 12 ];\n    \t\t\tposition.y = te[ 13 ];\n    \t\t\tposition.z = te[ 14 ];\n\n    \t\t\t// scale the rotation part\n\n    \t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n    \t\t\tvar invSX = 1 / sx;\n    \t\t\tvar invSY = 1 / sy;\n    \t\t\tvar invSZ = 1 / sz;\n\n    \t\t\tmatrix.elements[ 0 ] *= invSX;\n    \t\t\tmatrix.elements[ 1 ] *= invSX;\n    \t\t\tmatrix.elements[ 2 ] *= invSX;\n\n    \t\t\tmatrix.elements[ 4 ] *= invSY;\n    \t\t\tmatrix.elements[ 5 ] *= invSY;\n    \t\t\tmatrix.elements[ 6 ] *= invSY;\n\n    \t\t\tmatrix.elements[ 8 ] *= invSZ;\n    \t\t\tmatrix.elements[ 9 ] *= invSZ;\n    \t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n    \t\t\tquaternion.setFromRotationMatrix( matrix );\n\n    \t\t\tscale.x = sx;\n    \t\t\tscale.y = sy;\n    \t\t\tscale.z = sz;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = 2 * near / ( right - left );\n    \t\tvar y = 2 * near / ( top - bottom );\n\n    \t\tvar a = ( right + left ) / ( right - left );\n    \t\tvar b = ( top + bottom ) / ( top - bottom );\n    \t\tvar c = - ( far + near ) / ( far - near );\n    \t\tvar d = - 2 * far * near / ( far - near );\n\n    \t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakePerspective: function ( fov, aspect, near, far ) {\n\n    \t\tvar ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );\n    \t\tvar ymin = - ymax;\n    \t\tvar xmin = ymin * aspect;\n    \t\tvar xmax = ymax * aspect;\n\n    \t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n    \t},\n\n    \tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar w = 1.0 / ( right - left );\n    \t\tvar h = 1.0 / ( top - bottom );\n    \t\tvar p = 1.0 / ( far - near );\n\n    \t\tvar x = ( right + left ) * w;\n    \t\tvar y = ( top + bottom ) * h;\n    \t\tvar z = ( far + near ) * p;\n\n    \t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( matrix ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = matrix.elements;\n\n    \t\tfor ( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n    \t\tarray[ offset + 9 ]  = te[ 9 ];\n    \t\tarray[ offset + 10 ] = te[ 10 ];\n    \t\tarray[ offset + 11 ] = te[ 11 ];\n\n    \t\tarray[ offset + 12 ] = te[ 12 ];\n    \t\tarray[ offset + 13 ] = te[ 13 ];\n    \t\tarray[ offset + 14 ] = te[ 14 ];\n    \t\tarray[ offset + 15 ] = te[ 15 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \timages = images !== undefined ? images : [];\n    \tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n    \tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.flipY = false;\n\n    }\n\n    CubeTexture.prototype = Object.create( Texture.prototype );\n    CubeTexture.prototype.constructor = CubeTexture;\n\n    CubeTexture.prototype.isCubeTexture = true;\n\n    Object.defineProperty( CubeTexture.prototype, 'images', {\n\n    \tget: function () {\n\n    \t\treturn this.image;\n\n    \t},\n\n    \tset: function ( value ) {\n\n    \t\tthis.image = value;\n\n    \t}\n\n    } );\n\n    var emptyTexture = new Texture();\n    var emptyCubeTexture = new CubeTexture();\n\n    // --- Base for inner nodes (including the root) ---\n\n    function UniformContainer() {\n\n    \tthis.seq = [];\n    \tthis.map = {};\n\n    }\n\n    // --- Utilities ---\n\n    // Array Caches (provide typed arrays for temporary by size)\n\n    var arrayCacheF32 = [];\n    var arrayCacheI32 = [];\n\n    // Flattening for arrays of vectors and matrices\n\n    function flatten( array, nBlocks, blockSize ) {\n\n    \tvar firstElem = array[ 0 ];\n\n    \tif ( firstElem <= 0 || firstElem > 0 ) return array;\n    \t// unoptimized: ! isNaN( firstElem )\n    \t// see http://jacksondunstan.com/articles/983\n\n    \tvar n = nBlocks * blockSize,\n    \t\tr = arrayCacheF32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Float32Array( n );\n    \t\tarrayCacheF32[ n ] = r;\n\n    \t}\n\n    \tif ( nBlocks !== 0 ) {\n\n    \t\tfirstElem.toArray( r, 0 );\n\n    \t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n    \t\t\toffset += blockSize;\n    \t\t\tarray[ i ].toArray( r, offset );\n\n    \t\t}\n\n    \t}\n\n    \treturn r;\n\n    }\n\n    // Texture unit allocation\n\n    function allocTexUnits( renderer, n ) {\n\n    \tvar r = arrayCacheI32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Int32Array( n );\n    \t\tarrayCacheI32[ n ] = r;\n\n    \t}\n\n    \tfor ( var i = 0; i !== n; ++ i )\n    \t\tr[ i ] = renderer.allocTextureUnit();\n\n    \treturn r;\n\n    }\n\n    // --- Setters ---\n\n    // Note: Defining these methods externally, because they come in a bunch\n    // and this way their names minify.\n\n    // Single scalar\n\n    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\n    // Single float vector (from flat array or THREE.VectorN)\n\n    function setValue2fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n    \telse gl.uniform2f( this.addr, v.x, v.y );\n\n    }\n\n    function setValue3fv( gl, v ) {\n\n    \tif ( v.x !== undefined )\n    \t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n    \telse if ( v.r !== undefined )\n    \t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n    \telse\n    \t\tgl.uniform3fv( this.addr, v );\n\n    }\n\n    function setValue4fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n    \telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n    }\n\n    // Single matrix (from flat array or MatrixN)\n\n    function setValue2fm( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue3fm( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue4fm( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n    }\n\n    // Single texture (2D / Cube)\n\n    function setValueT1( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTexture2D( v || emptyTexture, unit );\n\n    }\n\n    function setValueT6( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n    }\n\n    // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\n    // Helper to pick the right setter for the singular case\n\n    function getSingularSetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1f; // FLOAT\n    \t\tcase 0x8b50: return setValue2fv; // _VEC2\n    \t\tcase 0x8b51: return setValue3fv; // _VEC3\n    \t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n    \t\tcase 0x8b5a: return setValue2fm; // _MAT2\n    \t\tcase 0x8b5b: return setValue3fm; // _MAT3\n    \t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // Array of scalars\n\n    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\n    // Array of vectors (flat or from THREE classes)\n\n    function setValueV2a( gl, v ) {\n\n    \tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n    }\n\n    function setValueV3a( gl, v ) {\n\n    \tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n    }\n\n    function setValueV4a( gl, v ) {\n\n    \tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n    }\n\n    // Array of matrices (flat or from THREE clases)\n\n    function setValueM2a( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n    }\n\n    function setValueM3a( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n    }\n\n    function setValueM4a( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n    }\n\n    // Array of textures (2D / Cube)\n\n    function setValueT1a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    function setValueT6a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    // Helper to pick the right setter for a pure (bottom-level) array\n\n    function getPureArraySetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1fv; // FLOAT\n    \t\tcase 0x8b50: return setValueV2a; // _VEC2\n    \t\tcase 0x8b51: return setValueV3a; // _VEC3\n    \t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n    \t\tcase 0x8b5a: return setValueM2a; // _MAT2\n    \t\tcase 0x8b5b: return setValueM3a; // _MAT3\n    \t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // --- Uniform Classes ---\n\n    function SingleUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.setValue = getSingularSetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function PureArrayUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.size = activeInfo.size;\n    \tthis.setValue = getPureArraySetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function StructuredUniform( id ) {\n\n    \tthis.id = id;\n\n    \tUniformContainer.call( this ); // mix-in\n\n    }\n\n    StructuredUniform.prototype.setValue = function( gl, value ) {\n\n    \t// Note: Don't need an extra 'renderer' parameter, since samplers\n    \t// are not allowed in structured uniforms.\n\n    \tvar seq = this.seq;\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tu.setValue( gl, value[ u.id ] );\n\n    \t}\n\n    };\n\n    // --- Top-level ---\n\n    // Parser - builds up the property tree from the path strings\n\n    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n    // extracts\n    // \t- the identifier (member name or array index)\n    //  - followed by an optional right bracket (found when array index)\n    //  - followed by an optional left bracket or dot (type of subscript)\n    //\n    // Note: These portions can be read in a non-overlapping fashion and\n    // allow straightforward parsing of the hierarchy that WebGL encodes\n    // in the uniform names.\n\n    function addUniform( container, uniformObject ) {\n\n    \tcontainer.seq.push( uniformObject );\n    \tcontainer.map[ uniformObject.id ] = uniformObject;\n\n    }\n\n    function parseUniform( activeInfo, addr, container ) {\n\n    \tvar path = activeInfo.name,\n    \t\tpathLength = path.length;\n\n    \t// reset RegExp object, because of the early exit of a previous run\n    \tRePathPart.lastIndex = 0;\n\n    \tfor (; ;) {\n\n    \t\tvar match = RePathPart.exec( path ),\n    \t\t\tmatchEnd = RePathPart.lastIndex,\n\n    \t\t\tid = match[ 1 ],\n    \t\t\tidIsIndex = match[ 2 ] === ']',\n    \t\t\tsubscript = match[ 3 ];\n\n    \t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n    \t\tif ( subscript === undefined ||\n    \t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n    \t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n    \t\t\taddUniform( container, subscript === undefined ?\n    \t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n    \t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n    \t\t\tbreak;\n\n    \t\t} else {\n    \t\t\t// step into inner node / create it in case it doesn't exist\n\n    \t\t\tvar map = container.map,\n    \t\t\t\tnext = map[ id ];\n\n    \t\t\tif ( next === undefined ) {\n\n    \t\t\t\tnext = new StructuredUniform( id );\n    \t\t\t\taddUniform( container, next );\n\n    \t\t\t}\n\n    \t\t\tcontainer = next;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    // Root Container\n\n    function WebGLUniforms( gl, program, renderer ) {\n\n    \tUniformContainer.call( this );\n\n    \tthis.renderer = renderer;\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar info = gl.getActiveUniform( program, i ),\n    \t\t\tpath = info.name,\n    \t\t\taddr = gl.getUniformLocation( program, path );\n\n    \t\tparseUniform( info, addr, this );\n\n    \t}\n\n    }\n\n    WebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.set = function( gl, object, name ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n    \tvar v = object[ name ];\n\n    \tif ( v !== undefined ) this.setValue( gl, name, v );\n\n    };\n\n\n    // Static interface\n\n    WebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v.needsUpdate !== false ) {\n    \t\t\t// note: always updating when .needsUpdate is undefined\n\n    \t\t\tu.setValue( gl, v.value, renderer );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    WebGLUniforms.seqWithValue = function( seq, values ) {\n\n    \tvar r = [];\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tif ( u.id in values ) r.push( u );\n\n    \t}\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.splitDynamic = function( seq, values ) {\n\n    \tvar r = null,\n    \t\tn = seq.length,\n    \t\tw = 0;\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v && v.dynamic === true ) {\n\n    \t\t\tif ( r === null ) r = [];\n    \t\t\tr.push( u );\n\n    \t\t} else {\n\n    \t\t\t// in-place compact 'seq', removing the matches\n    \t\t\tif ( w < i ) seq[ w ] = u;\n    \t\t\t++ w;\n\n    \t\t}\n\n    \t}\n\n    \tif ( w < n ) seq.length = w;\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar v = values[ seq[ i ].id ],\n    \t\t\tf = v.onUpdateCallback;\n\n    \t\tif ( f !== undefined ) f.call( v, object, material, camera );\n\n    \t}\n\n    };\n\n    /**\n     * Uniform Utilities\n     */\n\n    exports.UniformsUtils = {\n\n    \tmerge: function ( uniforms ) {\n\n    \t\tvar merged = {};\n\n    \t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n    \t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n    \t\t\tfor ( var p in tmp ) {\n\n    \t\t\t\tmerged[ p ] = tmp[ p ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn merged;\n\n    \t},\n\n    \tclone: function ( uniforms_src ) {\n\n    \t\tvar uniforms_dst = {};\n\n    \t\tfor ( var u in uniforms_src ) {\n\n    \t\t\tuniforms_dst[ u ] = {};\n\n    \t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n    \t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n    \t\t\t\tif ( (parameter_src && parameter_src.isColor) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector2) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isTexture) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n    \t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn uniforms_dst;\n\n    \t}\n\n    };\n\n    var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n    var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n    var alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n    var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n    var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n    var begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n    var beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n    var bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n    var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n    var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n    var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n    var color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n    var color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n    var color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n    var color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n    var common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n    var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n    var defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n    var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n    var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n    var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n    var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n    var encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n    var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n    var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n    var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n    var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n    var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n    var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n    var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n    var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n    var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n    var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n    var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n    var lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n    var logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n    var logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\n    var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\n    var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n    var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n    var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n    var map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n    var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n    var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n    var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n    var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n    var normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n    var normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n    var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\n    var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n    var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n    var project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n    var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n    var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n    var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n    var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n    var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n    var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n    var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n    var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n    var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n    var tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n    var uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n    var uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n    var uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n    var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n    var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\n    var cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n    var cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n    var depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n    var distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\n    var equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n    var equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\n    var meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n    var normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n    var shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var ShaderChunk = {\n    \talphamap_fragment: alphamap_fragment,\n    \talphamap_pars_fragment: alphamap_pars_fragment,\n    \talphatest_fragment: alphatest_fragment,\n    \taomap_fragment: aomap_fragment,\n    \taomap_pars_fragment: aomap_pars_fragment,\n    \tbegin_vertex: begin_vertex,\n    \tbeginnormal_vertex: beginnormal_vertex,\n    \tbsdfs: bsdfs,\n    \tbumpmap_pars_fragment: bumpmap_pars_fragment,\n    \tclipping_planes_fragment: clipping_planes_fragment,\n    \tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    \tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    \tclipping_planes_vertex: clipping_planes_vertex,\n    \tcolor_fragment: color_fragment,\n    \tcolor_pars_fragment: color_pars_fragment,\n    \tcolor_pars_vertex: color_pars_vertex,\n    \tcolor_vertex: color_vertex,\n    \tcommon: common,\n    \tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    \tdefaultnormal_vertex: defaultnormal_vertex,\n    \tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n    \tdisplacementmap_vertex: displacementmap_vertex,\n    \temissivemap_fragment: emissivemap_fragment,\n    \temissivemap_pars_fragment: emissivemap_pars_fragment,\n    \tencodings_fragment: encodings_fragment,\n    \tencodings_pars_fragment: encodings_pars_fragment,\n    \tenvmap_fragment: envmap_fragment,\n    \tenvmap_pars_fragment: envmap_pars_fragment,\n    \tenvmap_pars_vertex: envmap_pars_vertex,\n    \tenvmap_vertex: envmap_vertex,\n    \tfog_fragment: fog_fragment,\n    \tfog_pars_fragment: fog_pars_fragment,\n    \tlightmap_fragment: lightmap_fragment,\n    \tlightmap_pars_fragment: lightmap_pars_fragment,\n    \tlights_lambert_vertex: lights_lambert_vertex,\n    \tlights_pars: lights_pars,\n    \tlights_phong_fragment: lights_phong_fragment,\n    \tlights_phong_pars_fragment: lights_phong_pars_fragment,\n    \tlights_physical_fragment: lights_physical_fragment,\n    \tlights_physical_pars_fragment: lights_physical_pars_fragment,\n    \tlights_template: lights_template,\n    \tlogdepthbuf_fragment: logdepthbuf_fragment,\n    \tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    \tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    \tlogdepthbuf_vertex: logdepthbuf_vertex,\n    \tmap_fragment: map_fragment,\n    \tmap_pars_fragment: map_pars_fragment,\n    \tmap_particle_fragment: map_particle_fragment,\n    \tmap_particle_pars_fragment: map_particle_pars_fragment,\n    \tmetalnessmap_fragment: metalnessmap_fragment,\n    \tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    \tmorphnormal_vertex: morphnormal_vertex,\n    \tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n    \tmorphtarget_vertex: morphtarget_vertex,\n    \tnormal_flip: normal_flip,\n    \tnormal_fragment: normal_fragment,\n    \tnormalmap_pars_fragment: normalmap_pars_fragment,\n    \tpacking: packing,\n    \tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    \tproject_vertex: project_vertex,\n    \troughnessmap_fragment: roughnessmap_fragment,\n    \troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    \tshadowmap_pars_fragment: shadowmap_pars_fragment,\n    \tshadowmap_pars_vertex: shadowmap_pars_vertex,\n    \tshadowmap_vertex: shadowmap_vertex,\n    \tshadowmask_pars_fragment: shadowmask_pars_fragment,\n    \tskinbase_vertex: skinbase_vertex,\n    \tskinning_pars_vertex: skinning_pars_vertex,\n    \tskinning_vertex: skinning_vertex,\n    \tskinnormal_vertex: skinnormal_vertex,\n    \tspecularmap_fragment: specularmap_fragment,\n    \tspecularmap_pars_fragment: specularmap_pars_fragment,\n    \ttonemapping_fragment: tonemapping_fragment,\n    \ttonemapping_pars_fragment: tonemapping_pars_fragment,\n    \tuv_pars_fragment: uv_pars_fragment,\n    \tuv_pars_vertex: uv_pars_vertex,\n    \tuv_vertex: uv_vertex,\n    \tuv2_pars_fragment: uv2_pars_fragment,\n    \tuv2_pars_vertex: uv2_pars_vertex,\n    \tuv2_vertex: uv2_vertex,\n    \tworldpos_vertex: worldpos_vertex,\n\n    \tcube_frag: cube_frag,\n    \tcube_vert: cube_vert,\n    \tdepth_frag: depth_frag,\n    \tdepth_vert: depth_vert,\n    \tdistanceRGBA_frag: distanceRGBA_frag,\n    \tdistanceRGBA_vert: distanceRGBA_vert,\n    \tequirect_frag: equirect_frag,\n    \tequirect_vert: equirect_vert,\n    \tlinedashed_frag: linedashed_frag,\n    \tlinedashed_vert: linedashed_vert,\n    \tmeshbasic_frag: meshbasic_frag,\n    \tmeshbasic_vert: meshbasic_vert,\n    \tmeshlambert_frag: meshlambert_frag,\n    \tmeshlambert_vert: meshlambert_vert,\n    \tmeshphong_frag: meshphong_frag,\n    \tmeshphong_vert: meshphong_vert,\n    \tmeshphysical_frag: meshphysical_frag,\n    \tmeshphysical_vert: meshphysical_vert,\n    \tnormal_frag: normal_frag,\n    \tnormal_vert: normal_vert,\n    \tpoints_frag: points_frag,\n    \tpoints_vert: points_vert,\n    \tshadow_frag: shadow_frag,\n    \tshadow_vert: shadow_vert\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Color( r, g, b ) {\n\n    \tif ( g === undefined && b === undefined ) {\n\n    \t\t// r is THREE.Color, hex or string\n    \t\treturn this.set( r );\n\n    \t}\n\n    \treturn this.setRGB( r, g, b );\n\n    }\n\n    Color.prototype = {\n\n    \tconstructor: Color,\n\n    \tisColor: true,\n\n    \tr: 1, g: 1, b: 1,\n\n    \tset: function ( value ) {\n\n    \t\tif ( (value && value.isColor) ) {\n\n    \t\t\tthis.copy( value );\n\n    \t\t} else if ( typeof value === 'number' ) {\n\n    \t\t\tthis.setHex( value );\n\n    \t\t} else if ( typeof value === 'string' ) {\n\n    \t\t\tthis.setStyle( value );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.r = scalar;\n    \t\tthis.g = scalar;\n    \t\tthis.b = scalar;\n\n    \t},\n\n    \tsetHex: function ( hex ) {\n\n    \t\thex = Math.floor( hex );\n\n    \t\tthis.r = ( hex >> 16 & 255 ) / 255;\n    \t\tthis.g = ( hex >> 8 & 255 ) / 255;\n    \t\tthis.b = ( hex & 255 ) / 255;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetRGB: function ( r, g, b ) {\n\n    \t\tthis.r = r;\n    \t\tthis.g = g;\n    \t\tthis.b = b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetHSL: function () {\n\n    \t\tfunction hue2rgb( p, q, t ) {\n\n    \t\t\tif ( t < 0 ) t += 1;\n    \t\t\tif ( t > 1 ) t -= 1;\n    \t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n    \t\t\tif ( t < 1 / 2 ) return q;\n    \t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n    \t\t\treturn p;\n\n    \t\t}\n\n    \t\treturn function setHSL( h, s, l ) {\n\n    \t\t\t// h,s,l ranges are in 0.0 - 1.0\n    \t\t\th = exports.Math.euclideanModulo( h, 1 );\n    \t\t\ts = exports.Math.clamp( s, 0, 1 );\n    \t\t\tl = exports.Math.clamp( l, 0, 1 );\n\n    \t\t\tif ( s === 0 ) {\n\n    \t\t\t\tthis.r = this.g = this.b = l;\n\n    \t\t\t} else {\n\n    \t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n    \t\t\t\tvar q = ( 2 * l ) - p;\n\n    \t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n    \t\t\t\tthis.g = hue2rgb( q, p, h );\n    \t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetStyle: function ( style ) {\n\n    \t\tfunction handleAlpha( string ) {\n\n    \t\t\tif ( string === undefined ) return;\n\n    \t\t\tif ( parseFloat( string ) < 1 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tvar m;\n\n    \t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n    \t\t\t// rgb / hsl\n\n    \t\t\tvar color;\n    \t\t\tvar name = m[ 1 ];\n    \t\t\tvar components = m[ 2 ];\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'rgb':\n    \t\t\t\tcase 'rgba':\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'hsl':\n    \t\t\t\tcase 'hsla':\n\n    \t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n    \t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n    \t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n    \t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n    \t\t\t// hex color\n\n    \t\t\tvar hex = m[ 1 ];\n    \t\t\tvar size = hex.length;\n\n    \t\t\tif ( size === 3 ) {\n\n    \t\t\t\t// #ff0\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t} else if ( size === 6 ) {\n\n    \t\t\t\t// #ff0000\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( style && style.length > 0 ) {\n\n    \t\t\t// color keywords\n    \t\t\tvar hex = exports.ColorKeywords[ style ];\n\n    \t\t\tif ( hex !== undefined ) {\n\n    \t\t\t\t// red\n    \t\t\t\tthis.setHex( hex );\n\n    \t\t\t} else {\n\n    \t\t\t\t// unknown color\n    \t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.r, this.g, this.b );\n\n    \t},\n\n    \tcopy: function ( color ) {\n\n    \t\tthis.r = color.r;\n    \t\tthis.g = color.g;\n    \t\tthis.b = color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tthis.r = Math.pow( color.r, gammaFactor );\n    \t\tthis.g = Math.pow( color.g, gammaFactor );\n    \t\tthis.b = Math.pow( color.b, gammaFactor );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n    \t\tthis.r = Math.pow( color.r, safeInverse );\n    \t\tthis.g = Math.pow( color.g, safeInverse );\n    \t\tthis.b = Math.pow( color.b, safeInverse );\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertGammaToLinear: function () {\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tthis.r = r * r;\n    \t\tthis.g = g * g;\n    \t\tthis.b = b * b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertLinearToGamma: function () {\n\n    \t\tthis.r = Math.sqrt( this.r );\n    \t\tthis.g = Math.sqrt( this.g );\n    \t\tthis.b = Math.sqrt( this.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetHex: function () {\n\n    \t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n    \t},\n\n    \tgetHexString: function () {\n\n    \t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n    \t},\n\n    \tgetHSL: function ( optionalTarget ) {\n\n    \t\t// h,s,l ranges are in 0.0 - 1.0\n\n    \t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tvar max = Math.max( r, g, b );\n    \t\tvar min = Math.min( r, g, b );\n\n    \t\tvar hue, saturation;\n    \t\tvar lightness = ( min + max ) / 2.0;\n\n    \t\tif ( min === max ) {\n\n    \t\t\thue = 0;\n    \t\t\tsaturation = 0;\n\n    \t\t} else {\n\n    \t\t\tvar delta = max - min;\n\n    \t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n    \t\t\tswitch ( max ) {\n\n    \t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n    \t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n    \t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n    \t\t\t}\n\n    \t\t\thue /= 6;\n\n    \t\t}\n\n    \t\thsl.h = hue;\n    \t\thsl.s = saturation;\n    \t\thsl.l = lightness;\n\n    \t\treturn hsl;\n\n    \t},\n\n    \tgetStyle: function () {\n\n    \t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n    \t},\n\n    \toffsetHSL: function ( h, s, l ) {\n\n    \t\tvar hsl = this.getHSL();\n\n    \t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n    \t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( color ) {\n\n    \t\tthis.r += color.r;\n    \t\tthis.g += color.g;\n    \t\tthis.b += color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddColors: function ( color1, color2 ) {\n\n    \t\tthis.r = color1.r + color2.r;\n    \t\tthis.g = color1.g + color2.g;\n    \t\tthis.b = color1.b + color2.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.r += s;\n    \t\tthis.g += s;\n    \t\tthis.b += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function( color ) {\n\n    \t\tthis.r = Math.max( 0, this.r - color.r );\n    \t\tthis.g = Math.max( 0, this.g - color.g );\n    \t\tthis.b = Math.max( 0, this.b - color.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( color ) {\n\n    \t\tthis.r *= color.r;\n    \t\tthis.g *= color.g;\n    \t\tthis.b *= color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tthis.r *= s;\n    \t\tthis.g *= s;\n    \t\tthis.b *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerp: function ( color, alpha ) {\n\n    \t\tthis.r += ( color.r - this.r ) * alpha;\n    \t\tthis.g += ( color.g - this.g ) * alpha;\n    \t\tthis.b += ( color.b - this.b ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( c ) {\n\n    \t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.r = array[ offset ];\n    \t\tthis.g = array[ offset + 1 ];\n    \t\tthis.b = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.r;\n    \t\tarray[ offset + 1 ] = this.g;\n    \t\tarray[ offset + 2 ] = this.b;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\treturn this.getHex();\n\n    \t}\n\n    };\n\n    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n    /**\n     * Uniforms library for shared webgl shaders\n     */\n\n    var UniformsLib = {\n\n    \tcommon: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\n    \t\tspecularMap: { value: null },\n    \t\talphaMap: { value: null },\n\n    \t\tenvMap: { value: null },\n    \t\tflipEnvMap: { value: - 1 },\n    \t\treflectivity: { value: 1.0 },\n    \t\trefractionRatio: { value: 0.98 }\n\n    \t},\n\n    \taomap: {\n\n    \t\taoMap: { value: null },\n    \t\taoMapIntensity: { value: 1 }\n\n    \t},\n\n    \tlightmap: {\n\n    \t\tlightMap: { value: null },\n    \t\tlightMapIntensity: { value: 1 }\n\n    \t},\n\n    \temissivemap: {\n\n    \t\temissiveMap: { value: null }\n\n    \t},\n\n    \tbumpmap: {\n\n    \t\tbumpMap: { value: null },\n    \t\tbumpScale: { value: 1 }\n\n    \t},\n\n    \tnormalmap: {\n\n    \t\tnormalMap: { value: null },\n    \t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n    \t},\n\n    \tdisplacementmap: {\n\n    \t\tdisplacementMap: { value: null },\n    \t\tdisplacementScale: { value: 1 },\n    \t\tdisplacementBias: { value: 0 }\n\n    \t},\n\n    \troughnessmap: {\n\n    \t\troughnessMap: { value: null }\n\n    \t},\n\n    \tmetalnessmap: {\n\n    \t\tmetalnessMap: { value: null }\n\n    \t},\n\n    \tfog: {\n\n    \t\tfogDensity: { value: 0.00025 },\n    \t\tfogNear: { value: 1 },\n    \t\tfogFar: { value: 2000 },\n    \t\tfogColor: { value: new Color( 0xffffff ) }\n\n    \t},\n\n    \tlights: {\n\n    \t\tambientLightColor: { value: [] },\n\n    \t\tdirectionalLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tcolor: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tdirectionalShadowMap: { value: [] },\n    \t\tdirectionalShadowMatrix: { value: [] },\n\n    \t\tspotLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdirection: {},\n    \t\t\tdistance: {},\n    \t\t\tconeCos: {},\n    \t\t\tpenumbraCos: {},\n    \t\t\tdecay: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tspotShadowMap: { value: [] },\n    \t\tspotShadowMatrix: { value: [] },\n\n    \t\tpointLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdecay: {},\n    \t\t\tdistance: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tpointShadowMap: { value: [] },\n    \t\tpointShadowMatrix: { value: [] },\n\n    \t\themisphereLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tskyColor: {},\n    \t\t\tgroundColor: {}\n    \t\t} }\n\n    \t},\n\n    \tpoints: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n    \t\tsize: { value: 1.0 },\n    \t\tscale: { value: 1.0 },\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     */\n\n    var ShaderLib = {\n\n    \tbasic: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshbasic_vert,\n    \t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n    \t},\n\n    \tlambert: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshlambert_vert,\n    \t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n    \t},\n\n    \tphong: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\tspecular : { value: new Color( 0x111111 ) },\n    \t\t\t\tshininess: { value: 30 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphong_vert,\n    \t\tfragmentShader: ShaderChunk.meshphong_frag\n\n    \t},\n\n    \tstandard: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.roughnessmap,\n    \t\t\tUniformsLib.metalnessmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\troughness: { value: 0.5 },\n    \t\t\t\tmetalness: { value: 0 },\n    \t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphysical_vert,\n    \t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n    \t},\n\n    \tpoints: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.points,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.points_vert,\n    \t\tfragmentShader: ShaderChunk.points_frag\n\n    \t},\n\n    \tdashed: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.fog,\n\n    \t\t\t{\n    \t\t\t\tscale    : { value: 1 },\n    \t\t\t\tdashSize : { value: 1 },\n    \t\t\t\ttotalSize: { value: 2 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.linedashed_vert,\n    \t\tfragmentShader: ShaderChunk.linedashed_frag\n\n    \t},\n\n    \tdepth: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.displacementmap\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.depth_vert,\n    \t\tfragmentShader: ShaderChunk.depth_frag\n\n    \t},\n\n    \tnormal: {\n\n    \t\tuniforms: {\n\n    \t\t\topacity : { value: 1.0 }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.normal_vert,\n    \t\tfragmentShader: ShaderChunk.normal_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tcube: {\n\n    \t\tuniforms: {\n    \t\t\ttCube: { value: null },\n    \t\t\ttFlip: { value: - 1 },\n    \t\t\topacity: { value: 1.0 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.cube_vert,\n    \t\tfragmentShader: ShaderChunk.cube_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tequirect: {\n\n    \t\tuniforms: {\n    \t\t\ttEquirect: { value: null },\n    \t\t\ttFlip: { value: - 1 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.equirect_vert,\n    \t\tfragmentShader: ShaderChunk.equirect_frag\n\n    \t},\n\n    \tdistanceRGBA: {\n\n    \t\tuniforms: {\n\n    \t\t\tlightPos: { value: new Vector3() }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n    \t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n    \t}\n\n    };\n\n    ShaderLib.physical = {\n\n    \tuniforms: exports.UniformsUtils.merge( [\n\n    \t\tShaderLib.standard.uniforms,\n\n    \t\t{\n    \t\t\tclearCoat: { value: 0 },\n    \t\t\tclearCoatRoughness: { value: 0 }\n    \t\t}\n\n    \t] ),\n\n    \tvertexShader: ShaderChunk.meshphysical_vert,\n    \tfragmentShader: ShaderChunk.meshphysical_frag\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Box2( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n    }\n\n    Box2.prototype = {\n\n    \tconstructor: Box2,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = + Infinity;\n    \t\tthis.max.x = this.max.y = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector2();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlarePlugin( renderer, flares ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar shader, program, attributes, uniforms;\n\n    \tvar tempTexture, occlusionTexture;\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 1, - 1,  0, 0,\n    \t\t\t 1, - 1,  1, 0,\n    \t\t\t 1,  1,  1, 1,\n    \t\t\t- 1,  1,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\t// buffers\n\n    \t\tvertexBuffer     = gl.createBuffer();\n    \t\telementBuffer    = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\t// textures\n\n    \t\ttempTexture      = gl.createTexture();\n    \t\tocclusionTexture = gl.createTexture();\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tshader = {\n\n    \t\t\tvertexShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform vec3 screenPosition;\",\n    \t\t\t\t\"uniform vec2 scale;\",\n    \t\t\t\t\"uniform float rotation;\",\n\n    \t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n    \t\t\t\t\"attribute vec2 position;\",\n    \t\t\t\t\"attribute vec2 uv;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t\"vUV = uv;\",\n\n    \t\t\t\t\t\"vec2 pos = position;\",\n\n    \t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n    \t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n    \t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n    \t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n    \t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" ),\n\n    \t\t\tfragmentShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform sampler2D map;\",\n    \t\t\t\t\"uniform float opacity;\",\n    \t\t\t\t\"uniform vec3 color;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t// pink square\n\n    \t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n    \t\t\t\t\t// restore\n\n    \t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n    \t\t\t\t\t// flare\n\n    \t\t\t\t\t\"} else {\",\n\n    \t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n    \t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n    \t\t\t\t\t\t\"gl_FragColor = texture;\",\n    \t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" )\n\n    \t\t};\n\n    \t\tprogram = createProgram( shader );\n\n    \t\tattributes = {\n    \t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n    \t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n    \t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n    \t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n    \t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n    \t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n    \t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n    \t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n    \t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n    \t\t};\n\n    \t}\n\n    \t/*\n    \t * Render lens flares\n    \t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n    \t *         reads these back and calculates occlusion.\n    \t */\n\n    \tthis.render = function ( scene, camera, viewport ) {\n\n    \t\tif ( flares.length === 0 ) return;\n\n    \t\tvar tempPosition = new Vector3();\n\n    \t\tvar invAspect = viewport.w / viewport.z,\n    \t\t\thalfViewportWidth = viewport.z * 0.5,\n    \t\t\thalfViewportHeight = viewport.w * 0.5;\n\n    \t\tvar size = 16 / viewport.w,\n    \t\t\tscale = new Vector2( size * invAspect, size );\n\n    \t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n    \t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n    \t\tvar validArea = new Box2();\n\n    \t\tvalidArea.min.set( 0, 0 );\n    \t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.vertex );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t// loop through all lens flares to update their occlusion and positions\n    \t\t// setup gl and common used attribs/uniforms\n\n    \t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n    \t\tgl.uniform1i( uniforms.map, 1 );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.setDepthWrite( false );\n\n    \t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n    \t\t\tsize = 16 / viewport.w;\n    \t\t\tscale.set( size * invAspect, size );\n\n    \t\t\t// calc object screen position\n\n    \t\t\tvar flare = flares[ i ];\n\n    \t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n    \t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n    \t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n    \t\t\t// setup arrays for gl programs\n\n    \t\t\tscreenPosition.copy( tempPosition );\n\n    \t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    \t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n    \t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n    \t\t\t// screen cull\n\n    \t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n    \t\t\t\t// save current RGB to temp texture\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// render pink quad\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n    \t\t\t\tstate.disable( gl.BLEND );\n    \t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// copy result to occlusionMap\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// restore graphics\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n    \t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// update object positions\n\n    \t\t\t\tflare.positionScreen.copy( screenPosition );\n\n    \t\t\t\tif ( flare.customUpdateCallback ) {\n\n    \t\t\t\t\tflare.customUpdateCallback( flare );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tflare.updateLensFlares();\n\n    \t\t\t\t}\n\n    \t\t\t\t// render flares\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n    \t\t\t\tstate.enable( gl.BLEND );\n\n    \t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n    \t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n    \t\t\t\t\t\tscreenPosition.x = sprite.x;\n    \t\t\t\t\t\tscreenPosition.y = sprite.y;\n    \t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n    \t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n    \t\t\t\t\t\tscale.x = size * invAspect;\n    \t\t\t\t\t\tscale.y = size;\n\n    \t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n    \t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n    \t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n    \t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n    \t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n    \t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n    \t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n    \t\tstate.enable( gl.DEPTH_TEST );\n    \t\tstate.setDepthWrite( true );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram( shader ) {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n    \t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n    \t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n    \t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n    \t\tgl.compileShader( fragmentShader );\n    \t\tgl.compileShader( vertexShader );\n\n    \t\tgl.attachShader( program, fragmentShader );\n    \t\tgl.attachShader( program, vertexShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    }\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpritePlugin( renderer, sprites ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar program, attributes, uniforms;\n\n    \tvar texture;\n\n    \t// decompose matrixWorld\n\n    \tvar spritePosition = new Vector3();\n    \tvar spriteRotation = new Quaternion();\n    \tvar spriteScale = new Vector3();\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 0.5, - 0.5,  0, 0,\n    \t\t\t  0.5, - 0.5,  1, 0,\n    \t\t\t  0.5,   0.5,  1, 1,\n    \t\t\t- 0.5,   0.5,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\tvertexBuffer  = gl.createBuffer();\n    \t\telementBuffer = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\tprogram = createProgram();\n\n    \t\tattributes = {\n    \t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n    \t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n    \t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n    \t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n    \t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n    \t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n    \t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n    \t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n    \t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n    \t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n    \t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n    \t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n    \t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n    \t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n    \t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n    \t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n    \t\t};\n\n    \t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\tcanvas.width = 8;\n    \t\tcanvas.height = 8;\n\n    \t\tvar context = canvas.getContext( '2d' );\n    \t\tcontext.fillStyle = 'white';\n    \t\tcontext.fillRect( 0, 0, 8, 8 );\n\n    \t\ttexture = new Texture( canvas );\n    \t\ttexture.needsUpdate = true;\n\n    \t}\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( sprites.length === 0 ) return;\n\n    \t\t// setup gl\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.position );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.enable( gl.BLEND );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n    \t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\tgl.uniform1i( uniforms.map, 0 );\n\n    \t\tvar oldFogType = 0;\n    \t\tvar sceneFogType = 0;\n    \t\tvar fog = scene.fog;\n\n    \t\tif ( fog ) {\n\n    \t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n    \t\t\tif ( (fog && fog.isFog) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n    \t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n    \t\t\t\toldFogType = 1;\n    \t\t\t\tsceneFogType = 1;\n\n    \t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n    \t\t\t\toldFogType = 2;\n    \t\t\t\tsceneFogType = 2;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tgl.uniform1i( uniforms.fogType, 0 );\n    \t\t\toldFogType = 0;\n    \t\t\tsceneFogType = 0;\n\n    \t\t}\n\n\n    \t\t// update positions and sort\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n\n    \t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n    \t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n    \t\t}\n\n    \t\tsprites.sort( painterSortStable );\n\n    \t\t// render all sprites\n\n    \t\tvar scale = [];\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n    \t\t\tvar material = sprite.material;\n\n    \t\t\tif ( material.visible === false ) continue;\n\n    \t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n    \t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n    \t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n    \t\t\tscale[ 0 ] = spriteScale.x;\n    \t\t\tscale[ 1 ] = spriteScale.y;\n\n    \t\t\tvar fogType = 0;\n\n    \t\t\tif ( scene.fog && material.fog ) {\n\n    \t\t\t\tfogType = sceneFogType;\n\n    \t\t\t}\n\n    \t\t\tif ( oldFogType !== fogType ) {\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n    \t\t\t\toldFogType = fogType;\n\n    \t\t\t}\n\n    \t\t\tif ( material.map !== null ) {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n    \t\t\t}\n\n    \t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n    \t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n    \t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n    \t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n    \t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n    \t\t\tstate.setDepthTest( material.depthTest );\n    \t\t\tstate.setDepthWrite( material.depthWrite );\n\n    \t\t\tif ( material.map ) {\n\n    \t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setTexture2D( texture, 0 );\n\n    \t\t\t}\n\n    \t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram() {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n    \t\tgl.shaderSource( vertexShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform float rotation;',\n    \t\t\t'uniform vec2 scale;',\n    \t\t\t'uniform vec2 uvOffset;',\n    \t\t\t'uniform vec2 uvScale;',\n\n    \t\t\t'attribute vec2 position;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n    \t\t\t\t'vec2 alignedPosition = position * scale;',\n\n    \t\t\t\t'vec2 rotatedPosition;',\n    \t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n    \t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n    \t\t\t\t'vec4 finalPosition;',\n\n    \t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n    \t\t\t\t'finalPosition.xy += rotatedPosition;',\n    \t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n    \t\t\t\t'gl_Position = finalPosition;',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.shaderSource( fragmentShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform vec3 color;',\n    \t\t\t'uniform sampler2D map;',\n    \t\t\t'uniform float opacity;',\n\n    \t\t\t'uniform int fogType;',\n    \t\t\t'uniform vec3 fogColor;',\n    \t\t\t'uniform float fogDensity;',\n    \t\t\t'uniform float fogNear;',\n    \t\t\t'uniform float fogFar;',\n    \t\t\t'uniform float alphaTest;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n    \t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n    \t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n    \t\t\t\t'if ( fogType > 0 ) {',\n\n    \t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n    \t\t\t\t\t'float fogFactor = 0.0;',\n\n    \t\t\t\t\t'if ( fogType == 1 ) {',\n\n    \t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n    \t\t\t\t\t'} else {',\n\n    \t\t\t\t\t\t'const float LOG2 = 1.442695;',\n    \t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n    \t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n    \t\t\t\t\t'}',\n\n    \t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n    \t\t\t\t'}',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.compileShader( vertexShader );\n    \t\tgl.compileShader( fragmentShader );\n\n    \t\tgl.attachShader( program, vertexShader );\n    \t\tgl.attachShader( program, fragmentShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.renderOrder !== b.renderOrder ) {\n\n    \t\t\treturn a.renderOrder - b.renderOrder;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn b.id - a.id;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Material() {\n\n    \tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Material';\n\n    \tthis.fog = true;\n    \tthis.lights = true;\n\n    \tthis.blending = NormalBlending;\n    \tthis.side = FrontSide;\n    \tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n    \tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n    \tthis.opacity = 1;\n    \tthis.transparent = false;\n\n    \tthis.blendSrc = SrcAlphaFactor;\n    \tthis.blendDst = OneMinusSrcAlphaFactor;\n    \tthis.blendEquation = AddEquation;\n    \tthis.blendSrcAlpha = null;\n    \tthis.blendDstAlpha = null;\n    \tthis.blendEquationAlpha = null;\n\n    \tthis.depthFunc = LessEqualDepth;\n    \tthis.depthTest = true;\n    \tthis.depthWrite = true;\n\n    \tthis.clippingPlanes = null;\n    \tthis.clipShadows = false;\n\n    \tthis.colorWrite = true;\n\n    \tthis.precision = null; // override the renderer's default precision for this material\n\n    \tthis.polygonOffset = false;\n    \tthis.polygonOffsetFactor = 0;\n    \tthis.polygonOffsetUnits = 0;\n\n    \tthis.alphaTest = 0;\n    \tthis.premultipliedAlpha = false;\n\n    \tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n    \tthis.visible = true;\n\n    \tthis._needsUpdate = true;\n\n    }\n\n    Material.prototype = {\n\n    \tconstructor: Material,\n\n    \tisMaterial: true,\n\n    \tget needsUpdate() {\n\n    \t\treturn this._needsUpdate;\n\n    \t},\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.update();\n    \t\tthis._needsUpdate = value;\n\n    \t},\n\n    \tsetValues: function ( values ) {\n\n    \t\tif ( values === undefined ) return;\n\n    \t\tfor ( var key in values ) {\n\n    \t\t\tvar newValue = values[ key ];\n\n    \t\t\tif ( newValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar currentValue = this[ key ];\n\n    \t\t\tif ( currentValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tif ( (currentValue && currentValue.isColor) ) {\n\n    \t\t\t\tcurrentValue.set( newValue );\n\n    \t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\n    \t\t\t\tcurrentValue.copy( newValue );\n\n    \t\t\t} else if ( key === 'overdraw' ) {\n\n    \t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n    \t\t\t\tthis[ key ] = Number( newValue );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis[ key ] = newValue;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar isRoot = meta === undefined;\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tmeta = {\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Material',\n    \t\t\t\tgenerator: 'Material.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Material serialization\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\n    \t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n    \t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n    \t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n    \t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n    \t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n    \t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n    \t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n    \t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n    \t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\n    \t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n    \t\t\tdata.bumpScale = this.bumpScale;\n\n    \t\t}\n    \t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\n    \t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n    \t\t\tdata.normalScale = this.normalScale.toArray();\n\n    \t\t}\n    \t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\n    \t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n    \t\t\tdata.displacementScale = this.displacementScale;\n    \t\t\tdata.displacementBias = this.displacementBias;\n\n    \t\t}\n    \t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n    \t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n    \t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\n    \t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n    \t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n    \t\t}\n\n    \t\tif ( this.size !== undefined ) data.size = this.size;\n    \t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n    \t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n    \t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n    \t\tif ( this.side !== FrontSide ) data.side = this.side;\n    \t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n    \t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n    \t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n    \t\tdata.depthFunc = this.depthFunc;\n    \t\tdata.depthTest = this.depthTest;\n    \t\tdata.depthWrite = this.depthWrite;\n\n    \t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n    \t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n    \t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n    \t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n    \t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n    \t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n    \t\tdata.skinning = this.skinning;\n    \t\tdata.morphTargets = this.morphTargets;\n\n    \t\t// TODO: Copied from Object3D.toJSON\n\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( textures.length > 0 ) data.textures = textures;\n    \t\t\tif ( images.length > 0 ) data.images = images;\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.fog = source.fog;\n    \t\tthis.lights = source.lights;\n\n    \t\tthis.blending = source.blending;\n    \t\tthis.side = source.side;\n    \t\tthis.shading = source.shading;\n    \t\tthis.vertexColors = source.vertexColors;\n\n    \t\tthis.opacity = source.opacity;\n    \t\tthis.transparent = source.transparent;\n\n    \t\tthis.blendSrc = source.blendSrc;\n    \t\tthis.blendDst = source.blendDst;\n    \t\tthis.blendEquation = source.blendEquation;\n    \t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n    \t\tthis.blendDstAlpha = source.blendDstAlpha;\n    \t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n    \t\tthis.depthFunc = source.depthFunc;\n    \t\tthis.depthTest = source.depthTest;\n    \t\tthis.depthWrite = source.depthWrite;\n\n    \t\tthis.colorWrite = source.colorWrite;\n\n    \t\tthis.precision = source.precision;\n\n    \t\tthis.polygonOffset = source.polygonOffset;\n    \t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n    \t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n    \t\tthis.alphaTest = source.alphaTest;\n\n    \t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n    \t\tthis.overdraw = source.overdraw;\n\n    \t\tthis.visible = source.visible;\n    \t\tthis.clipShadows = source.clipShadows;\n\n    \t\tvar srcPlanes = source.clippingPlanes,\n    \t\t\tdstPlanes = null;\n\n    \t\tif ( srcPlanes !== null ) {\n\n    \t\t\tvar n = srcPlanes.length;\n    \t\t\tdstPlanes = new Array( n );\n\n    \t\t\tfor ( var i = 0; i !== n; ++ i )\n    \t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n    \t\t}\n\n    \t\tthis.clippingPlanes = dstPlanes;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdate: function () {\n\n    \t\tthis.dispatchEvent( { type: 'update' } );\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    };\n\n    Object.assign( Material.prototype, EventDispatcher.prototype );\n\n    var count$1 = 0;\n    function MaterialIdCount() { return count$1++; };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  defines: { \"label\" : \"value\" },\n     *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n     *\n     *  fragmentShader: <string>,\n     *  vertexShader: <string>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  lights: <bool>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function ShaderMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'ShaderMaterial';\n\n    \tthis.defines = {};\n    \tthis.uniforms = {};\n\n    \tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n    \tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n    \tthis.linewidth = 1;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false; // set to use scene fog\n    \tthis.lights = false; // set to use scene lights\n    \tthis.clipping = false; // set to use user-defined clipping planes\n\n    \tthis.skinning = false; // set to use skinning attribute streams\n    \tthis.morphTargets = false; // set to use morph targets\n    \tthis.morphNormals = false; // set to use morph normals\n\n    \tthis.extensions = {\n    \t\tderivatives: false, // set to use derivatives\n    \t\tfragDepth: false, // set to use fragment depth values\n    \t\tdrawBuffers: false, // set to use draw buffers\n    \t\tshaderTextureLOD: false // set to use shader texture LOD\n    \t};\n\n    \t// When rendered geometry doesn't include these attributes but the material does,\n    \t// use these default values in WebGL. This avoids errors when buffer data is missing.\n    \tthis.defaultAttributeValues = {\n    \t\t'color': [ 1, 1, 1 ],\n    \t\t'uv': [ 0, 0 ],\n    \t\t'uv2': [ 0, 0 ]\n    \t};\n\n    \tthis.index0AttributeName = undefined;\n\n    \tif ( parameters !== undefined ) {\n\n    \t\tif ( parameters.attributes !== undefined ) {\n\n    \t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n    \t\t}\n\n    \t\tthis.setValues( parameters );\n\n    \t}\n\n    }\n\n    ShaderMaterial.prototype = Object.create( Material.prototype );\n    ShaderMaterial.prototype.constructor = ShaderMaterial;\n\n    ShaderMaterial.prototype.isShaderMaterial = true;\n\n    ShaderMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.fragmentShader = source.fragmentShader;\n    \tthis.vertexShader = source.vertexShader;\n\n    \tthis.uniforms = exports.UniformsUtils.clone( source.uniforms );\n\n    \tthis.defines = source.defines;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \tthis.lights = source.lights;\n    \tthis.clipping = source.clipping;\n\n    \tthis.skinning = source.skinning;\n\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \tthis.extensions = source.extensions;\n\n    \treturn this;\n\n    };\n\n    ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Material.prototype.toJSON.call( this, meta );\n\n    \tdata.uniforms = this.uniforms;\n    \tdata.vertexShader = this.vertexShader;\n    \tdata.fragmentShader = this.fragmentShader;\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / https://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshDepthMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshDepthMaterial';\n\n    \tthis.depthPacking = BasicDepthPacking;\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.map = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshDepthMaterial.prototype = Object.create( Material.prototype );\n    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n    MeshDepthMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.depthPacking = source.depthPacking;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \tthis.map = source.map;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Box3( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n    }\n\n    Box3.prototype = {\n\n    \tconstructor: Box3,\n\n    \tisBox3: true,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromArray: function ( array ) {\n\n    \t\tvar minX = + Infinity;\n    \t\tvar minY = + Infinity;\n    \t\tvar minZ = + Infinity;\n\n    \t\tvar maxX = - Infinity;\n    \t\tvar maxY = - Infinity;\n    \t\tvar maxZ = - Infinity;\n\n    \t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\tvar x = array[ i ];\n    \t\t\tvar y = array[ i + 1 ];\n    \t\t\tvar z = array[ i + 2 ];\n\n    \t\t\tif ( x < minX ) minX = x;\n    \t\t\tif ( y < minY ) minY = y;\n    \t\t\tif ( z < minZ ) minZ = z;\n\n    \t\t\tif ( x > maxX ) maxX = x;\n    \t\t\tif ( y > maxY ) maxY = y;\n    \t\t\tif ( z > maxZ ) maxZ = z;\n\n    \t\t}\n\n    \t\tthis.min.set( minX, minY, minZ );\n    \t\tthis.max.set( maxX, maxY, maxZ );\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromObject: function () {\n\n    \t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n    \t\t// accounting for both the object's, and children's, world transforms\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromObject( object ) {\n\n    \t\t\tvar scope = this;\n\n    \t\t\tobject.updateMatrixWorld( true );\n\n    \t\t\tthis.makeEmpty();\n\n    \t\t\tobject.traverse( function ( node ) {\n\n    \t\t\t\tvar geometry = node.geometry;\n\n    \t\t\t\tif ( geometry !== undefined ) {\n\n    \t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n    \t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n    \t\t\t\t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\t\t\t\tvar array, offset, stride;\n\n    \t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\n    \t\t\t\t\t\t\t\tarray = attribute.data.array;\n    \t\t\t\t\t\t\t\toffset = attribute.offset;\n    \t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tarray = attribute.array;\n    \t\t\t\t\t\t\t\toffset = 0;\n    \t\t\t\t\t\t\t\tstride = 3;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\n    \t\t\t\t\t\t\t\tv1.fromArray( array, i );\n    \t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n    \t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n    \t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n    \t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n    \t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n    \t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsSphere: ( function () {\n\n    \t\tvar closestPoint;\n\n    \t\treturn function intersectsSphere( sphere ) {\n\n    \t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\n    \t\t\t// Find the point on the AABB closest to the sphere center.\n    \t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n    \t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n    \t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We compute the minimum and maximum dot product values. If those values\n    \t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n    \t\tvar min, max;\n\n    \t\tif ( plane.normal.x > 0 ) {\n\n    \t\t\tmin = plane.normal.x * this.min.x;\n    \t\t\tmax = plane.normal.x * this.max.x;\n\n    \t\t} else {\n\n    \t\t\tmin = plane.normal.x * this.max.x;\n    \t\t\tmax = plane.normal.x * this.min.x;\n\n    \t\t}\n\n    \t\tif ( plane.normal.y > 0 ) {\n\n    \t\t\tmin += plane.normal.y * this.min.y;\n    \t\t\tmax += plane.normal.y * this.max.y;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.y * this.max.y;\n    \t\t\tmax += plane.normal.y * this.min.y;\n\n    \t\t}\n\n    \t\tif ( plane.normal.z > 0 ) {\n\n    \t\t\tmin += plane.normal.z * this.min.z;\n    \t\t\tmax += plane.normal.z * this.max.z;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.z * this.max.z;\n    \t\t\tmax += plane.normal.z * this.min.z;\n\n    \t\t}\n\n    \t\treturn ( min <= plane.constant && max >= plane.constant );\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tgetBoundingSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function getBoundingSphere( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Sphere();\n\n    \t\t\tthis.getCenter( result.center );\n\n    \t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n    \t\tif( this.isEmpty() ) this.makeEmpty();\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar points = [\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3()\n    \t\t];\n\n    \t\treturn function applyMatrix4( matrix ) {\n\n    \t\t\t// transform of empty box is an empty box.\n    \t\t\tif( this.isEmpty() ) return this;\n\n    \t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n    \t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n    \t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n    \t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n    \t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n    \t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n    \t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n    \t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n    \t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n    \t\t\tthis.setFromPoints( points );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Sphere( center, radius ) {\n\n    \tthis.center = ( center !== undefined ) ? center : new Vector3();\n    \tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n    }\n\n    Sphere.prototype = {\n\n    \tconstructor: Sphere,\n\n    \tset: function ( center, radius ) {\n\n    \t\tthis.center.copy( center );\n    \t\tthis.radius = radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function () {\n\n    \t\tvar box = new Box3();\n\n    \t\treturn function setFromPoints( points, optionalCenter ) {\n\n    \t\t\tvar center = this.center;\n\n    \t\t\tif ( optionalCenter !== undefined ) {\n\n    \t\t\t\tcenter.copy( optionalCenter );\n\n    \t\t\t} else {\n\n    \t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n    \t\t\t}\n\n    \t\t\tvar maxRadiusSq = 0;\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n    \t\t\t}\n\n    \t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( sphere ) {\n\n    \t\tthis.center.copy( sphere.center );\n    \t\tthis.radius = sphere.radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tempty: function () {\n\n    \t\treturn ( this.radius <= 0 );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar radiusSum = this.radius + sphere.radius;\n\n    \t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsSphere( this );\n\n    \t},\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We use the following equation to compute the signed distance from\n    \t\t// the center of the sphere to the plane.\n    \t\t//\n    \t\t// distance = q * n - d\n    \t\t//\n    \t\t// If this distance is greater than the radius of the sphere,\n    \t\t// then there is no intersection.\n\n    \t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.copy( point );\n\n    \t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n    \t\t\tresult.sub( this.center ).normalize();\n    \t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \tgetBoundingBox: function ( optionalTarget ) {\n\n    \t\tvar box = optionalTarget || new Box3();\n\n    \t\tbox.set( this.center, this.center );\n    \t\tbox.expandByScalar( this.radius );\n\n    \t\treturn box;\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.center.applyMatrix4( matrix );\n    \t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.center.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( sphere ) {\n\n    \t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     * @author tschw\n     */\n\n    function Matrix3() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0,\n    \t\t0, 1, 0,\n    \t\t0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix3.prototype = {\n\n    \tconstructor: Matrix3,\n\n    \tisMatrix3: true,\n\n    \tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n    \t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n    \t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0,\n    \t\t\t0, 1, 0,\n    \t\t\t0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n    \t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n    \t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix4: function( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n    \t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n    \t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix3( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix3( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n    \t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n    \t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n    \t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n    \t},\n\n    \tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n    \t\tif ( (matrix && matrix.isMatrix4) ) {\n\n    \t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n    \t\t}\n\n    \t\tvar me = matrix.elements,\n    \t\t\tte = this.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n    \t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n    \t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n    \t\t\tt11 = n33 * n22 - n32 * n23,\n    \t\t\tt12 = n32 * n13 - n33 * n12,\n    \t\t\tt13 = n23 * n12 - n22 * n13,\n\n    \t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n    \t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n    \t\tte[ 3 ] = t12 * detInv;\n    \t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n    \t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n    \t\tte[ 6 ] = t13 * detInv;\n    \t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n    \t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar tmp, m = this.elements;\n\n    \t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n    \t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n    \t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetNormalMatrix: function ( matrix4 ) {\n\n    \t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n    \t},\n\n    \ttransposeIntoArray: function ( r ) {\n\n    \t\tvar m = this.elements;\n\n    \t\tr[ 0 ] = m[ 0 ];\n    \t\tr[ 1 ] = m[ 3 ];\n    \t\tr[ 2 ] = m[ 6 ];\n    \t\tr[ 3 ] = m[ 1 ];\n    \t\tr[ 4 ] = m[ 4 ];\n    \t\tr[ 5 ] = m[ 7 ];\n    \t\tr[ 6 ] = m[ 2 ];\n    \t\tr[ 7 ] = m[ 5 ];\n    \t\tr[ 8 ] = m[ 8 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 9; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Plane( normal, constant ) {\n\n    \tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n    \tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n    }\n\n    Plane.prototype = {\n\n    \tconstructor: Plane,\n\n    \tset: function ( normal, constant ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponents: function ( x, y, z, w ) {\n\n    \t\tthis.normal.set( x, y, z );\n    \t\tthis.constant = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCoplanarPoints: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n    \t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n    \t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n    \t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( plane ) {\n\n    \t\tthis.normal.copy( plane.normal );\n    \t\tthis.constant = plane.constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n    \t\tvar inverseNormalLength = 1.0 / this.normal.length();\n    \t\tthis.normal.multiplyScalar( inverseNormalLength );\n    \t\tthis.constant *= inverseNormalLength;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.constant *= - 1;\n    \t\tthis.normal.negate();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn this.normal.dot( point ) + this.constant;\n\n    \t},\n\n    \tdistanceToSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n    \t},\n\n    \tprojectPoint: function ( point, optionalTarget ) {\n\n    \t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n    \t},\n\n    \torthoPoint: function ( point, optionalTarget ) {\n\n    \t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n    \t},\n\n    \tintersectLine: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectLine( line, optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tvar direction = line.delta( v1 );\n\n    \t\t\tvar denominator = this.normal.dot( direction );\n\n    \t\t\tif ( denominator === 0 ) {\n\n    \t\t\t\t// line is coplanar, return origin\n    \t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n    \t\t\t\t\treturn result.copy( line.start );\n\n    \t\t\t\t}\n\n    \t\t\t\t// Unsure if this is the correct method to handle this case.\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n    \t\t\tif ( t < 0 || t > 1 ) {\n\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsLine: function ( line ) {\n\n    \t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n    \t\tvar startSign = this.distanceToPoint( line.start );\n    \t\tvar endSign = this.distanceToPoint( line.end );\n\n    \t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsPlane( this );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn sphere.intersectsPlane( this );\n\n    \t},\n\n    \tcoplanarPoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar m1 = new Matrix3();\n\n    \t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n    \t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n    \t\t\t// transform normal based on theory here:\n    \t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n    \t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n    \t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n    \t\t\tthis.constant = - referencePoint.dot( normal );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.constant = this.constant - offset.dot( this.normal );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( plane ) {\n\n    \t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / http://clara.io\n     */\n\n    function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n    \tthis.planes = [\n\n    \t\t( p0 !== undefined ) ? p0 : new Plane(),\n    \t\t( p1 !== undefined ) ? p1 : new Plane(),\n    \t\t( p2 !== undefined ) ? p2 : new Plane(),\n    \t\t( p3 !== undefined ) ? p3 : new Plane(),\n    \t\t( p4 !== undefined ) ? p4 : new Plane(),\n    \t\t( p5 !== undefined ) ? p5 : new Plane()\n\n    \t];\n\n    }\n\n    Frustum.prototype = {\n\n    \tconstructor: Frustum,\n\n    \tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tplanes[ 0 ].copy( p0 );\n    \t\tplanes[ 1 ].copy( p1 );\n    \t\tplanes[ 2 ].copy( p2 );\n    \t\tplanes[ 3 ].copy( p3 );\n    \t\tplanes[ 4 ].copy( p4 );\n    \t\tplanes[ 5 ].copy( p5 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( frustum ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix: function ( m ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar me = m.elements;\n    \t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n    \t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n    \t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n    \t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n    \t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n    \t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n    \t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n    \t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n    \t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n    \t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tintersectsObject: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsObject( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometry.boundingSphere === null )\n    \t\t\t\tgeometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere )\n    \t\t\t\t.applyMatrix4( object.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSprite: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsSprite( sprite ) {\n\n    \t\t\tsphere.center.set( 0, 0, 0 );\n    \t\t\tsphere.radius = 0.7071067811865476;\n    \t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar center = sphere.center;\n    \t\tvar negRadius = - sphere.radius;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n    \t\t\tif ( distance < negRadius ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsBox: function () {\n\n    \t\tvar p1 = new Vector3(),\n    \t\t\tp2 = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\tvar planes = this.planes;\n\n    \t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n    \t\t\t\tvar plane = planes[ i ];\n\n    \t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n    \t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n    \t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n    \t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n    \t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n    \t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n    \t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n    \t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n    \t\t\t\t// if both outside plane, no intersection\n\n    \t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n    \t\t\t\t\treturn false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t};\n\n    \t}(),\n\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t}\n\n    };\n\n    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\n    \tvar _gl = _renderer.context,\n    \t_state = _renderer.state,\n    \t_frustum = new Frustum(),\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_lightShadows = _lights.shadows,\n\n    \t_shadowMapSize = new Vector2(),\n    \t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n    \t_lookTarget = new Vector3(),\n    \t_lightPositionWorld = new Vector3(),\n\n    \t_renderList = [],\n\n    \t_MorphingFlag = 1,\n    \t_SkinningFlag = 2,\n\n    \t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n    \t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n    \t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n    \t_materialCache = {};\n\n    \tvar cubeDirections = [\n    \t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n    \t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n    \t];\n\n    \tvar cubeUps = [\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n    \t];\n\n    \tvar cube2DViewPorts = [\n    \t\tnew Vector4(), new Vector4(), new Vector4(),\n    \t\tnew Vector4(), new Vector4(), new Vector4()\n    \t];\n\n    \t// init\n\n    \tvar depthMaterialTemplate = new MeshDepthMaterial();\n    \tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n    \tdepthMaterialTemplate.clipping = true;\n\n    \tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n    \tvar distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );\n\n    \tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n    \t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n    \t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n    \t\tvar depthMaterial = depthMaterialTemplate.clone();\n    \t\tdepthMaterial.morphTargets = useMorphing;\n    \t\tdepthMaterial.skinning = useSkinning;\n\n    \t\t_depthMaterials[ i ] = depthMaterial;\n\n    \t\tvar distanceMaterial = new ShaderMaterial( {\n    \t\t\tdefines: {\n    \t\t\t\t'USE_SHADOWMAP': ''\n    \t\t\t},\n    \t\t\tuniforms: distanceUniforms,\n    \t\t\tvertexShader: distanceShader.vertexShader,\n    \t\t\tfragmentShader: distanceShader.fragmentShader,\n    \t\t\tmorphTargets: useMorphing,\n    \t\t\tskinning: useSkinning,\n    \t\t\tclipping: true\n    \t\t} );\n\n    \t\t_distanceMaterials[ i ] = distanceMaterial;\n\n    \t}\n\n    \t//\n\n    \tvar scope = this;\n\n    \tthis.enabled = false;\n\n    \tthis.autoUpdate = true;\n    \tthis.needsUpdate = false;\n\n    \tthis.type = PCFShadowMap;\n\n    \tthis.renderReverseSided = true;\n    \tthis.renderSingleSided = true;\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( scope.enabled === false ) return;\n    \t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n    \t\tif ( _lightShadows.length === 0 ) return;\n\n    \t\t// Set GL state for depth map.\n    \t\t_state.clearColor( 1, 1, 1, 1 );\n    \t\t_state.disable( _gl.BLEND );\n    \t\t_state.setDepthTest( true );\n    \t\t_state.setScissorTest( false );\n\n    \t\t// render depth map\n\n    \t\tvar faceCount, isPointLight;\n\n    \t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n    \t\t\tvar light = _lightShadows[ i ];\n    \t\t\tvar shadow = light.shadow;\n\n    \t\t\tif ( shadow === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar shadowCamera = shadow.camera;\n\n    \t\t\t_shadowMapSize.copy( shadow.mapSize );\n    \t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n    \t\t\tif ( (light && light.isPointLight) ) {\n\n    \t\t\t\tfaceCount = 6;\n    \t\t\t\tisPointLight = true;\n\n    \t\t\t\tvar vpWidth = _shadowMapSize.x;\n    \t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n    \t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n    \t\t\t\t// following orientation:\n    \t\t\t\t//\n    \t\t\t\t//  xzXZ\n    \t\t\t\t//   y Y\n    \t\t\t\t//\n    \t\t\t\t// X - Positive x direction\n    \t\t\t\t// x - Negative x direction\n    \t\t\t\t// Y - Positive y direction\n    \t\t\t\t// y - Negative y direction\n    \t\t\t\t// Z - Positive z direction\n    \t\t\t\t// z - Negative z direction\n\n    \t\t\t\t// positive X\n    \t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative X\n    \t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Z\n    \t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative Z\n    \t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Y\n    \t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n    \t\t\t\t// negative Y\n    \t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n    \t\t\t\t_shadowMapSize.x *= 4.0;\n    \t\t\t\t_shadowMapSize.y *= 2.0;\n\n    \t\t\t} else {\n\n    \t\t\t\tfaceCount = 1;\n    \t\t\t\tisPointLight = false;\n\n    \t\t\t}\n\n    \t\t\tif ( shadow.map === null ) {\n\n    \t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n    \t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n    \t\t\t\tshadowCamera.updateProjectionMatrix();\n\n    \t\t\t}\n\n    \t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\n    \t\t\t\tshadow.update( light );\n\n    \t\t\t}\n\n    \t\t\tvar shadowMap = shadow.map;\n    \t\t\tvar shadowMatrix = shadow.matrix;\n\n    \t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n    \t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n    \t\t\t_renderer.setRenderTarget( shadowMap );\n    \t\t\t_renderer.clear();\n\n    \t\t\t// render shadow map for each cube face (if omni-directional) or\n    \t\t\t// run a single pass if not\n\n    \t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n    \t\t\t\tif ( isPointLight ) {\n\n    \t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n    \t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n    \t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n    \t\t\t\t\t_state.viewport( vpDimensions );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t}\n\n    \t\t\t\tshadowCamera.updateMatrixWorld();\n    \t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n    \t\t\t\t// compute shadow matrix\n\n    \t\t\t\tshadowMatrix.set(\n    \t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.0, 1.0\n    \t\t\t\t);\n\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n    \t\t\t\t// update camera matrices and frustum\n\n    \t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n    \t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\t\t\t// set object matrices & frustum culling\n\n    \t\t\t\t_renderList.length = 0;\n\n    \t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n    \t\t\t\t// render shadow map\n    \t\t\t\t// render regular objects\n\n    \t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar object = _renderList[ j ];\n    \t\t\t\t\tvar geometry = _objects.update( object );\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\n    \t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n    \t\t\t\t\t\t\tvar group = groups[ k ];\n    \t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Restore GL state.\n    \t\tvar clearColor = _renderer.getClearColor(),\n    \t\tclearAlpha = _renderer.getClearAlpha();\n    \t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n    \t\tscope.needsUpdate = false;\n\n    \t};\n\n    \tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tvar result = null;\n\n    \t\tvar materialVariants = _depthMaterials;\n    \t\tvar customMaterial = object.customDepthMaterial;\n\n    \t\tif ( isPointLight ) {\n\n    \t\t\tmaterialVariants = _distanceMaterials;\n    \t\t\tcustomMaterial = object.customDistanceMaterial;\n\n    \t\t}\n\n    \t\tif ( ! customMaterial ) {\n\n    \t\t\tvar useMorphing = false;\n\n    \t\t\tif ( material.morphTargets ) {\n\n    \t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n    \t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n    \t\t\tvar variantIndex = 0;\n\n    \t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n    \t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n    \t\t\tresult = materialVariants[ variantIndex ];\n\n    \t\t} else {\n\n    \t\t\tresult = customMaterial;\n\n    \t\t}\n\n    \t\tif ( _renderer.localClippingEnabled &&\n    \t\t\t material.clipShadows === true &&\n    \t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n    \t\t\t// in this case we need a unique material instance reflecting the\n    \t\t\t// appropriate state\n\n    \t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n    \t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n    \t\t\tif ( materialsForVariant === undefined ) {\n\n    \t\t\t\tmaterialsForVariant = {};\n    \t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n    \t\t\t}\n\n    \t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n    \t\t\tif ( cachedMaterial === undefined ) {\n\n    \t\t\t\tcachedMaterial = result.clone();\n    \t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n    \t\t\t}\n\n    \t\t\tresult = cachedMaterial;\n\n    \t\t}\n\n    \t\tresult.visible = material.visible;\n    \t\tresult.wireframe = material.wireframe;\n\n    \t\tvar side = material.side;\n\n    \t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n    \t\t\tside = FrontSide;\n\n    \t\t}\n\n    \t\tif ( scope.renderReverseSided ) {\n\n    \t\t\tif ( side === FrontSide ) side = BackSide;\n    \t\t\telse if ( side === BackSide ) side = FrontSide;\n\n    \t\t}\n\n    \t\tresult.side = side;\n\n    \t\tresult.clipShadows = material.clipShadows;\n    \t\tresult.clippingPlanes = material.clippingPlanes;\n\n    \t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n    \t\tresult.linewidth = material.linewidth;\n\n    \t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n    \t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    \tfunction projectObject( object, camera, shadowCamera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n    \t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n    \t\t\t\tvar material = object.material;\n\n    \t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n    \t\t\t\t\t_renderList.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Ray( origin, direction ) {\n\n    \tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n    \tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n    }\n\n    Ray.prototype = {\n\n    \tconstructor: Ray,\n\n    \tset: function ( origin, direction ) {\n\n    \t\tthis.origin.copy( origin );\n    \t\tthis.direction.copy( direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( ray ) {\n\n    \t\tthis.origin.copy( ray.origin );\n    \t\tthis.direction.copy( ray.direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n    \t},\n\n    \tlookAt: function ( v ) {\n\n    \t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \trecast: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function recast( t ) {\n\n    \t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\tresult.subVectors( point, this.origin );\n    \t\tvar directionDistance = result.dot( this.direction );\n\n    \t\tif ( directionDistance < 0 ) {\n\n    \t\t\treturn result.copy( this.origin );\n\n    \t\t}\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n    \t},\n\n    \tdistanceSqToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceSqToPoint( point ) {\n\n    \t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n    \t\t\t// point behind the ray\n\n    \t\t\tif ( directionDistance < 0 ) {\n\n    \t\t\t\treturn this.origin.distanceToSquared( point );\n\n    \t\t\t}\n\n    \t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t\t\treturn v1.distanceToSquared( point );\n\n    \t\t};\n\n    \t}(),\n\n    \tdistanceSqToSegment: function () {\n\n    \t\tvar segCenter = new Vector3();\n    \t\tvar segDir = new Vector3();\n    \t\tvar diff = new Vector3();\n\n    \t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n    \t\t\t// It returns the min distance between the ray and the segment\n    \t\t\t// defined by v0 and v1\n    \t\t\t// It can also set two optional targets :\n    \t\t\t// - The closest point on the ray\n    \t\t\t// - The closest point on the segment\n\n    \t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n    \t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n    \t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n    \t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n    \t\t\tvar a01 = - this.direction.dot( segDir );\n    \t\t\tvar b0 = diff.dot( this.direction );\n    \t\t\tvar b1 = - diff.dot( segDir );\n    \t\t\tvar c = diff.lengthSq();\n    \t\t\tvar det = Math.abs( 1 - a01 * a01 );\n    \t\t\tvar s0, s1, sqrDist, extDet;\n\n    \t\t\tif ( det > 0 ) {\n\n    \t\t\t\t// The ray and segment are not parallel.\n\n    \t\t\t\ts0 = a01 * b1 - b0;\n    \t\t\t\ts1 = a01 * b0 - b1;\n    \t\t\t\textDet = segExtent * det;\n\n    \t\t\t\tif ( s0 >= 0 ) {\n\n    \t\t\t\t\tif ( s1 >= - extDet ) {\n\n    \t\t\t\t\t\tif ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t\t// region 0\n    \t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n    \t\t\t\t\t\t\tvar invDet = 1 / det;\n    \t\t\t\t\t\t\ts0 *= invDet;\n    \t\t\t\t\t\t\ts1 *= invDet;\n    \t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t// region 1\n\n    \t\t\t\t\t\t\ts1 = segExtent;\n    \t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 5\n\n    \t\t\t\t\t\ts1 = - segExtent;\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( s1 <= - extDet ) {\n\n    \t\t\t\t\t\t// region 4\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else if ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t// region 3\n\n    \t\t\t\t\t\ts0 = 0;\n    \t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 2\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// Ray and segment are parallel.\n\n    \t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n    \t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnRay ) {\n\n    \t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnSegment ) {\n\n    \t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n    \t\t\t}\n\n    \t\t\treturn sqrDist;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n    \t\t\tv1.subVectors( sphere.center, this.origin );\n    \t\t\tvar tca = v1.dot( this.direction );\n    \t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n    \t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n    \t\t\tif ( d2 > radius2 ) return null;\n\n    \t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n    \t\t\t// t0 = first intersect point - entrance on front of sphere\n    \t\t\tvar t0 = tca - thc;\n\n    \t\t\t// t1 = second intersect point - exit point on back of sphere\n    \t\t\tvar t1 = tca + thc;\n\n    \t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n    \t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n    \t\t\t// test to see if t0 is behind the ray:\n    \t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n    \t\t\t// in order to always return an intersect point that is in front of the ray.\n    \t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n    \t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n    \t\t\treturn this.at( t0, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n    \t},\n\n    \tdistanceToPlane: function ( plane ) {\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator === 0 ) {\n\n    \t\t\t// line is coplanar, return origin\n    \t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n    \t\t\t\treturn 0;\n\n    \t\t\t}\n\n    \t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n    \t\t// Return if the ray never intersects the plane\n\n    \t\treturn t >= 0 ? t :  null;\n\n    \t},\n\n    \tintersectPlane: function ( plane, optionalTarget ) {\n\n    \t\tvar t = this.distanceToPlane( plane );\n\n    \t\tif ( t === null ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\treturn this.at( t, optionalTarget );\n\n    \t},\n\n\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// check if the ray lies on the plane first\n\n    \t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n    \t\tif ( distToPoint === 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator * distToPoint < 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// ray origin is behind the plane (and is pointing behind it)\n\n    \t\treturn false;\n\n    \t},\n\n    \tintersectBox: function ( box, optionalTarget ) {\n\n    \t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n    \t\tvar invdirx = 1 / this.direction.x,\n    \t\t\tinvdiry = 1 / this.direction.y,\n    \t\t\tinvdirz = 1 / this.direction.z;\n\n    \t\tvar origin = this.origin;\n\n    \t\tif ( invdirx >= 0 ) {\n\n    \t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n    \t\t} else {\n\n    \t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n    \t\t}\n\n    \t\tif ( invdiry >= 0 ) {\n\n    \t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n    \t\t} else {\n\n    \t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n    \t\t// These lines also handle the case where tmin or tmax is NaN\n    \t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n    \t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n    \t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n    \t\tif ( invdirz >= 0 ) {\n\n    \t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n    \t\t} else {\n\n    \t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n    \t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n    \t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n    \t\t//return point closest to the ray (positive side)\n\n    \t\tif ( tmax < 0 ) return null;\n\n    \t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n    \t},\n\n    \tintersectsBox: ( function () {\n\n    \t\tvar v = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\treturn this.intersectBox( box, v ) !== null;\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectTriangle: function () {\n\n    \t\t// Compute the offset origin, edges, and normal.\n    \t\tvar diff = new Vector3();\n    \t\tvar edge1 = new Vector3();\n    \t\tvar edge2 = new Vector3();\n    \t\tvar normal = new Vector3();\n\n    \t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n    \t\t\tedge1.subVectors( b, a );\n    \t\t\tedge2.subVectors( c, a );\n    \t\t\tnormal.crossVectors( edge1, edge2 );\n\n    \t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    \t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    \t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    \t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    \t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n    \t\t\tvar DdN = this.direction.dot( normal );\n    \t\t\tvar sign;\n\n    \t\t\tif ( DdN > 0 ) {\n\n    \t\t\t\tif ( backfaceCulling ) return null;\n    \t\t\t\tsign = 1;\n\n    \t\t\t} else if ( DdN < 0 ) {\n\n    \t\t\t\tsign = - 1;\n    \t\t\t\tDdN = - DdN;\n\n    \t\t\t} else {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tdiff.subVectors( this.origin, a );\n    \t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n    \t\t\t// b1 < 0, no intersection\n    \t\t\tif ( DdQxE2 < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n    \t\t\t// b2 < 0, no intersection\n    \t\t\tif ( DdE1xQ < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// b1+b2 > 1, no intersection\n    \t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Line intersects triangle, check if ray does.\n    \t\t\tvar QdN = - sign * diff.dot( normal );\n\n    \t\t\t// t < 0, no intersection\n    \t\t\tif ( QdN < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Ray intersects triangle.\n    \t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix4: function ( matrix4 ) {\n\n    \t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n    \t\tthis.origin.applyMatrix4( matrix4 );\n    \t\tthis.direction.sub( this.origin );\n    \t\tthis.direction.normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( ray ) {\n\n    \t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Euler( x, y, z, order ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._order = order || Euler.DefaultOrder;\n\n    }\n\n    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n    Euler.DefaultOrder = 'XYZ';\n\n    Euler.prototype = {\n\n    \tconstructor: Euler,\n\n    \tisEuler: true,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget order () {\n\n    \t\treturn this._order;\n\n    \t},\n\n    \tset order ( value ) {\n\n    \t\tthis._order = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, order ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._order = order || this._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n    \t},\n\n    \tcopy: function ( euler ) {\n\n    \t\tthis._x = euler._x;\n    \t\tthis._y = euler._y;\n    \t\tthis._z = euler._z;\n    \t\tthis._order = euler._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m, order, update ) {\n\n    \t\tvar clamp = exports.Math.clamp;\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements;\n    \t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n    \t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n    \t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\torder = order || this._order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = 0;\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m22 );\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._y = 0;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n    \t\t}\n\n    \t\tthis._order = order;\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromQuaternion: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function setFromQuaternion( q, order, update ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.makeRotationFromQuaternion( q );\n\n    \t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromVector3: function ( v, order ) {\n\n    \t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n    \t},\n\n    \treorder: function () {\n\n    \t\t// WARNING: this discards revolution information -bhouston\n\n    \t\tvar q = new Quaternion();\n\n    \t\treturn function reorder( newOrder ) {\n\n    \t\t\tq.setFromEuler( this );\n\n    \t\t\treturn this.setFromQuaternion( q, newOrder );\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( euler ) {\n\n    \t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n    \t},\n\n    \tfromArray: function ( array ) {\n\n    \t\tthis._x = array[ 0 ];\n    \t\tthis._y = array[ 1 ];\n    \t\tthis._z = array[ 2 ];\n    \t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._order;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoVector3: function ( optionalResult ) {\n\n    \t\tif ( optionalResult ) {\n\n    \t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n    \t\t} else {\n\n    \t\t\treturn new Vector3( this._x, this._y, this._z );\n\n    \t\t}\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Layers() {\n\n    \tthis.mask = 1;\n\n    }\n\n    Layers.prototype = {\n\n    \tconstructor: Layers,\n\n    \tset: function ( channel ) {\n\n    \t\tthis.mask = 1 << channel;\n\n    \t},\n\n    \tenable: function ( channel ) {\n\n    \t\tthis.mask |= 1 << channel;\n\n    \t},\n\n    \ttoggle: function ( channel ) {\n\n    \t\tthis.mask ^= 1 << channel;\n\n    \t},\n\n    \tdisable: function ( channel ) {\n\n    \t\tthis.mask &= ~ ( 1 << channel );\n\n    \t},\n\n    \ttest: function ( layers ) {\n\n    \t\treturn ( this.mask & layers.mask ) !== 0;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author elephantatwork / www.elephantatwork.ch\n     */\n\n    function Object3D() {\n\n    \tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Object3D';\n\n    \tthis.parent = null;\n    \tthis.children = [];\n\n    \tthis.up = Object3D.DefaultUp.clone();\n\n    \tvar position = new Vector3();\n    \tvar rotation = new Euler();\n    \tvar quaternion = new Quaternion();\n    \tvar scale = new Vector3( 1, 1, 1 );\n\n    \tfunction onRotationChange() {\n\n    \t\tquaternion.setFromEuler( rotation, false );\n\n    \t}\n\n    \tfunction onQuaternionChange() {\n\n    \t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n    \t}\n\n    \trotation.onChange( onRotationChange );\n    \tquaternion.onChange( onQuaternionChange );\n\n    \tObject.defineProperties( this, {\n    \t\tposition: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: position\n    \t\t},\n    \t\trotation: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: rotation\n    \t\t},\n    \t\tquaternion: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: quaternion\n    \t\t},\n    \t\tscale: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: scale\n    \t\t},\n    \t\tmodelViewMatrix: {\n    \t\t\tvalue: new Matrix4()\n    \t\t},\n    \t\tnormalMatrix: {\n    \t\t\tvalue: new Matrix3()\n    \t\t}\n    \t} );\n\n    \tthis.matrix = new Matrix4();\n    \tthis.matrixWorld = new Matrix4();\n\n    \tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    \tthis.matrixWorldNeedsUpdate = false;\n\n    \tthis.layers = new Layers();\n    \tthis.visible = true;\n\n    \tthis.castShadow = false;\n    \tthis.receiveShadow = false;\n\n    \tthis.frustumCulled = true;\n    \tthis.renderOrder = 0;\n\n    \tthis.userData = {};\n\n    \tthis.onBeforeRender = null;\n\n    }\n\n    Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n    Object3D.DefaultMatrixAutoUpdate = true;\n\n    Object.assign( Object3D.prototype, EventDispatcher.prototype, {\n\n    \tisObject3D: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n    \t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n    \t},\n\n    \tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// assumes axis is normalized\n\n    \t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n    \t},\n\n    \tsetRotationFromEuler: function ( euler ) {\n\n    \t\tthis.quaternion.setFromEuler( euler, true );\n\n    \t},\n\n    \tsetRotationFromMatrix: function ( m ) {\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tthis.quaternion.setFromRotationMatrix( m );\n\n    \t},\n\n    \tsetRotationFromQuaternion: function ( q ) {\n\n    \t\t// assumes q is normalized\n\n    \t\tthis.quaternion.copy( q );\n\n    \t},\n\n    \trotateOnAxis: function () {\n\n    \t\t// rotate object on axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar q1 = new Quaternion();\n\n    \t\treturn function rotateOnAxis( axis, angle ) {\n\n    \t\t\tq1.setFromAxisAngle( axis, angle );\n\n    \t\t\tthis.quaternion.multiply( q1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateOnAxis: function () {\n\n    \t\t// translate object by distance along axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function translateOnAxis( axis, distance ) {\n\n    \t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n    \t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function translateX( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function translateY( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function translateZ( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \tlocalToWorld: function ( vector ) {\n\n    \t\treturn vector.applyMatrix4( this.matrixWorld );\n\n    \t},\n\n    \tworldToLocal: function () {\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function worldToLocal( vector ) {\n\n    \t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tm1.lookAt( vector, this.position, this.up );\n\n    \t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t\t};\n\n    \t}(),\n\n    \tadd: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.add( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( object === this ) {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( (object && object.isObject3D) ) {\n\n    \t\t\tif ( object.parent !== null ) {\n\n    \t\t\t\tobject.parent.remove( object );\n\n    \t\t\t}\n\n    \t\t\tobject.parent = this;\n    \t\t\tobject.dispatchEvent( { type: 'added' } );\n\n    \t\t\tthis.children.push( object );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tremove: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.remove( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar index = this.children.indexOf( object );\n\n    \t\tif ( index !== - 1 ) {\n\n    \t\t\tobject.parent = null;\n\n    \t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n    \t\t\tthis.children.splice( index, 1 );\n\n    \t\t}\n\n    \t},\n\n    \tgetObjectById: function ( id ) {\n\n    \t\treturn this.getObjectByProperty( 'id', id );\n\n    \t},\n\n    \tgetObjectByName: function ( name ) {\n\n    \t\treturn this.getObjectByProperty( 'name', name );\n\n    \t},\n\n    \tgetObjectByProperty: function ( name, value ) {\n\n    \t\tif ( this[ name ] === value ) return this;\n\n    \t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n    \t\t\tvar child = this.children[ i ];\n    \t\t\tvar object = child.getObjectByProperty( name, value );\n\n    \t\t\tif ( object !== undefined ) {\n\n    \t\t\t\treturn object;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn undefined;\n\n    \t},\n\n    \tgetWorldPosition: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.updateMatrixWorld( true );\n\n    \t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n    \t},\n\n    \tgetWorldQuaternion: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar scale = new Vector3();\n\n    \t\treturn function getWorldQuaternion( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Quaternion();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldRotation: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldRotation( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Euler();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldScale: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldScale( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldDirection: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldDirection( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n    \t\t};\n\n    \t}(),\n\n    \traycast: function () {},\n\n    \ttraverse: function ( callback ) {\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverse( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseVisible: function ( callback ) {\n\n    \t\tif ( this.visible === false ) return;\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverseVisible( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseAncestors: function ( callback ) {\n\n    \t\tvar parent = this.parent;\n\n    \t\tif ( parent !== null ) {\n\n    \t\t\tcallback( parent );\n\n    \t\t\tparent.traverseAncestors( callback );\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrix: function () {\n\n    \t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n    \t\tthis.matrixWorldNeedsUpdate = true;\n\n    \t},\n\n    \tupdateMatrixWorld: function ( force ) {\n\n    \t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n    \t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n    \t\t\tif ( this.parent === null ) {\n\n    \t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n    \t\t\t}\n\n    \t\t\tthis.matrixWorldNeedsUpdate = false;\n\n    \t\t\tforce = true;\n\n    \t\t}\n\n    \t\t// update children\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].updateMatrixWorld( force );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\t// meta is '' when called from JSON.stringify\n    \t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n    \t\tvar output = {};\n\n    \t\t// meta is a hash used to collect geometries, materials.\n    \t\t// not providing it implies that this is the root object\n    \t\t// being serialized.\n    \t\tif ( isRootObject ) {\n\n    \t\t\t// initialize meta obj\n    \t\t\tmeta = {\n    \t\t\t\tgeometries: {},\n    \t\t\t\tmaterials: {},\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t\toutput.metadata = {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Object',\n    \t\t\t\tgenerator: 'Object3D.toJSON'\n    \t\t\t};\n\n    \t\t}\n\n    \t\t// standard Object3D serialization\n\n    \t\tvar object = {};\n\n    \t\tobject.uuid = this.uuid;\n    \t\tobject.type = this.type;\n\n    \t\tif ( this.name !== '' ) object.name = this.name;\n    \t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n    \t\tif ( this.castShadow === true ) object.castShadow = true;\n    \t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n    \t\tif ( this.visible === false ) object.visible = false;\n\n    \t\tobject.matrix = this.matrix.toArray();\n\n    \t\t//\n\n    \t\tif ( this.geometry !== undefined ) {\n\n    \t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.geometry = this.geometry.uuid;\n\n    \t\t}\n\n    \t\tif ( this.material !== undefined ) {\n\n    \t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.material = this.material.uuid;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( this.children.length > 0 ) {\n\n    \t\t\tobject.children = [];\n\n    \t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n    \t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( isRootObject ) {\n\n    \t\t\tvar geometries = extractFromCache( meta.geometries );\n    \t\t\tvar materials = extractFromCache( meta.materials );\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n    \t\t\tif ( materials.length > 0 ) output.materials = materials;\n    \t\t\tif ( textures.length > 0 ) output.textures = textures;\n    \t\t\tif ( images.length > 0 ) output.images = images;\n\n    \t\t}\n\n    \t\toutput.object = object;\n\n    \t\treturn output;\n\n    \t\t// extract data from the cache hash\n    \t\t// remove metadata on each item\n    \t\t// and return as array\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t},\n\n    \tclone: function ( recursive ) {\n\n    \t\treturn new this.constructor().copy( this, recursive );\n\n    \t},\n\n    \tcopy: function ( source, recursive ) {\n\n    \t\tif ( recursive === undefined ) recursive = true;\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.up.copy( source.up );\n\n    \t\tthis.position.copy( source.position );\n    \t\tthis.quaternion.copy( source.quaternion );\n    \t\tthis.scale.copy( source.scale );\n\n    \t\tthis.matrix.copy( source.matrix );\n    \t\tthis.matrixWorld.copy( source.matrixWorld );\n\n    \t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n    \t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n    \t\tthis.visible = source.visible;\n\n    \t\tthis.castShadow = source.castShadow;\n    \t\tthis.receiveShadow = source.receiveShadow;\n\n    \t\tthis.frustumCulled = source.frustumCulled;\n    \t\tthis.renderOrder = source.renderOrder;\n\n    \t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n    \t\tif ( recursive === true ) {\n\n    \t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n    \t\t\t\tvar child = source.children[ i ];\n    \t\t\t\tthis.add( child.clone() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    var count$2 = 0;\n    function Object3DIdCount() { return count$2++; };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Line3( start, end ) {\n\n    \tthis.start = ( start !== undefined ) ? start : new Vector3();\n    \tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n    }\n\n    Line3.prototype = {\n\n    \tconstructor: Line3,\n\n    \tset: function ( start, end ) {\n\n    \t\tthis.start.copy( start );\n    \t\tthis.end.copy( end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( line ) {\n\n    \t\tthis.start.copy( line.start );\n    \t\tthis.end.copy( line.end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tdelta: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.subVectors( this.end, this.start );\n\n    \t},\n\n    \tdistanceSq: function () {\n\n    \t\treturn this.start.distanceToSquared( this.end );\n\n    \t},\n\n    \tdistance: function () {\n\n    \t\treturn this.start.distanceTo( this.end );\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tclosestPointToPointParameter: function () {\n\n    \t\tvar startP = new Vector3();\n    \t\tvar startEnd = new Vector3();\n\n    \t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n    \t\t\tstartP.subVectors( point, this.start );\n    \t\t\tstartEnd.subVectors( this.end, this.start );\n\n    \t\t\tvar startEnd2 = startEnd.dot( startEnd );\n    \t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n    \t\t\tvar t = startEnd_startP / startEnd2;\n\n    \t\t\tif ( clampToLine ) {\n\n    \t\t\t\tt = exports.Math.clamp( t, 0, 1 );\n\n    \t\t\t}\n\n    \t\t\treturn t;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n    \t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.start.applyMatrix4( matrix );\n    \t\tthis.end.applyMatrix4( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( line ) {\n\n    \t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Triangle( a, b, c ) {\n\n    \tthis.a = ( a !== undefined ) ? a : new Vector3();\n    \tthis.b = ( b !== undefined ) ? b : new Vector3();\n    \tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n    }\n\n    Triangle.normal = function () {\n\n    \tvar v0 = new Vector3();\n\n    \treturn function normal( a, b, c, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.subVectors( c, b );\n    \t\tv0.subVectors( a, b );\n    \t\tresult.cross( v0 );\n\n    \t\tvar resultLengthSq = result.lengthSq();\n    \t\tif ( resultLengthSq > 0 ) {\n\n    \t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n    \t\t}\n\n    \t\treturn result.set( 0, 0, 0 );\n\n    \t};\n\n    }();\n\n    // static/instance method to calculate barycentric coordinates\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n    Triangle.barycoordFromPoint = function () {\n\n    \tvar v0 = new Vector3();\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n\n    \treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n    \t\tv0.subVectors( c, a );\n    \t\tv1.subVectors( b, a );\n    \t\tv2.subVectors( point, a );\n\n    \t\tvar dot00 = v0.dot( v0 );\n    \t\tvar dot01 = v0.dot( v1 );\n    \t\tvar dot02 = v0.dot( v2 );\n    \t\tvar dot11 = v1.dot( v1 );\n    \t\tvar dot12 = v1.dot( v2 );\n\n    \t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\t// collinear or singular triangle\n    \t\tif ( denom === 0 ) {\n\n    \t\t\t// arbitrary location outside of triangle?\n    \t\t\t// not sure if this is the best idea, maybe should be returning undefined\n    \t\t\treturn result.set( - 2, - 1, - 1 );\n\n    \t\t}\n\n    \t\tvar invDenom = 1 / denom;\n    \t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n    \t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n    \t\t// barycentric coordinates must always sum to 1\n    \t\treturn result.set( 1 - u - v, v, u );\n\n    \t};\n\n    }();\n\n    Triangle.containsPoint = function () {\n\n    \tvar v1 = new Vector3();\n\n    \treturn function containsPoint( point, a, b, c ) {\n\n    \t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n    \t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n    \t};\n\n    }();\n\n    Triangle.prototype = {\n\n    \tconstructor: Triangle,\n\n    \tset: function ( a, b, c ) {\n\n    \t\tthis.a.copy( a );\n    \t\tthis.b.copy( b );\n    \t\tthis.c.copy( c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n    \t\tthis.a.copy( points[ i0 ] );\n    \t\tthis.b.copy( points[ i1 ] );\n    \t\tthis.c.copy( points[ i2 ] );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( triangle ) {\n\n    \t\tthis.a.copy( triangle.a );\n    \t\tthis.b.copy( triangle.b );\n    \t\tthis.c.copy( triangle.c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tarea: function () {\n\n    \t\tvar v0 = new Vector3();\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function area() {\n\n    \t\t\tv0.subVectors( this.c, this.b );\n    \t\t\tv1.subVectors( this.a, this.b );\n\n    \t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n    \t\t};\n\n    \t}(),\n\n    \tmidpoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n    \t},\n\n    \tnormal: function ( optionalTarget ) {\n\n    \t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tplane: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Plane();\n\n    \t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n    \t},\n\n    \tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n    \t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n    \t},\n\n    \tclosestPointToPoint: function () {\n\n    \t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n    \t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n    \t\t\tif ( plane === undefined ) {\n\n    \t\t\t\tplane = new Plane();\n    \t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n    \t\t\t\tprojectedPoint = new Vector3();\n    \t\t\t\tclosestPoint = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n    \t\t\tvar minDistance = Infinity;\n\n    \t\t\t// project the point onto the plane of the triangle\n\n    \t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n    \t\t\tplane.projectPoint( point, projectedPoint );\n\n    \t\t\t// check if the projection lies within the triangle\n\n    \t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n    \t\t\t\t// if so, this is the closest point\n\n    \t\t\t\tresult.copy( projectedPoint );\n\n    \t\t\t} else {\n\n    \t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n    \t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n    \t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n    \t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n    \t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n    \t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n    \t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n    \t\t\t\t\tif( distance < minDistance ) {\n\n    \t\t\t\t\t\tminDistance = distance;\n\n    \t\t\t\t\t\tresult.copy( closestPoint );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( triangle ) {\n\n    \t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Face3( a, b, c, normal, color, materialIndex ) {\n\n    \tthis.a = a;\n    \tthis.b = b;\n    \tthis.c = c;\n\n    \tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n    \tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n    \tthis.color = (color && color.isColor) ? color : new Color();\n    \tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n    \tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n    }\n\n    Face3.prototype = {\n\n    \tconstructor: Face3,\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.a = source.a;\n    \t\tthis.b = source.b;\n    \t\tthis.c = source.c;\n\n    \t\tthis.normal.copy( source.normal );\n    \t\tthis.color.copy( source.color );\n\n    \t\tthis.materialIndex = source.materialIndex;\n\n    \t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  shading: THREE.SmoothShading,\n     *  depthTest: <bool>,\n     *  depthWrite: <bool>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>\n     * }\n     */\n\n    function MeshBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // emissive\n\n    \tthis.map = null;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshBasicMaterial.prototype = Object.create( Material.prototype );\n    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n    MeshBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferAttribute( array, itemSize, normalized ) {\n\n    \tif ( Array.isArray( array ) ) {\n\n    \t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n    \t}\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.itemSize = itemSize;\n    \tthis.count = array !== undefined ? array.length / itemSize : 0;\n    \tthis.normalized = normalized === true;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    BufferAttribute.prototype = {\n\n    \tconstructor: BufferAttribute,\n\n    \tisBufferAttribute: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.itemSize = source.itemSize;\n    \t\tthis.count = source.count;\n    \t\tthis.normalized = source.normalized;\n\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.itemSize;\n    \t\tindex2 *= attribute.itemSize;\n\n    \t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyArray: function ( array ) {\n\n    \t\tthis.array.set( array );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyColorsArray: function ( colors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n    \t\t\tvar color = colors[ i ];\n\n    \t\t\tif ( color === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n    \t\t\t\tcolor = new Color();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = color.r;\n    \t\t\tarray[ offset ++ ] = color.g;\n    \t\t\tarray[ offset ++ ] = color.b;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyIndicesArray: function ( indices ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\tvar index = indices[ i ];\n\n    \t\t\tarray[ offset ++ ] = index.a;\n    \t\t\tarray[ offset ++ ] = index.b;\n    \t\t\tarray[ offset ++ ] = index.c;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector2sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector3sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector4sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n    \t\t\tarray[ offset ++ ] = vector.w;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize ];\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.array[ index * this.itemSize ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 1 ];\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 2 ];\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 3 ];\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n    \t\tthis.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    //\n\n    function Int8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\n    }\n\n    function Uint8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\n    }\n\n    function Uint8ClampedAttribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n    }\n\n    function Int16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\n    }\n\n    function Uint16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\n    }\n\n    function Int32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\n    }\n\n    function Uint32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\n    }\n\n    function Float32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\n    }\n\n    function Float64Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\n    }\n\n    // Deprecated\n\n    function DynamicBufferAttribute( array, itemSize ) {\n\n    \tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n    \treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author kile / http://kile.stravaganza.org/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author bhouston / http://clara.io\n     */\n\n    function Geometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Geometry';\n\n    \tthis.vertices = [];\n    \tthis.colors = [];\n    \tthis.faces = [];\n    \tthis.faceVertexUvs = [ [] ];\n\n    \tthis.morphTargets = [];\n    \tthis.morphNormals = [];\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \tthis.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.elementsNeedUpdate = false;\n    \tthis.verticesNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.lineDistancesNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( Geometry.prototype, EventDispatcher.prototype, {\n\n    \tisGeometry: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertex.applyMatrix4( matrix );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n    \t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\tthis.verticesNeedUpdate = true;\n    \t\tthis.normalsNeedUpdate = true;\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tfromBufferGeometry: function ( geometry ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tvar positions = attributes.position.array;\n    \t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n    \t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n    \t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n    \t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n    \t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n    \t\tvar tempNormals = [];\n    \t\tvar tempUVs = [];\n    \t\tvar tempUVs2 = [];\n\n    \t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n    \t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n    \t\t\tif ( normals !== undefined ) {\n\n    \t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( colors !== undefined ) {\n\n    \t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction addFace( a, b, c, materialIndex ) {\n\n    \t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n    \t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n    \t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n    \t\t\tscope.faces.push( face );\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( indices !== undefined ) {\n\n    \t\t\tvar groups = geometry.groups;\n\n    \t\t\tif ( groups.length > 0 ) {\n\n    \t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n    \t\t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n    \t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n    \t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n    \t\t\t\taddFace( i, i + 1, i + 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeFaceNormals();\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tthis.computeBoundingSphere();\n\n    \t\tvar center = this.boundingSphere.center;\n    \t\tvar radius = this.boundingSphere.radius;\n\n    \t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n    \t\tvar matrix = new Matrix4();\n    \t\tmatrix.set(\n    \t\t\ts, 0, 0, - s * center.x,\n    \t\t\t0, s, 0, - s * center.y,\n    \t\t\t0, 0, s, - s * center.z,\n    \t\t\t0, 0, 0, 1\n    \t\t);\n\n    \t\tthis.applyMatrix( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tvar face = this.faces[ f ];\n\n    \t\t\tvar vA = this.vertices[ face.a ];\n    \t\t\tvar vB = this.vertices[ face.b ];\n    \t\t\tvar vC = this.vertices[ face.c ];\n\n    \t\t\tcb.subVectors( vC, vB );\n    \t\t\tab.subVectors( vA, vB );\n    \t\t\tcb.cross( ab );\n\n    \t\t\tcb.normalize();\n\n    \t\t\tface.normal.copy( cb );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeVertexNormals: function ( areaWeighted ) {\n\n    \t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n    \t\tvar v, vl, f, fl, face, vertices;\n\n    \t\tvertices = new Array( this.vertices.length );\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ] = new Vector3();\n\n    \t\t}\n\n    \t\tif ( areaWeighted ) {\n\n    \t\t\t// vertex normals weighted by triangle areas\n    \t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n    \t\t\tvar vA, vB, vC;\n    \t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvA = this.vertices[ face.a ];\n    \t\t\t\tvB = this.vertices[ face.b ];\n    \t\t\t\tvC = this.vertices[ face.c ];\n\n    \t\t\t\tcb.subVectors( vC, vB );\n    \t\t\t\tab.subVectors( vA, vB );\n    \t\t\t\tcb.cross( ab );\n\n    \t\t\t\tvertices[ face.a ].add( cb );\n    \t\t\t\tvertices[ face.b ].add( cb );\n    \t\t\t\tvertices[ face.c ].add( cb );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvertices[ face.a ].add( face.normal );\n    \t\t\t\tvertices[ face.b ].add( face.normal );\n    \t\t\t\tvertices[ face.c ].add( face.normal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ].normalize();\n\n    \t\t}\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n    \t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n    \t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n    \t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n    \t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.faces.length > 0 ) {\n\n    \t\t\tthis.normalsNeedUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeMorphNormals: function () {\n\n    \t\tvar i, il, f, fl, face;\n\n    \t\t// save original normals\n    \t\t// - create temp variables on first access\n    \t\t//   otherwise just copy (for faster repeated calls)\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tif ( ! face.__originalFaceNormal ) {\n\n    \t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n    \t\t\t} else {\n\n    \t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n    \t\t\t}\n\n    \t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n    \t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// use temp geometry to compute face and vertex normals for each morph\n\n    \t\tvar tmpGeo = new Geometry();\n    \t\ttmpGeo.faces = this.faces;\n\n    \t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n    \t\t\t// create on first access\n\n    \t\t\tif ( ! this.morphNormals[ i ] ) {\n\n    \t\t\t\tthis.morphNormals[ i ] = {};\n    \t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n    \t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n    \t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n    \t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n    \t\t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tfaceNormal = new Vector3();\n    \t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n    \t\t\t\t\tdstNormalsFace.push( faceNormal );\n    \t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar morphNormals = this.morphNormals[ i ];\n\n    \t\t\t// set vertices to morph target\n\n    \t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n    \t\t\t// compute morph normals\n\n    \t\t\ttmpGeo.computeFaceNormals();\n    \t\t\ttmpGeo.computeVertexNormals();\n\n    \t\t\t// store morph normals\n\n    \t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n    \t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n    \t\t\t\tfaceNormal.copy( face.normal );\n\n    \t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n    \t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n    \t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore original normals\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tface.normal = face.__originalFaceNormal;\n    \t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeTangents: function () {\n\n    \t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n    \t},\n\n    \tcomputeLineDistances: function () {\n\n    \t\tvar d = 0;\n    \t\tvar vertices = this.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tif ( i > 0 ) {\n\n    \t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n    \t\t\t}\n\n    \t\t\tthis.lineDistances[ i ] = d;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tthis.boundingBox.setFromPoints( this.vertices );\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tif ( this.boundingSphere === null ) {\n\n    \t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t}\n\n    \t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n    \t},\n\n    \tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n    \t\tif ( (geometry && geometry.isGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar normalMatrix,\n    \t\tvertexOffset = this.vertices.length,\n    \t\tvertices1 = this.vertices,\n    \t\tvertices2 = geometry.vertices,\n    \t\tfaces1 = this.faces,\n    \t\tfaces2 = geometry.faces,\n    \t\tuvs1 = this.faceVertexUvs[ 0 ],\n    \t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n    \t\tcolors1 = this.colors,\n    \t\tcolors2 = geometry.colors;\n\n    \t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n    \t\tif ( matrix !== undefined ) {\n\n    \t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t}\n\n    \t\t// vertices\n\n    \t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = vertices2[ i ];\n\n    \t\t\tvar vertexCopy = vertex.clone();\n\n    \t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n    \t\t\tvertices1.push( vertexCopy );\n\n    \t\t}\n\n    \t\t// colors\n\n    \t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n    \t\t\tcolors1.push( colors2[ i ].clone() );\n\n    \t\t}\n\n    \t\t// faces\n\n    \t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n    \t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n    \t\t\tfaceVertexNormals = face.vertexNormals,\n    \t\t\tfaceVertexColors = face.vertexColors;\n\n    \t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n    \t\t\tfaceCopy.normal.copy( face.normal );\n\n    \t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n    \t\t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t\t}\n\n    \t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.color.copy( face.color );\n\n    \t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n    \t\t\t\tcolor = faceVertexColors[ j ];\n    \t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n    \t\t\tfaces1.push( faceCopy );\n\n    \t\t}\n\n    \t\t// uvs\n\n    \t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n    \t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n    \t\t\tif ( uv === undefined ) {\n\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n    \t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n    \t\t\t}\n\n    \t\t\tuvs1.push( uvCopy );\n\n    \t\t}\n\n    \t},\n\n    \tmergeMesh: function ( mesh ) {\n\n    \t\tif ( (mesh && mesh.isMesh) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n    \t\tthis.merge( mesh.geometry, mesh.matrix );\n\n    \t},\n\n    \t/*\n    \t * Checks for duplicate vertices with hashmap.\n    \t * Duplicated vertices are removed\n    \t * and faces' vertices are updated.\n    \t */\n\n    \tmergeVertices: function () {\n\n    \t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n    \t\tvar unique = [], changes = [];\n\n    \t\tvar v, key;\n    \t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    \t\tvar precision = Math.pow( 10, precisionPoints );\n    \t\tvar i, il, face;\n    \t\tvar indices, j, jl;\n\n    \t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tv = this.vertices[ i ];\n    \t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n    \t\t\tif ( verticesMap[ key ] === undefined ) {\n\n    \t\t\t\tverticesMap[ key ] = i;\n    \t\t\t\tunique.push( this.vertices[ i ] );\n    \t\t\t\tchanges[ i ] = unique.length - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n    \t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\t// if faces are completely degenerate after merging vertices, we\n    \t\t// have to remove them from the geometry.\n    \t\tvar faceIndicesToRemove = [];\n\n    \t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tface = this.faces[ i ];\n\n    \t\t\tface.a = changes[ face.a ];\n    \t\t\tface.b = changes[ face.b ];\n    \t\t\tface.c = changes[ face.c ];\n\n    \t\t\tindices = [ face.a, face.b, face.c ];\n\n    \t\t\tvar dupIndex = - 1;\n\n    \t\t\t// if any duplicate vertices are found in a Face3\n    \t\t\t// we have to remove the face as nothing can be saved\n    \t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n    \t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n    \t\t\t\t\tdupIndex = n;\n    \t\t\t\t\tfaceIndicesToRemove.push( i );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n    \t\t\tvar idx = faceIndicesToRemove[ i ];\n\n    \t\t\tthis.faces.splice( idx, 1 );\n\n    \t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Use unique set of vertices\n\n    \t\tvar diff = this.vertices.length - unique.length;\n    \t\tthis.vertices = unique;\n    \t\treturn diff;\n\n    \t},\n\n    \tsortFacesByMaterialIndex: function () {\n\n    \t\tvar faces = this.faces;\n    \t\tvar length = faces.length;\n\n    \t\t// tag faces\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tfaces[ i ]._id = i;\n\n    \t\t}\n\n    \t\t// sort faces\n\n    \t\tfunction materialIndexSort( a, b ) {\n\n    \t\t\treturn a.materialIndex - b.materialIndex;\n\n    \t\t}\n\n    \t\tfaces.sort( materialIndexSort );\n\n    \t\t// sort uvs\n\n    \t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n    \t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n    \t\tvar newUvs1, newUvs2;\n\n    \t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n    \t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tvar id = faces[ i ]._id;\n\n    \t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n    \t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n    \t\t}\n\n    \t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n    \t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Geometry',\n    \t\t\t\tgenerator: 'Geometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Geometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tvar vertices = [];\n\n    \t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n    \t\t}\n\n    \t\tvar faces = [];\n    \t\tvar normals = [];\n    \t\tvar normalsHash = {};\n    \t\tvar colors = [];\n    \t\tvar colorsHash = {};\n    \t\tvar uvs = [];\n    \t\tvar uvsHash = {};\n\n    \t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n\n    \t\t\tvar hasMaterial = true;\n    \t\t\tvar hasFaceUv = false; // deprecated\n    \t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n    \t\t\tvar hasFaceNormal = face.normal.length() > 0;\n    \t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n    \t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n    \t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n    \t\t\tvar faceType = 0;\n\n    \t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n    \t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n    \t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n    \t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n    \t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n    \t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n    \t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n    \t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n    \t\t\tfaces.push( faceType );\n    \t\t\tfaces.push( face.a, face.b, face.c );\n    \t\t\tfaces.push( face.materialIndex );\n\n    \t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction setBit( value, position, enabled ) {\n\n    \t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n    \t\t}\n\n    \t\tfunction getNormalIndex( normal ) {\n\n    \t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n    \t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn normalsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tnormalsHash[ hash ] = normals.length / 3;\n    \t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n    \t\t\treturn normalsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getColorIndex( color ) {\n\n    \t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n    \t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn colorsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tcolorsHash[ hash ] = colors.length;\n    \t\t\tcolors.push( color.getHex() );\n\n    \t\t\treturn colorsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getUvIndex( uv ) {\n\n    \t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n    \t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn uvsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tuvsHash[ hash ] = uvs.length / 2;\n    \t\t\tuvs.push( uv.x, uv.y );\n\n    \t\t\treturn uvsHash[ hash ];\n\n    \t\t}\n\n    \t\tdata.data = {};\n\n    \t\tdata.data.vertices = vertices;\n    \t\tdata.data.normals = normals;\n    \t\tif ( colors.length > 0 ) data.data.colors = colors;\n    \t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n    \t\tdata.data.faces = faces;\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new Geometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.vertices = [];\n    \t\tthis.faces = [];\n    \t\tthis.faceVertexUvs = [ [] ];\n    \t\tthis.colors = [];\n\n    \t\tvar vertices = source.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar colors = source.colors;\n\n    \t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\n    \t\t\tthis.colors.push( colors[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar faces = source.faces;\n\n    \t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n    \t\t\tthis.faces.push( faces[ i ].clone() );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n    \t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n    \t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n    \t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n    \t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n    \t\t\t\t\tvar uv = uvs[ k ];\n\n    \t\t\t\t\tuvsCopy.push( uv.clone() );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    var count$3 = 0;\n    function GeometryIdCount() { return count$3++; };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'DirectGeometry';\n\n    \tthis.indices = [];\n    \tthis.vertices = [];\n    \tthis.normals = [];\n    \tthis.colors = [];\n    \tthis.uvs = [];\n    \tthis.uvs2 = [];\n\n    \tthis.groups = [];\n\n    \tthis.morphTargets = {};\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \t// this.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.verticesNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\n    \tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n    \tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeGroups: function ( geometry ) {\n\n    \t\tvar group;\n    \t\tvar groups = [];\n    \t\tvar materialIndex;\n\n    \t\tvar faces = geometry.faces;\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\t// materials\n\n    \t\t\tif ( face.materialIndex !== materialIndex ) {\n\n    \t\t\t\tmaterialIndex = face.materialIndex;\n\n    \t\t\t\tif ( group !== undefined ) {\n\n    \t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\t\t\tgroups.push( group );\n\n    \t\t\t\t}\n\n    \t\t\t\tgroup = {\n    \t\t\t\t\tstart: i * 3,\n    \t\t\t\t\tmaterialIndex: materialIndex\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( group !== undefined ) {\n\n    \t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\tgroups.push( group );\n\n    \t\t}\n\n    \t\tthis.groups = groups;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tvar faces = geometry.faces;\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n    \t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n    \t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n    \t\t// morphs\n\n    \t\tvar morphTargets = geometry.morphTargets;\n    \t\tvar morphTargetsLength = morphTargets.length;\n\n    \t\tvar morphTargetsPosition;\n\n    \t\tif ( morphTargetsLength > 0 ) {\n\n    \t\t\tmorphTargetsPosition = [];\n\n    \t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsPosition[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n    \t\t}\n\n    \t\tvar morphNormals = geometry.morphNormals;\n    \t\tvar morphNormalsLength = morphNormals.length;\n\n    \t\tvar morphTargetsNormal;\n\n    \t\tif ( morphNormalsLength > 0 ) {\n\n    \t\t\tmorphTargetsNormal = [];\n\n    \t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsNormal[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n    \t\t}\n\n    \t\t// skins\n\n    \t\tvar skinIndices = geometry.skinIndices;\n    \t\tvar skinWeights = geometry.skinWeights;\n\n    \t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n    \t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n    \t\t//\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar normal = face.normal;\n\n    \t\t\t\tthis.normals.push( normal, normal, normal );\n\n    \t\t\t}\n\n    \t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\tif ( vertexColors.length === 3 ) {\n\n    \t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar color = face.color;\n\n    \t\t\t\tthis.colors.push( color, color, color );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n    \t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv2 === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n    \t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t// morphs\n\n    \t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n    \t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n    \t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n    \t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n    \t\t\t}\n\n    \t\t\t// skins\n\n    \t\t\tif ( hasSkinIndices ) {\n\n    \t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tif ( hasSkinWeights ) {\n\n    \t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeGroups( geometry );\n\n    \t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'BufferGeometry';\n\n    \tthis.index = null;\n    \tthis.attributes = {};\n\n    \tthis.morphAttributes = {};\n\n    \tthis.groups = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \tthis.drawRange = { start: 0, count: Infinity };\n\n    }\n\n    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\n    \tisBufferGeometry: true,\n\n    \tgetIndex: function () {\n\n    \t\treturn this.index;\n\n    \t},\n\n    \tsetIndex: function ( index ) {\n\n    \t\tthis.index = index;\n\n    \t},\n\n    \taddAttribute: function ( name, attribute ) {\n\n    \t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n    \t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( name === 'index' ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n    \t\t\tthis.setIndex( attribute );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.attributes[ name ] = attribute;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetAttribute: function ( name ) {\n\n    \t\treturn this.attributes[ name ];\n\n    \t},\n\n    \tremoveAttribute: function ( name ) {\n\n    \t\tdelete this.attributes[ name ];\n\n    \t\treturn this;\n\n    \t},\n\n    \taddGroup: function ( start, count, materialIndex ) {\n\n    \t\tthis.groups.push( {\n\n    \t\t\tstart: start,\n    \t\t\tcount: count,\n    \t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n    \t\t} );\n\n    \t},\n\n    \tclearGroups: function () {\n\n    \t\tthis.groups = [];\n\n    \t},\n\n    \tsetDrawRange: function ( start, count ) {\n\n    \t\tthis.drawRange.start = start;\n    \t\tthis.drawRange.count = count;\n\n    \t},\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar position = this.attributes.position;\n\n    \t\tif ( position !== undefined ) {\n\n    \t\t\tmatrix.applyToVector3Array( position.array );\n    \t\t\tposition.needsUpdate = true;\n\n    \t\t}\n\n    \t\tvar normal = this.attributes.normal;\n\n    \t\tif ( normal !== undefined ) {\n\n    \t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t\tnormalMatrix.applyToVector3Array( normal.array );\n    \t\t\tnormal.needsUpdate = true;\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tsetFromObject: function ( object ) {\n\n    \t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\n    \t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n    \t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\n    \t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n    \t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n    \t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n    \t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\n    \t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t\t}\n\n    \t\t} else if ( (object && object.isMesh) ) {\n\n    \t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tthis.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateFromObject: function ( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isMesh) ) {\n\n    \t\t\tvar direct = geometry.__directGeometry;\n\n    \t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n    \t\t\t\tdirect = undefined;\n    \t\t\t\tgeometry.elementsNeedUpdate = false;\n\n    \t\t\t}\n\n    \t\t\tif ( direct === undefined ) {\n\n    \t\t\t\treturn this.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n    \t\t\tgeometry.normalsNeedUpdate = false;\n    \t\t\tgeometry.colorsNeedUpdate = false;\n    \t\t\tgeometry.uvsNeedUpdate = false;\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t\tgeometry = direct;\n\n    \t\t}\n\n    \t\tvar attribute;\n\n    \t\tif ( geometry.verticesNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.position;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.normalsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.normal;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.normals );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.normalsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.colorsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.color;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyColorsArray( geometry.colors );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.colorsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.uvsNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.uv;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.uvsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.lineDistance;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyArray( geometry.lineDistances );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.groupsNeedUpdate ) {\n\n    \t\t\tgeometry.computeGroups( object.geometry );\n    \t\t\tthis.groups = geometry.groups;\n\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n    \t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n    \t},\n\n    \tfromDirectGeometry: function ( geometry ) {\n\n    \t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n    \t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n    \t\tif ( geometry.normals.length > 0 ) {\n\n    \t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n    \t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n    \t\t}\n\n    \t\tif ( geometry.colors.length > 0 ) {\n\n    \t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n    \t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs.length > 0 ) {\n\n    \t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n    \t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs2.length > 0 ) {\n\n    \t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n    \t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n    \t\t}\n\n    \t\tif ( geometry.indices.length > 0 ) {\n\n    \t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n    \t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n    \t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n    \t\t}\n\n    \t\t// groups\n\n    \t\tthis.groups = geometry.groups;\n\n    \t\t// morphs\n\n    \t\tfor ( var name in geometry.morphTargets ) {\n\n    \t\t\tvar array = [];\n    \t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n    \t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ i ];\n\n    \t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\n    \t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n    \t\t\t}\n\n    \t\t\tthis.morphAttributes[ name ] = array;\n\n    \t\t}\n\n    \t\t// skinning\n\n    \t\tif ( geometry.skinIndices.length > 0 ) {\n\n    \t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n    \t\t}\n\n    \t\tif ( geometry.skinWeights.length > 0 ) {\n\n    \t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tvar positions = this.attributes.position.array;\n\n    \t\tif ( positions !== undefined ) {\n\n    \t\t\tthis.boundingBox.setFromArray( positions );\n\n    \t\t} else {\n\n    \t\t\tthis.boundingBox.makeEmpty();\n\n    \t\t}\n\n    \t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tvar box = new Box3();\n    \t\tvar vector = new Vector3();\n\n    \t\treturn function computeBoundingSphere() {\n\n    \t\t\tif ( this.boundingSphere === null ) {\n\n    \t\t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t\t}\n\n    \t\t\tvar positions = this.attributes.position;\n\n    \t\t\tif ( positions ) {\n\n    \t\t\t\tvar array = positions.array;\n    \t\t\t\tvar center = this.boundingSphere.center;\n\n    \t\t\t\tbox.setFromArray( array );\n    \t\t\t\tbox.getCenter( center );\n\n    \t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n    \t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n    \t\t\t\tvar maxRadiusSq = 0;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n    \t\t\t\t\tvector.fromArray( array, i );\n    \t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \tcomputeFaceNormals: function () {\n\n    \t\t// backwards compatibility\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tvar index = this.index;\n    \t\tvar attributes = this.attributes;\n    \t\tvar groups = this.groups;\n\n    \t\tif ( attributes.position ) {\n\n    \t\t\tvar positions = attributes.position.array;\n\n    \t\t\tif ( attributes.normal === undefined ) {\n\n    \t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n    \t\t\t} else {\n\n    \t\t\t\t// reset existing normals to zero\n\n    \t\t\t\tvar array = attributes.normal.array;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n    \t\t\t\t\tarray[ i ] = 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar normals = attributes.normal.array;\n\n    \t\t\tvar vA, vB, vC,\n\n    \t\t\tpA = new Vector3(),\n    \t\t\tpB = new Vector3(),\n    \t\t\tpC = new Vector3(),\n\n    \t\t\tcb = new Vector3(),\n    \t\t\tab = new Vector3();\n\n    \t\t\t// indexed elements\n\n    \t\t\tif ( index ) {\n\n    \t\t\t\tvar indices = index.array;\n\n    \t\t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\t\tthis.addGroup( 0, indices.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n    \t\t\t\t\tvar group = groups[ j ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n    \t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n    \t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n    \t\t\t\t\t\tpA.fromArray( positions, vA );\n    \t\t\t\t\t\tpB.fromArray( positions, vB );\n    \t\t\t\t\t\tpC.fromArray( positions, vC );\n\n    \t\t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\t\tnormals[ vA ] += cb.x;\n    \t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vB ] += cb.x;\n    \t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vC ] += cb.x;\n    \t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n    \t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n    \t\t\t\t\tpA.fromArray( positions, i );\n    \t\t\t\t\tpB.fromArray( positions, i + 3 );\n    \t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n    \t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\tnormals[ i ] = cb.x;\n    \t\t\t\t\tnormals[ i + 1 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 3 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 4 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 6 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 7 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.normalizeNormals();\n\n    \t\t\tattributes.normal.needsUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tmerge: function ( geometry, offset ) {\n\n    \t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n    \t\t\tvar attribute1 = attributes[ key ];\n    \t\t\tvar attributeArray1 = attribute1.array;\n\n    \t\t\tvar attribute2 = geometry.attributes[ key ];\n    \t\t\tvar attributeArray2 = attribute2.array;\n\n    \t\t\tvar attributeSize = attribute2.itemSize;\n\n    \t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n    \t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalizeNormals: function () {\n\n    \t\tvar normals = this.attributes.normal.array;\n\n    \t\tvar x, y, z, n;\n\n    \t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n    \t\t\tx = normals[ i ];\n    \t\t\ty = normals[ i + 1 ];\n    \t\t\tz = normals[ i + 2 ];\n\n    \t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n    \t\t\tnormals[ i ] *= n;\n    \t\t\tnormals[ i + 1 ] *= n;\n    \t\t\tnormals[ i + 2 ] *= n;\n\n    \t\t}\n\n    \t},\n\n    \ttoNonIndexed: function () {\n\n    \t\tif ( this.index === null ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar geometry2 = new BufferGeometry();\n\n    \t\tvar indices = this.index.array;\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n\n    \t\t\tvar array = attribute.array;\n    \t\t\tvar itemSize = attribute.itemSize;\n\n    \t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n    \t\t\tvar index = 0, index2 = 0;\n\n    \t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\t\tindex = indices[ i ] * itemSize;\n\n    \t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n    \t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n    \t\t}\n\n    \t\treturn geometry2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'BufferGeometry',\n    \t\t\t\tgenerator: 'BufferGeometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard BufferGeometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tdata.data = { attributes: {} };\n\n    \t\tvar index = this.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar array = Array.prototype.slice.call( index.array );\n\n    \t\t\tdata.data.index = {\n    \t\t\t\ttype: index.array.constructor.name,\n    \t\t\t\tarray: array\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n\n    \t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n    \t\t\tdata.data.attributes[ key ] = {\n    \t\t\t\titemSize: attribute.itemSize,\n    \t\t\t\ttype: attribute.array.constructor.name,\n    \t\t\t\tarray: array,\n    \t\t\t\tnormalized: attribute.normalized\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar groups = this.groups;\n\n    \t\tif ( groups.length > 0 ) {\n\n    \t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n    \t\t}\n\n    \t\tvar boundingSphere = this.boundingSphere;\n\n    \t\tif ( boundingSphere !== null ) {\n\n    \t\t\tdata.data.boundingSphere = {\n    \t\t\t\tcenter: boundingSphere.center.toArray(),\n    \t\t\t\tradius: boundingSphere.radius\n    \t\t\t};\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new BufferGeometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tvar index = source.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tthis.setIndex( index.clone() );\n\n    \t\t}\n\n    \t\tvar attributes = source.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n    \t\t\tthis.addAttribute( name, attribute.clone() );\n\n    \t\t}\n\n    \t\tvar groups = source.groups;\n\n    \t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\tvar group = groups[ i ];\n    \t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    BufferGeometry.MaxIndex = 65535;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author jonobr1 / http://jonobr1.com/\n     */\n\n    function Mesh( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Mesh';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    \tthis.drawMode = TrianglesDrawMode;\n\n    \tthis.updateMorphTargets();\n\n    }\n\n    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Mesh,\n\n    \tisMesh: true,\n\n    \tsetDrawMode: function ( value ) {\n\n    \t\tthis.drawMode = value;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.drawMode = source.drawMode;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateMorphTargets: function () {\n\n    \t\tvar morphTargets = this.geometry.morphTargets;\n\n    \t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n    \t\t\tthis.morphTargetInfluences = [];\n    \t\t\tthis.morphTargetDictionary = {};\n\n    \t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n    \t\t\t\tthis.morphTargetInfluences.push( 0 );\n    \t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\tvar vA = new Vector3();\n    \t\tvar vB = new Vector3();\n    \t\tvar vC = new Vector3();\n\n    \t\tvar tempA = new Vector3();\n    \t\tvar tempB = new Vector3();\n    \t\tvar tempC = new Vector3();\n\n    \t\tvar uvA = new Vector2();\n    \t\tvar uvB = new Vector2();\n    \t\tvar uvC = new Vector2();\n\n    \t\tvar barycoord = new Vector3();\n\n    \t\tvar intersectionPoint = new Vector3();\n    \t\tvar intersectionPointWorld = new Vector3();\n\n    \t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n    \t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n    \t\t\tuv1.multiplyScalar( barycoord.x );\n    \t\t\tuv2.multiplyScalar( barycoord.y );\n    \t\t\tuv3.multiplyScalar( barycoord.z );\n\n    \t\t\tuv1.add( uv2 ).add( uv3 );\n\n    \t\t\treturn uv1.clone();\n\n    \t\t}\n\n    \t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n    \t\t\tvar intersect;\n    \t\t\tvar material = object.material;\n\n    \t\t\tif ( material.side === BackSide ) {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n    \t\t\t} else {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n    \t\t\t}\n\n    \t\t\tif ( intersect === null ) return null;\n\n    \t\t\tintersectionPointWorld.copy( point );\n    \t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n    \t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n    \t\t\treturn {\n    \t\t\t\tdistance: distance,\n    \t\t\t\tpoint: intersectionPointWorld.clone(),\n    \t\t\t\tobject: object\n    \t\t\t};\n\n    \t\t}\n\n    \t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n    \t\t\tvA.fromArray( positions, a * 3 );\n    \t\t\tvB.fromArray( positions, b * 3 );\n    \t\t\tvC.fromArray( positions, c * 3 );\n\n    \t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n    \t\t\tif ( intersection ) {\n\n    \t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n    \t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n    \t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n    \t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n    \t\t\t\t}\n\n    \t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n    \t\t\t\tintersection.faceIndex = a;\n\n    \t\t\t}\n\n    \t\t\treturn intersection;\n\n    \t\t}\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar material = this.material;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\tif ( material === undefined ) return;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\t// Check boundingBox before continuing\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n    \t\t\t}\n\n    \t\t\tvar uvs, intersection;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar a, b, c;\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( attributes.uv !== undefined ) {\n\n    \t\t\t\t\tuvs = attributes.uv.array;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n    \t\t\t\t\t\ta = indices[ i ];\n    \t\t\t\t\t\tb = indices[ i + 1 ];\n    \t\t\t\t\t\tc = indices[ i + 2 ];\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n    \t\t\t\t\t\ta = i / 3;\n    \t\t\t\t\t\tb = a + 1;\n    \t\t\t\t\t\tc = a + 2;\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar fvA, fvB, fvC;\n    \t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n    \t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n    \t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n    \t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tvar face = faces[ f ];\n    \t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n    \t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n    \t\t\t\t\tfvA = vertices[ face.a ];\n    \t\t\t\t\tfvB = vertices[ face.b ];\n    \t\t\t\t\tfvC = vertices[ face.c ];\n\n    \t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n    \t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n    \t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n    \t\t\t\t\t\tvA.set( 0, 0, 0 );\n    \t\t\t\t\t\tvB.set( 0, 0, 0 );\n    \t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n    \t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n    \t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n    \t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n    \t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n    \t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n    \t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n    \t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvA.add( fvA );\n    \t\t\t\t\t\tvB.add( fvB );\n    \t\t\t\t\t\tvC.add( fvC );\n\n    \t\t\t\t\t\tfvA = vA;\n    \t\t\t\t\t\tfvB = vB;\n    \t\t\t\t\t\tfvC = vC;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n    \t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n    \t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n    \t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n    \t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n    \t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tintersection.face = face;\n    \t\t\t\t\t\tintersection.faceIndex = f;\n    \t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'BoxBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tvar scope = this;\n\n    \t// segments\n    \twidthSegments = Math.floor( widthSegments ) || 1;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n    \tdepthSegments = Math.floor( depthSegments ) || 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n    \tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n    \tvar numberOfVertices = 0;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// build each side of the box geometry\n    \tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n    \tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n    \tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n    \tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n    \tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n    \tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount( w, h, d ) {\n\n    \t\tvar vertices = 0;\n\n    \t\t// calculate the amount of vertices for each side (plane)\n    \t\tvertices += (w + 1) * (h + 1) * 2; // xy\n    \t\tvertices += (w + 1) * (d + 1) * 2; // xz\n    \t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n    \t\treturn vertices;\n\n    \t}\n\n    \tfunction calculateIndexCount( w, h, d ) {\n\n    \t\tvar index = 0;\n\n    \t\t// calculate the amount of squares for each side\n    \t\tindex += w * h * 2; // xy\n    \t\tindex += w * d * 2; // xz\n    \t\tindex += d * h * 2; // zy\n\n    \t\treturn index * 6; // two triangles per square => six vertices per square\n\n    \t}\n\n    \tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n    \t\tvar segmentWidth\t= width / gridX;\n    \t\tvar segmentHeight = height / gridY;\n\n    \t\tvar widthHalf = width / 2;\n    \t\tvar heightHalf = height / 2;\n    \t\tvar depthHalf = depth / 2;\n\n    \t\tvar gridX1 = gridX + 1;\n    \t\tvar gridY1 = gridY + 1;\n\n    \t\tvar vertexCounter = 0;\n    \t\tvar groupCount = 0;\n\n    \t\tvar vector = new Vector3();\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\t\tvar y = iy * segmentHeight - heightHalf;\n\n    \t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = x * udir;\n    \t\t\t\tvector[ v ] = y * vdir;\n    \t\t\t\tvector[ w ] = depthHalf;\n\n    \t\t\t\t// now apply vector to vertex buffer\n    \t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = 0;\n    \t\t\t\tvector[ v ] = 0;\n    \t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n    \t\t\t\t// now apply vector to normal buffer\n    \t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// uvs\n    \t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n    \t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tvertexBufferOffset += 3;\n    \t\t\t\tuvBufferOffset += 2;\n    \t\t\t\tvertexCounter += 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// 1. you need three indices to draw a single face\n    \t\t// 2. a single segment consists of two faces\n    \t\t// 3. so we need to generate six (2*3) indices per segment\n\n    \t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n    \t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\t\t// indices\n    \t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n    \t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n    \t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\t\t// face one\n    \t\t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tindexBufferOffset += 6;\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t\t// update total number of vertices\n    \t\tnumberOfVertices += vertexCounter;\n\n    \t}\n\n    }\n\n    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'PlaneBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tvar width_half = width / 2;\n    \tvar height_half = height / 2;\n\n    \tvar gridX = Math.floor( widthSegments ) || 1;\n    \tvar gridY = Math.floor( heightSegments ) || 1;\n\n    \tvar gridX1 = gridX + 1;\n    \tvar gridY1 = gridY + 1;\n\n    \tvar segment_width = width / gridX;\n    \tvar segment_height = height / gridY;\n\n    \tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n    \tvar offset = 0;\n    \tvar offset2 = 0;\n\n    \tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\tvar y = iy * segment_height - height_half;\n\n    \t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\tvar x = ix * segment_width - width_half;\n\n    \t\t\tvertices[ offset ] = x;\n    \t\t\tvertices[ offset + 1 ] = - y;\n\n    \t\t\tnormals[ offset + 2 ] = 1;\n\n    \t\t\tuvs[ offset2 ] = ix / gridX;\n    \t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\toffset += 3;\n    \t\t\toffset2 += 2;\n\n    \t\t}\n\n    \t}\n\n    \toffset = 0;\n\n    \tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n    \tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n    \t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\tvar a = ix + gridX1 * iy;\n    \t\t\tvar b = ix + gridX1 * ( iy + 1 );\n    \t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\tindices[ offset ] = a;\n    \t\t\tindices[ offset + 1 ] = b;\n    \t\t\tindices[ offset + 2 ] = d;\n\n    \t\t\tindices[ offset + 3 ] = b;\n    \t\t\tindices[ offset + 4 ] = c;\n    \t\t\tindices[ offset + 5 ] = d;\n\n    \t\t\toffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function Camera() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Camera';\n\n    \tthis.matrixWorldInverse = new Matrix4();\n    \tthis.projectionMatrix = new Matrix4();\n\n    }\n\n    Camera.prototype = Object.create( Object3D.prototype );\n    Camera.prototype.constructor = Camera;\n\n    Camera.prototype.isCamera = true;\n\n    Camera.prototype.getWorldDirection = function () {\n\n    \tvar quaternion = new Quaternion();\n\n    \treturn function getWorldDirection( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.getWorldQuaternion( quaternion );\n\n    \t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t};\n\n    }();\n\n    Camera.prototype.lookAt = function () {\n\n    \t// This routine does not support cameras with rotated and/or translated parent(s)\n\n    \tvar m1 = new Matrix4();\n\n    \treturn function lookAt( vector ) {\n\n    \t\tm1.lookAt( this.position, vector, this.up );\n\n    \t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t};\n\n    }();\n\n    Camera.prototype.clone = function () {\n\n    \treturn new this.constructor().copy( this );\n\n    };\n\n    Camera.prototype.copy = function ( source ) {\n\n    \tObject3D.prototype.copy.call( this, source );\n\n    \tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n    \tthis.projectionMatrix.copy( source.projectionMatrix );\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author greggman / http://games.greggman.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author tschw\n     */\n\n    function PerspectiveCamera( fov, aspect, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'PerspectiveCamera';\n\n    \tthis.fov = fov !== undefined ? fov : 50;\n    \tthis.zoom = 1;\n\n    \tthis.near = near !== undefined ? near : 0.1;\n    \tthis.far = far !== undefined ? far : 2000;\n    \tthis.focus = 10;\n\n    \tthis.aspect = aspect !== undefined ? aspect : 1;\n    \tthis.view = null;\n\n    \tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n    \tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: PerspectiveCamera,\n\n    \tisPerspectiveCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.fov = source.fov;\n    \t\tthis.zoom = source.zoom;\n\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n    \t\tthis.focus = source.focus;\n\n    \t\tthis.aspect = source.aspect;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\tthis.filmGauge = source.filmGauge;\n    \t\tthis.filmOffset = source.filmOffset;\n\n    \t\treturn this;\n\n    \t},\n\n    \t/**\n    \t * Sets the FOV by focal length in respect to the current .filmGauge.\n    \t *\n    \t * The default film gauge is 35, so that the focal length can be specified for\n    \t * a 35mm (full frame) camera.\n    \t *\n    \t * Values for focal length and film gauge must have the same unit.\n    \t */\n    \tsetFocalLength: function ( focalLength ) {\n\n    \t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n    \t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n    \t\tthis.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \t/**\n    \t * Calculates the focal length from the current .fov and .filmGauge.\n    \t */\n    \tgetFocalLength: function () {\n\n    \t\tvar vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );\n\n    \t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n    \t},\n\n    \tgetEffectiveFOV: function () {\n\n    \t\treturn exports.Math.RAD2DEG * 2 * Math.atan(\n    \t\t\t\tMath.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n    \t},\n\n    \tgetFilmWidth: function () {\n\n    \t\t// film not completely covered in portrait format (aspect < 1)\n    \t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n    \t},\n\n    \tgetFilmHeight: function () {\n\n    \t\t// film not completely covered in landscape format (aspect > 1)\n    \t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n    \t},\n\n    \t/**\n    \t * Sets an offset in a larger frustum. This is useful for multi-window or\n    \t * multi-monitor/multi-machine setups.\n    \t *\n    \t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n    \t * the monitors are in grid like this\n    \t *\n    \t *   +---+---+---+\n    \t *   | A | B | C |\n    \t *   +---+---+---+\n    \t *   | D | E | F |\n    \t *   +---+---+---+\n    \t *\n    \t * then for each monitor you would call it like this\n    \t *\n    \t *   var w = 1920;\n    \t *   var h = 1080;\n    \t *   var fullWidth = w * 3;\n    \t *   var fullHeight = h * 2;\n    \t *\n    \t *   --A--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n    \t *   --B--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n    \t *   --C--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n    \t *   --D--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n    \t *   --E--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n    \t *   --F--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n    \t *\n    \t *   Note there is no reason monitors have to be the same size or in a grid.\n    \t */\n    \tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.aspect = fullWidth / fullHeight;\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar near = this.near,\n    \t\t\ttop = near * Math.tan(\n    \t\t\t\t\texports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n    \t\t\theight = 2 * top,\n    \t\t\twidth = this.aspect * height,\n    \t\t\tleft = - 0.5 * width,\n    \t\t\tview = this.view;\n\n    \t\tif ( view !== null ) {\n\n    \t\t\tvar fullWidth = view.fullWidth,\n    \t\t\t\tfullHeight = view.fullHeight;\n\n    \t\t\tleft += view.offsetX * width / fullWidth;\n    \t\t\ttop -= view.offsetY * height / fullHeight;\n    \t\t\twidth *= view.width / fullWidth;\n    \t\t\theight *= view.height / fullHeight;\n\n    \t\t}\n\n    \t\tvar skew = this.filmOffset;\n    \t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n    \t\tthis.projectionMatrix.makeFrustum(\n    \t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.fov = this.fov;\n    \t\tdata.object.zoom = this.zoom;\n\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n    \t\tdata.object.focus = this.focus;\n\n    \t\tdata.object.aspect = this.aspect;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\tdata.object.filmGauge = this.filmGauge;\n    \t\tdata.object.filmOffset = this.filmOffset;\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author arose / http://github.com/arose\n     */\n\n    function OrthographicCamera( left, right, top, bottom, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'OrthographicCamera';\n\n    \tthis.zoom = 1;\n    \tthis.view = null;\n\n    \tthis.left = left;\n    \tthis.right = right;\n    \tthis.top = top;\n    \tthis.bottom = bottom;\n\n    \tthis.near = ( near !== undefined ) ? near : 0.1;\n    \tthis.far = ( far !== undefined ) ? far : 2000;\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: OrthographicCamera,\n\n    \tisOrthographicCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.left = source.left;\n    \t\tthis.right = source.right;\n    \t\tthis.top = source.top;\n    \t\tthis.bottom = source.bottom;\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n\n    \t\tthis.zoom = source.zoom;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n    \t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n    \t\tvar cx = ( this.right + this.left ) / 2;\n    \t\tvar cy = ( this.top + this.bottom ) / 2;\n\n    \t\tvar left = cx - dx;\n    \t\tvar right = cx + dx;\n    \t\tvar top = cy + dy;\n    \t\tvar bottom = cy - dy;\n\n    \t\tif ( this.view !== null ) {\n\n    \t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n    \t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n    \t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n    \t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n    \t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n    \t\t\tright = left + scaleW * ( this.view.width / zoomW );\n    \t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n    \t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n    \t\t}\n\n    \t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.zoom = this.zoom;\n    \t\tdata.object.left = this.left;\n    \t\tdata.object.right = this.right;\n    \t\tdata.object.top = this.top;\n    \t\tdata.object.bottom = this.bottom;\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tvar type, size;\n\n    \tfunction setIndex( index ) {\n\n    \t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\t\ttype = gl.UNSIGNED_INT;\n    \t\t\tsize = 4;\n\n    \t\t} else {\n\n    \t\t\ttype = gl.UNSIGNED_SHORT;\n    \t\t\tsize = 2;\n\n    \t\t}\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawElements( mode, count, type, start * size );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry, start, count ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n\n    \t\tsetMode: setMode,\n    \t\tsetIndex: setIndex,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawArrays( mode, start, count );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar position = geometry.attributes.position;\n\n    \t\tvar count = 0;\n\n    \t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\n    \t\t\tcount = position.data.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t} else {\n\n    \t\t\tcount = position.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t}\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n    \t\tsetMode: setMode,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n    \t};\n\n    }\n\n    function WebGLLights() {\n\n    \tvar lights = {};\n\n    \treturn {\n\n    \t\tget: function ( light ) {\n\n    \t\t\tif ( lights[ light.id ] !== undefined ) {\n\n    \t\t\t\treturn lights[ light.id ];\n\n    \t\t\t}\n\n    \t\t\tvar uniforms;\n\n    \t\t\tswitch ( light.type ) {\n\n    \t\t\t\tcase 'DirectionalLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tconeCos: 0,\n    \t\t\t\t\t\tpenumbraCos: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tskyColor: new Color(),\n    \t\t\t\t\t\tgroundColor: new Color()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tlights[ light.id ] = uniforms;\n\n    \t\t\treturn uniforms;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function addLineNumbers( string ) {\n\n    \tvar lines = string.split( '\\n' );\n\n    \tfor ( var i = 0; i < lines.length; i ++ ) {\n\n    \t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n    \t}\n\n    \treturn lines.join( '\\n' );\n\n    }\n\n    function WebGLShader( gl, type, string ) {\n\n    \tvar shader = gl.createShader( type );\n\n    \tgl.shaderSource( shader, string );\n    \tgl.compileShader( shader );\n\n    \tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n    \t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n    \t}\n\n    \tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n    \t}\n\n    \t// --enable-privileged-webgl-extension\n    \t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n    \treturn shader;\n\n    }\n\n    var programIdCount = 0;\n\n    function getEncodingComponents( encoding ) {\n\n    \tswitch ( encoding ) {\n\n    \t\tcase LinearEncoding:\n    \t\t\treturn [ 'Linear','( value )' ];\n    \t\tcase sRGBEncoding:\n    \t\t\treturn [ 'sRGB','( value )' ];\n    \t\tcase RGBEEncoding:\n    \t\t\treturn [ 'RGBE','( value )' ];\n    \t\tcase RGBM7Encoding:\n    \t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n    \t\tcase RGBM16Encoding:\n    \t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n    \t\tcase RGBDEncoding:\n    \t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n    \t\tcase GammaEncoding:\n    \t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n    \t}\n\n    }\n\n    function getTexelDecodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n    }\n\n    function getTexelEncodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n    }\n\n    function getToneMappingFunction( functionName, toneMapping ) {\n\n    \tvar toneMappingName;\n\n    \tswitch ( toneMapping ) {\n\n    \t\tcase LinearToneMapping:\n    \t\t\ttoneMappingName = \"Linear\";\n    \t\t\tbreak;\n\n    \t\tcase ReinhardToneMapping:\n    \t\t\ttoneMappingName = \"Reinhard\";\n    \t\t\tbreak;\n\n    \t\tcase Uncharted2ToneMapping:\n    \t\t\ttoneMappingName = \"Uncharted2\";\n    \t\t\tbreak;\n\n    \t\tcase CineonToneMapping:\n    \t\t\ttoneMappingName = \"OptimizedCineon\";\n    \t\t\tbreak;\n\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n    \t}\n\n    \treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n    }\n\n    function generateExtensions( extensions, parameters, rendererExtensions ) {\n\n    \textensions = extensions || {};\n\n    \tvar chunks = [\n    \t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n    \t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n    \t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n    \t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n    \t];\n\n    \treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n    }\n\n    function generateDefines( defines ) {\n\n    \tvar chunks = [];\n\n    \tfor ( var name in defines ) {\n\n    \t\tvar value = defines[ name ];\n\n    \t\tif ( value === false ) continue;\n\n    \t\tchunks.push( '#define ' + name + ' ' + value );\n\n    \t}\n\n    \treturn chunks.join( '\\n' );\n\n    }\n\n    function fetchAttributeLocations( gl, program, identifiers ) {\n\n    \tvar attributes = {};\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n    \tfor ( var i = 0; i < n; i ++ ) {\n\n    \t\tvar info = gl.getActiveAttrib( program, i );\n    \t\tvar name = info.name;\n\n    \t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n    \t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n    \t}\n\n    \treturn attributes;\n\n    }\n\n    function filterEmptyLine( string ) {\n\n    \treturn string !== '';\n\n    }\n\n    function replaceLightNums( string, parameters ) {\n\n    \treturn string\n    \t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n    \t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n    \t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n    \t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n    }\n\n    function parseIncludes( string ) {\n\n    \tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n    \tfunction replace( match, include ) {\n\n    \t\tvar replace = ShaderChunk[ include ];\n\n    \t\tif ( replace === undefined ) {\n\n    \t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n    \t\t}\n\n    \t\treturn parseIncludes( replace );\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function unrollLoops( string ) {\n\n    \tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n    \tfunction replace( match, start, end, snippet ) {\n\n    \t\tvar unroll = '';\n\n    \t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n    \t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n    \t\t}\n\n    \t\treturn unroll;\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function WebGLProgram( renderer, code, material, parameters ) {\n\n    \tvar gl = renderer.context;\n\n    \tvar extensions = material.extensions;\n    \tvar defines = material.defines;\n\n    \tvar vertexShader = material.__webglShader.vertexShader;\n    \tvar fragmentShader = material.__webglShader.fragmentShader;\n\n    \tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n    \tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n    \t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n    \t}\n\n    \tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n    \tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n    \tif ( parameters.envMap ) {\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeReflectionMapping:\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \t\t\t\tbreak;\n\n    \t\t\tcase CubeUVReflectionMapping:\n    \t\t\tcase CubeUVRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n    \t\t\t\tbreak;\n\n    \t\t\tcase EquirectangularReflectionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n    \t\t\t\tbreak;\n\n    \t\t\tcase SphericalReflectionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.combine ) {\n\n    \t\t\tcase MultiplyOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n    \t\t\t\tbreak;\n\n    \t\t\tcase MixOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n    \t\t\t\tbreak;\n\n    \t\t\tcase AddOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t}\n\n    \tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n    \t// console.log( 'building new program ' );\n\n    \t//\n\n    \tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n    \tvar customDefines = generateDefines( defines );\n\n    \t//\n\n    \tvar program = gl.createProgram();\n\n    \tvar prefixVertex, prefixFragment;\n\n    \tif ( material.isRawShaderMaterial ) {\n\n    \t\tprefixVertex = [\n\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t} else {\n\n    \t\tprefixVertex = [\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n    \t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n    \t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n    \t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\t'uniform mat4 modelMatrix;',\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform mat3 normalMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t'attribute vec3 position;',\n    \t\t\t'attribute vec3 normal;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'#ifdef USE_COLOR',\n\n    \t\t\t'\tattribute vec3 color;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_MORPHTARGETS',\n\n    \t\t\t'\tattribute vec3 morphTarget0;',\n    \t\t\t'\tattribute vec3 morphTarget1;',\n    \t\t\t'\tattribute vec3 morphTarget2;',\n    \t\t\t'\tattribute vec3 morphTarget3;',\n\n    \t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n    \t\t\t'\t\tattribute vec3 morphNormal0;',\n    \t\t\t'\t\tattribute vec3 morphNormal1;',\n    \t\t\t'\t\tattribute vec3 morphNormal2;',\n    \t\t\t'\t\tattribute vec3 morphNormal3;',\n\n    \t\t\t'\t#else',\n\n    \t\t\t'\t\tattribute vec3 morphTarget4;',\n    \t\t\t'\t\tattribute vec3 morphTarget5;',\n    \t\t\t'\t\tattribute vec3 morphTarget6;',\n    \t\t\t'\t\tattribute vec3 morphTarget7;',\n\n    \t\t\t'\t#endif',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_SKINNING',\n\n    \t\t\t'\tattribute vec4 skinIndex;',\n    \t\t\t'\tattribute vec4 skinWeight;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n    \t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n    \t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n    \t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n    \t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n    \t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n    \t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n    \t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n    \t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t}\n\n    \tvertexShader = parseIncludes( vertexShader, parameters );\n    \tvertexShader = replaceLightNums( vertexShader, parameters );\n\n    \tfragmentShader = parseIncludes( fragmentShader, parameters );\n    \tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n    \tif ( ! material.isShaderMaterial ) {\n\n    \t\tvertexShader = unrollLoops( vertexShader );\n    \t\tfragmentShader = unrollLoops( fragmentShader );\n\n    \t}\n\n    \tvar vertexGlsl = prefixVertex + vertexShader;\n    \tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n    \t// console.log( '*VERTEX*', vertexGlsl );\n    \t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n    \tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n    \tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n    \tgl.attachShader( program, glVertexShader );\n    \tgl.attachShader( program, glFragmentShader );\n\n    \t// Force a particular attribute to index 0.\n\n    \tif ( material.index0AttributeName !== undefined ) {\n\n    \t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n    \t} else if ( parameters.morphTargets === true ) {\n\n    \t\t// programs with morphTargets displace position out of attribute 0\n    \t\tgl.bindAttribLocation( program, 0, 'position' );\n\n    \t}\n\n    \tgl.linkProgram( program );\n\n    \tvar programLog = gl.getProgramInfoLog( program );\n    \tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n    \tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n    \tvar runnable = true;\n    \tvar haveDiagnostics = true;\n\n    \t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n    \t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n    \tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n    \t\trunnable = false;\n\n    \t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n    \t} else if ( programLog !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n    \t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n    \t\thaveDiagnostics = false;\n\n    \t}\n\n    \tif ( haveDiagnostics ) {\n\n    \t\tthis.diagnostics = {\n\n    \t\t\trunnable: runnable,\n    \t\t\tmaterial: material,\n\n    \t\t\tprogramLog: programLog,\n\n    \t\t\tvertexShader: {\n\n    \t\t\t\tlog: vertexLog,\n    \t\t\t\tprefix: prefixVertex\n\n    \t\t\t},\n\n    \t\t\tfragmentShader: {\n\n    \t\t\t\tlog: fragmentLog,\n    \t\t\t\tprefix: prefixFragment\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t// clean up\n\n    \tgl.deleteShader( glVertexShader );\n    \tgl.deleteShader( glFragmentShader );\n\n    \t// set up caching for uniform locations\n\n    \tvar cachedUniforms;\n\n    \tthis.getUniforms = function() {\n\n    \t\tif ( cachedUniforms === undefined ) {\n\n    \t\t\tcachedUniforms =\n    \t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\n    \t\t}\n\n    \t\treturn cachedUniforms;\n\n    \t};\n\n    \t// set up caching for attribute locations\n\n    \tvar cachedAttributes;\n\n    \tthis.getAttributes = function() {\n\n    \t\tif ( cachedAttributes === undefined ) {\n\n    \t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n    \t\t}\n\n    \t\treturn cachedAttributes;\n\n    \t};\n\n    \t// free resource\n\n    \tthis.destroy = function() {\n\n    \t\tgl.deleteProgram( program );\n    \t\tthis.program = undefined;\n\n    \t};\n\n    \t// DEPRECATED\n\n    \tObject.defineProperties( this, {\n\n    \t\tuniforms: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n    \t\t\t\treturn this.getUniforms();\n\n    \t\t\t}\n    \t\t},\n\n    \t\tattributes: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n    \t\t\t\treturn this.getAttributes();\n\n    \t\t\t}\n    \t\t}\n\n    \t} );\n\n\n    \t//\n\n    \tthis.id = programIdCount ++;\n    \tthis.code = code;\n    \tthis.usedTimes = 1;\n    \tthis.program = program;\n    \tthis.vertexShader = glVertexShader;\n    \tthis.fragmentShader = glFragmentShader;\n\n    \treturn this;\n\n    }\n\n    function WebGLPrograms( renderer, capabilities ) {\n\n    \tvar programs = [];\n\n    \tvar shaderIDs = {\n    \t\tMeshDepthMaterial: 'depth',\n    \t\tMeshNormalMaterial: 'normal',\n    \t\tMeshBasicMaterial: 'basic',\n    \t\tMeshLambertMaterial: 'lambert',\n    \t\tMeshPhongMaterial: 'phong',\n    \t\tMeshStandardMaterial: 'physical',\n    \t\tMeshPhysicalMaterial: 'physical',\n    \t\tLineBasicMaterial: 'basic',\n    \t\tLineDashedMaterial: 'dashed',\n    \t\tPointsMaterial: 'points'\n    \t};\n\n    \tvar parameterNames = [\n    \t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n    \t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n    \t\t\"roughnessMap\", \"metalnessMap\",\n    \t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n    \t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n    \t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n    \t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n    \t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n    \t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n    \t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n    \t];\n\n\n    \tfunction allocateBones( object ) {\n\n    \t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n    \t\t\treturn 1024;\n\n    \t\t} else {\n\n    \t\t\t// default for when object is not specified\n    \t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n    \t\t\t//\n    \t\t\t//  - leave some extra space for other uniforms\n    \t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n    \t\t\t//    (up to 54 should be safe)\n\n    \t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n    \t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n    \t\t\tvar maxBones = nVertexMatrices;\n\n    \t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\n    \t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n    \t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n    \t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn maxBones;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n    \t\tvar encoding;\n\n    \t\tif ( ! map ) {\n\n    \t\t\tencoding = LinearEncoding;\n\n    \t\t} else if ( (map && map.isTexture) ) {\n\n    \t\t\tencoding = map.encoding;\n\n    \t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\n    \t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\tencoding = map.texture.encoding;\n\n    \t\t}\n\n    \t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n    \t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n    \t\t\tencoding = GammaEncoding;\n\n    \t\t}\n\n    \t\treturn encoding;\n\n    \t}\n\n    \tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n    \t\tvar shaderID = shaderIDs[ material.type ];\n\n    \t\t// heuristics to create shader parameters according to lights in the scene\n    \t\t// (not to blow over maxLights budget)\n\n    \t\tvar maxBones = allocateBones( object );\n    \t\tvar precision = renderer.getPrecision();\n\n    \t\tif ( material.precision !== null ) {\n\n    \t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n    \t\t\tif ( precision !== material.precision ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n    \t\tvar parameters = {\n\n    \t\t\tshaderID: shaderID,\n\n    \t\t\tprecision: precision,\n    \t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n    \t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n    \t\t\tmap: !! material.map,\n    \t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n    \t\t\tenvMap: !! material.envMap,\n    \t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n    \t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n    \t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n    \t\t\tlightMap: !! material.lightMap,\n    \t\t\taoMap: !! material.aoMap,\n    \t\t\temissiveMap: !! material.emissiveMap,\n    \t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n    \t\t\tbumpMap: !! material.bumpMap,\n    \t\t\tnormalMap: !! material.normalMap,\n    \t\t\tdisplacementMap: !! material.displacementMap,\n    \t\t\troughnessMap: !! material.roughnessMap,\n    \t\t\tmetalnessMap: !! material.metalnessMap,\n    \t\t\tspecularMap: !! material.specularMap,\n    \t\t\talphaMap: !! material.alphaMap,\n\n    \t\t\tcombine: material.combine,\n\n    \t\t\tvertexColors: material.vertexColors,\n\n    \t\t\tfog: !! fog,\n    \t\t\tuseFog: material.fog,\n    \t\t\tfogExp: (fog && fog.isFogExp2),\n\n    \t\t\tflatShading: material.shading === FlatShading,\n\n    \t\t\tsizeAttenuation: material.sizeAttenuation,\n    \t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n    \t\t\tskinning: material.skinning,\n    \t\t\tmaxBones: maxBones,\n    \t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n    \t\t\tmorphTargets: material.morphTargets,\n    \t\t\tmorphNormals: material.morphNormals,\n    \t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n    \t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n    \t\t\tnumDirLights: lights.directional.length,\n    \t\t\tnumPointLights: lights.point.length,\n    \t\t\tnumSpotLights: lights.spot.length,\n    \t\t\tnumHemiLights: lights.hemi.length,\n\n    \t\t\tnumClippingPlanes: nClipPlanes,\n\n    \t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n    \t\t\tshadowMapType: renderer.shadowMap.type,\n\n    \t\t\ttoneMapping: renderer.toneMapping,\n    \t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n    \t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n    \t\t\talphaTest: material.alphaTest,\n    \t\t\tdoubleSided: material.side === DoubleSide,\n    \t\t\tflipSided: material.side === BackSide,\n\n    \t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n    \t\t};\n\n    \t\treturn parameters;\n\n    \t};\n\n    \tthis.getProgramCode = function ( material, parameters ) {\n\n    \t\tvar array = [];\n\n    \t\tif ( parameters.shaderID ) {\n\n    \t\t\tarray.push( parameters.shaderID );\n\n    \t\t} else {\n\n    \t\t\tarray.push( material.fragmentShader );\n    \t\t\tarray.push( material.vertexShader );\n\n    \t\t}\n\n    \t\tif ( material.defines !== undefined ) {\n\n    \t\t\tfor ( var name in material.defines ) {\n\n    \t\t\t\tarray.push( name );\n    \t\t\t\tarray.push( material.defines[ name ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n    \t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n    \t\t}\n\n    \t\treturn array.join();\n\n    \t};\n\n    \tthis.acquireProgram = function ( material, parameters, code ) {\n\n    \t\tvar program;\n\n    \t\t// Check if code has been already compiled\n    \t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n    \t\t\tvar programInfo = programs[ p ];\n\n    \t\t\tif ( programInfo.code === code ) {\n\n    \t\t\t\tprogram = programInfo;\n    \t\t\t\t++ program.usedTimes;\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n    \t\t\tprograms.push( program );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t};\n\n    \tthis.releaseProgram = function( program ) {\n\n    \t\tif ( -- program.usedTimes === 0 ) {\n\n    \t\t\t// Remove from unordered set\n    \t\t\tvar i = programs.indexOf( program );\n    \t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n    \t\t\tprograms.pop();\n\n    \t\t\t// Free WebGL resources\n    \t\t\tprogram.destroy();\n\n    \t\t}\n\n    \t};\n\n    \t// Exposed for resource monitoring & error feedback via renderer.info:\n    \tthis.programs = programs;\n\n    }\n\n    function WebGLGeometries( gl, properties, info ) {\n\n    \tvar geometries = {};\n\n    \tfunction onGeometryDispose( event ) {\n\n    \t\tvar geometry = event.target;\n    \t\tvar buffergeometry = geometries[ geometry.id ];\n\n    \t\tif ( buffergeometry.index !== null ) {\n\n    \t\t\tdeleteAttribute( buffergeometry.index );\n\n    \t\t}\n\n    \t\tdeleteAttributes( buffergeometry.attributes );\n\n    \t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n    \t\tdelete geometries[ geometry.id ];\n\n    \t\t// TODO\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe ) {\n\n    \t\t\tdeleteAttribute( property.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( geometry );\n\n    \t\tvar bufferproperty = properties.get( buffergeometry );\n\n    \t\tif ( bufferproperty.wireframe ) {\n\n    \t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( buffergeometry );\n\n    \t\t//\n\n    \t\tinfo.memory.geometries --;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction deleteAttribute( attribute ) {\n\n    \t\tvar buffer = getAttributeBuffer( attribute );\n\n    \t\tif ( buffer !== undefined ) {\n\n    \t\t\tgl.deleteBuffer( buffer );\n    \t\t\tremoveAttributeBuffer( attribute );\n\n    \t\t}\n\n    \t}\n\n    \tfunction deleteAttributes( attributes ) {\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tdeleteAttribute( attributes[ name ] );\n\n    \t\t}\n\n    \t}\n\n    \tfunction removeAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\tproperties.delete( attribute.data );\n\n    \t\t} else {\n\n    \t\t\tproperties.delete( attribute );\n\n    \t\t}\n\n    \t}\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n    \t\t\t\treturn geometries[ geometry.id ];\n\n    \t\t\t}\n\n    \t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n    \t\t\tvar buffergeometry;\n\n    \t\t\tif ( geometry.isBufferGeometry ) {\n\n    \t\t\t\tbuffergeometry = geometry;\n\n    \t\t\t} else if ( geometry.isGeometry ) {\n\n    \t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n    \t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n    \t\t\t\t}\n\n    \t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n    \t\t\t}\n\n    \t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n    \t\t\tinfo.memory.geometries ++;\n\n    \t\t\treturn buffergeometry;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLObjects( gl, properties, info ) {\n\n    \tvar geometries = new WebGLGeometries( gl, properties, info );\n\n    \t//\n\n    \tfunction update( object ) {\n\n    \t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n    \t\tvar geometry = geometries.get( object );\n\n    \t\tif ( object.geometry.isGeometry ) {\n\n    \t\t\tgeometry.updateFromObject( object );\n\n    \t\t}\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\tfor ( var name in morphAttributes ) {\n\n    \t\t\tvar array = morphAttributes[ name ];\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n    \t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    \tfunction updateAttribute( attribute, bufferType ) {\n\n    \t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\n    \t\tvar attributeProperties = properties.get( data );\n\n    \t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n    \t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n    \t\t} else if ( attributeProperties.version !== data.version ) {\n\n    \t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n    \t\t}\n\n    \t}\n\n    \tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tattributeProperties.__webglBuffer = gl.createBuffer();\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n    \t\tgl.bufferData( bufferType, data.array, usage );\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n    \t\t\t// Not using update ranges\n\n    \t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n    \t\t} else if ( data.updateRange.count === 0 ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n    \t\t} else {\n\n    \t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n    \t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n    \t\t\tdata.updateRange.count = 0; // reset range\n\n    \t\t}\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction getWireframeAttribute( geometry ) {\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe !== undefined ) {\n\n    \t\t\treturn property.wireframe;\n\n    \t\t}\n\n    \t\tvar indices = [];\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n    \t\tvar position = attributes.position;\n\n    \t\t// console.time( 'wireframe' );\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar edges = {};\n    \t\t\tvar array = index.array;\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = array[ i + 0 ];\n    \t\t\t\tvar b = array[ i + 1 ];\n    \t\t\t\tvar c = array[ i + 2 ];\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar array = attributes.position.array;\n\n    \t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = i + 0;\n    \t\t\t\tvar b = i + 1;\n    \t\t\t\tvar c = i + 2;\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// console.timeEnd( 'wireframe' );\n\n    \t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n    \t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\n    \t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\tproperty.wireframe = attribute;\n\n    \t\treturn attribute;\n\n    \t}\n\n    \treturn {\n\n    \t\tgetAttributeBuffer: getAttributeBuffer,\n    \t\tgetWireframeAttribute: getWireframeAttribute,\n\n    \t\tupdate: update\n\n    \t};\n\n    }\n\n    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n    \tvar _infoMemory = info.memory;\n    \tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n    \t//\n\n    \tfunction clampToMaxSize( image, maxSize ) {\n\n    \t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n    \t\t\t// Warning: Scaling through the canvas will only work with images that use\n    \t\t\t// premultiplied alpha.\n\n    \t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = Math.floor( image.width * scale );\n    \t\t\tcanvas.height = Math.floor( image.height * scale );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction isPowerOfTwo( image ) {\n\n    \t\treturn exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );\n\n    \t}\n\n    \tfunction makePowerOfTwo( image ) {\n\n    \t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = exports.Math.nearestPowerOfTwo( image.width );\n    \t\t\tcanvas.height = exports.Math.nearestPowerOfTwo( image.height );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction textureNeedsPowerOfTwo( texture ) {\n\n    \t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n    \t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\n    \t\treturn false;\n\n    \t}\n\n    \t// Fallback filters for non-power-of-2 textures\n\n    \tfunction filterFallback( f ) {\n\n    \t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n    \t\t\treturn _gl.NEAREST;\n\n    \t\t}\n\n    \t\treturn _gl.LINEAR;\n\n    \t}\n\n    \t//\n\n    \tfunction onTextureDispose( event ) {\n\n    \t\tvar texture = event.target;\n\n    \t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n    \t\tdeallocateTexture( texture );\n\n    \t\t_infoMemory.textures --;\n\n\n    \t}\n\n    \tfunction onRenderTargetDispose( event ) {\n\n    \t\tvar renderTarget = event.target;\n\n    \t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\tdeallocateRenderTarget( renderTarget );\n\n    \t\t_infoMemory.textures --;\n\n    \t}\n\n    \t//\n\n    \tfunction deallocateTexture( texture ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t// cube texture\n\n    \t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n    \t\t} else {\n\n    \t\t\t// 2D texture\n\n    \t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\t// remove all webgl properties\n    \t\tproperties.delete( texture );\n\n    \t}\n\n    \tfunction deallocateRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\tif ( ! renderTarget ) return;\n\n    \t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\trenderTarget.depthTexture.dispose();\n\n    \t\t}\n\n    \t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n    \t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n    \t\t}\n\n    \t\tproperties.delete( renderTarget.texture );\n    \t\tproperties.delete( renderTarget );\n\n    \t}\n\n    \t//\n\n\n\n    \tfunction setTexture2D( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\tvar image = texture.image;\n\n    \t\t\tif ( image === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n    \t\t\t} else if ( image.complete === false ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tuploadTexture( textureProperties, texture, slot );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t}\n\n    \tfunction setTextureCube( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image.length === 6 ) {\n\n    \t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n    \t\t\t\t\t_infoMemory.textures ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n    \t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n    \t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\n    \t\t\t\tvar cubeImage = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n    \t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tvar image = cubeImage[ 0 ],\n    \t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\t\t\tglFormat = paramThreeToGL( texture.format ),\n    \t\t\t\tglType = paramThreeToGL( texture.type );\n\n    \t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed ) {\n\n    \t\t\t\t\t\tif ( isDataTexture ) {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n    \t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n    \t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n    \t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n    \t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n    \t\t\t\t}\n\n    \t\t\t\ttextureProperties.__version = texture.version;\n\n    \t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction setTextureCubeDynamic( texture, slot ) {\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n    \t}\n\n    \tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n    \t\tvar extension;\n\n    \t\tif ( isPowerOfTwoImage ) {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n    \t\t} else {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n    \t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n    \t\t\t}\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n    \t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension ) {\n\n    \t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n    \t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n    \t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n    \t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n    \t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction uploadTexture( textureProperties, texture, slot ) {\n\n    \t\tif ( textureProperties.__webglInit === undefined ) {\n\n    \t\t\ttextureProperties.__webglInit = true;\n\n    \t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t\t_infoMemory.textures ++;\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n    \t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n    \t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n    \t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n    \t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n    \t\t\timage = makePowerOfTwo( image );\n\n    \t\t}\n\n    \t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\tglFormat = paramThreeToGL( texture.format ),\n    \t\tglType = paramThreeToGL( texture.type );\n\n    \t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n    \t\tvar mipmap, mipmaps = texture.mipmaps;\n\n    \t\tif ( (texture && texture.isDepthTexture) ) {\n\n    \t\t\t// populate depth texture with dummy data\n\n    \t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n    \t\t\tif ( texture.type === FloatType ) {\n\n    \t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n    \t\t\t} else if ( _isWebGL2 ) {\n\n    \t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n    \t\t\t}\n\n    \t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n    \t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n    \t\t\tif ( texture.format === DepthStencilFormat ) {\n\n    \t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n    \t\t\t}\n\n    \t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n    \t\t} else if ( (texture && texture.isDataTexture) ) {\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n    \t\t\t}\n\n    \t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\n    \t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\tmipmap = mipmaps[ i ];\n\n    \t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// regular Texture (image, video, canvas)\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n    \t\ttextureProperties.__version = texture.version;\n\n    \t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t}\n\n    \t// Render targets\n\n    \t// Setup storage for target texture and bind it to correct framebuffer\n    \tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n    \t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n    \t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n    \t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    \tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n    \t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else {\n\n    \t\t\t// FIXME: We don't support !depth !stencil\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n    \t\t}\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n    \t}\n\n    \t// Setup resources for a Depth Texture for a FBO (needs an extension)\n    \tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\n    \t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n    \t\t}\n\n    \t\t// upload an empty depth texture with framebuffer size\n    \t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n    \t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n    \t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n    \t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n    \t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n    \t\t\trenderTarget.depthTexture.needsUpdate = true;\n    \t\t}\n\n    \t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n    \t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n    \t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else {\n\n    \t\t\tthrow new Error('Unknown depthTexture format')\n\n    \t\t}\n\n    \t}\n\n    \t// Setup GL resources for a non-texture depth buffer\n    \tfunction setupDepthRenderbuffer( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n    \t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n    \t\t} else {\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n    \t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n    \t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Set up GL resources for the render target\n    \tfunction setupRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t_infoMemory.textures ++;\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n    \t\t// Setup framebuffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n    \t\t}\n\n    \t\t// Setup color buffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n    \t\t\t}\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n    \t\t} else {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n    \t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n    \t\t}\n\n    \t\t// Setup depth and stencil buffers\n\n    \t\tif ( renderTarget.depthBuffer ) {\n\n    \t\t\tsetupDepthRenderbuffer( renderTarget );\n\n    \t\t}\n\n    \t}\n\n    \tfunction updateRenderTargetMipmap( renderTarget ) {\n\n    \t\tvar texture = renderTarget.texture;\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n    \t\t\t\ttexture.minFilter !== NearestFilter &&\n    \t\t\t\ttexture.minFilter !== LinearFilter ) {\n\n    \t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n    \t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n    \t\t\tstate.bindTexture( target, webglTexture );\n    \t\t\t_gl.generateMipmap( target );\n    \t\t\tstate.bindTexture( target, null );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setTexture2D = setTexture2D;\n    \tthis.setTextureCube = setTextureCube;\n    \tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n    \tthis.setupRenderTarget = setupRenderTarget;\n    \tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n    }\n\n    /**\n     * @author fordacious / fordacious.github.io\n     */\n\n    function WebGLProperties() {\n\n    \tvar properties = {};\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar uuid = object.uuid;\n    \t\t\tvar map = properties[ uuid ];\n\n    \t\t\tif ( map === undefined ) {\n\n    \t\t\t\tmap = {};\n    \t\t\t\tproperties[ uuid ] = map;\n\n    \t\t\t}\n\n    \t\t\treturn map;\n\n    \t\t},\n\n    \t\tdelete: function ( object ) {\n\n    \t\t\tdelete properties[ object.uuid ];\n\n    \t\t},\n\n    \t\tclear: function () {\n\n    \t\t\tproperties = {};\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLState( gl, extensions, paramThreeToGL ) {\n\n    \tfunction ColorBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar color = new Vector4();\n    \t\tvar currentColorMask = null;\n    \t\tvar currentColorClear = new Vector4();\n\n    \t\treturn {\n\n    \t\t\tsetMask: function ( colorMask ) {\n\n    \t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n    \t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n    \t\t\t\t\tcurrentColorMask = colorMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( r, g, b, a ) {\n\n    \t\t\t\tcolor.set( r, g, b, a );\n\n    \t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n    \t\t\t\t\tgl.clearColor( r, g, b, a );\n    \t\t\t\t\tcurrentColorClear.copy( color );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentColorMask = null;\n    \t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction DepthBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentDepthMask = null;\n    \t\tvar currentDepthFunc = null;\n    \t\tvar currentDepthClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( depthTest ) {\n\n    \t\t\t\tif ( depthTest ) {\n\n    \t\t\t\t\tenable( gl.DEPTH_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( depthMask ) {\n\n    \t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n    \t\t\t\t\tgl.depthMask( depthMask );\n    \t\t\t\t\tcurrentDepthMask = depthMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( depthFunc ) {\n\n    \t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n    \t\t\t\t\tif ( depthFunc ) {\n\n    \t\t\t\t\t\tswitch ( depthFunc ) {\n\n    \t\t\t\t\t\t\tcase NeverDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase AlwaysDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase EqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase NotEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( depth ) {\n\n    \t\t\t\tif ( currentDepthClear !== depth ) {\n\n    \t\t\t\t\tgl.clearDepth( depth );\n    \t\t\t\t\tcurrentDepthClear = depth;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentDepthMask = null;\n    \t\t\t\tcurrentDepthFunc = null;\n    \t\t\t\tcurrentDepthClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction StencilBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentStencilMask = null;\n    \t\tvar currentStencilFunc = null;\n    \t\tvar currentStencilRef = null;\n    \t\tvar currentStencilFuncMask = null;\n    \t\tvar currentStencilFail  = null;\n    \t\tvar currentStencilZFail = null;\n    \t\tvar currentStencilZPass = null;\n    \t\tvar currentStencilClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( stencilTest ) {\n\n    \t\t\t\tif ( stencilTest ) {\n\n    \t\t\t\t\tenable( gl.STENCIL_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( stencilMask ) {\n\n    \t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n    \t\t\t\t\tgl.stencilMask( stencilMask );\n    \t\t\t\t\tcurrentStencilMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n    \t\t\t\t     currentStencilRef \t!== stencilRef \t||\n    \t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n    \t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n    \t\t\t\t\tcurrentStencilFunc = stencilFunc;\n    \t\t\t\t\tcurrentStencilRef  = stencilRef;\n    \t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n    \t\t\t\t     currentStencilZFail !== stencilZFail ||\n    \t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n    \t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n    \t\t\t\t\tcurrentStencilFail  = stencilFail;\n    \t\t\t\t\tcurrentStencilZFail = stencilZFail;\n    \t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( stencil ) {\n\n    \t\t\t\tif ( currentStencilClear !== stencil ) {\n\n    \t\t\t\t\tgl.clearStencil( stencil );\n    \t\t\t\t\tcurrentStencilClear = stencil;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentStencilMask = null;\n    \t\t\t\tcurrentStencilFunc = null;\n    \t\t\t\tcurrentStencilRef = null;\n    \t\t\t\tcurrentStencilFuncMask = null;\n    \t\t\t\tcurrentStencilFail = null;\n    \t\t\t\tcurrentStencilZFail = null;\n    \t\t\t\tcurrentStencilZPass = null;\n    \t\t\t\tcurrentStencilClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t//\n\n    \tvar colorBuffer = new ColorBuffer();\n    \tvar depthBuffer = new DepthBuffer();\n    \tvar stencilBuffer = new StencilBuffer();\n\n    \tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar newAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n    \tvar capabilities = {};\n\n    \tvar compressedTextureFormats = null;\n\n    \tvar currentBlending = null;\n    \tvar currentBlendEquation = null;\n    \tvar currentBlendSrc = null;\n    \tvar currentBlendDst = null;\n    \tvar currentBlendEquationAlpha = null;\n    \tvar currentBlendSrcAlpha = null;\n    \tvar currentBlendDstAlpha = null;\n    \tvar currentPremultipledAlpha = false;\n\n    \tvar currentFlipSided = null;\n    \tvar currentCullFace = null;\n\n    \tvar currentLineWidth = null;\n\n    \tvar currentPolygonOffsetFactor = null;\n    \tvar currentPolygonOffsetUnits = null;\n\n    \tvar currentScissorTest = null;\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n    \tvar currentTextureSlot = null;\n    \tvar currentBoundTextures = {};\n\n    \tvar currentScissor = new Vector4();\n    \tvar currentViewport = new Vector4();\n\n    \tfunction createTexture( type, target, count ) {\n\n    \t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n    \t\tvar texture = gl.createTexture();\n\n    \t\tgl.bindTexture( type, texture );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n    \t\tfor ( var i = 0; i < count; i ++ ) {\n\n    \t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t}\n\n    \tvar emptyTextures = {};\n    \temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n    \temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n    \t//\n\n    \tfunction init() {\n\n    \t\tclearColor( 0, 0, 0, 1 );\n    \t\tclearDepth( 1 );\n    \t\tclearStencil( 0 );\n\n    \t\tenable( gl.DEPTH_TEST );\n    \t\tsetDepthFunc( LessEqualDepth );\n\n    \t\tsetFlipSided( false );\n    \t\tsetCullFace( CullFaceBack );\n    \t\tenable( gl.CULL_FACE );\n\n    \t\tenable( gl.BLEND );\n    \t\tsetBlending( NormalBlending );\n\n    \t}\n\n    \tfunction initAttributes() {\n\n    \t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n    \t\t\tnewAttributes[ i ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttribute( attribute ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n    \t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n    \t\t\tattributeDivisors[ attribute ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n    \t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disableUnusedAttributes() {\n\n    \t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n    \t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction enable( id ) {\n\n    \t\tif ( capabilities[ id ] !== true ) {\n\n    \t\t\tgl.enable( id );\n    \t\t\tcapabilities[ id ] = true;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disable( id ) {\n\n    \t\tif ( capabilities[ id ] !== false ) {\n\n    \t\t\tgl.disable( id );\n    \t\t\tcapabilities[ id ] = false;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getCompressedTextureFormats() {\n\n    \t\tif ( compressedTextureFormats === null ) {\n\n    \t\t\tcompressedTextureFormats = [];\n\n    \t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n    \t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n    \t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n    \t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn compressedTextureFormats;\n\n    \t}\n\n    \tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n    \t\tif ( blending !== NoBlending ) {\n\n    \t\t\tenable( gl.BLEND );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.BLEND );\n    \t\t\tcurrentBlending = blending; // no blending, that is\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n    \t\t\tif ( blending === AdditiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === SubtractiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === MultiplyBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tcurrentBlending = blending;\n    \t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n    \t\t}\n\n    \t\tif ( blending === CustomBlending ) {\n\n    \t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n    \t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n    \t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n    \t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n    \t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n    \t\t\t\tcurrentBlendEquation = blendEquation;\n    \t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n    \t\t\t}\n\n    \t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n    \t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n    \t\t\t\tcurrentBlendSrc = blendSrc;\n    \t\t\t\tcurrentBlendDst = blendDst;\n    \t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n    \t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tcurrentBlendEquation = null;\n    \t\t\tcurrentBlendSrc = null;\n    \t\t\tcurrentBlendDst = null;\n    \t\t\tcurrentBlendEquationAlpha = null;\n    \t\t\tcurrentBlendSrcAlpha = null;\n    \t\t\tcurrentBlendDstAlpha = null;\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction setColorWrite( colorWrite ) {\n\n    \t\tcolorBuffer.setMask( colorWrite );\n\n    \t}\n\n    \tfunction setDepthTest( depthTest ) {\n\n    \t\tdepthBuffer.setTest( depthTest );\n\n    \t}\n\n    \tfunction setDepthWrite( depthWrite ) {\n\n    \t\tdepthBuffer.setMask( depthWrite );\n\n    \t}\n\n    \tfunction setDepthFunc( depthFunc ) {\n\n    \t\tdepthBuffer.setFunc( depthFunc );\n\n    \t}\n\n    \tfunction setStencilTest( stencilTest ) {\n\n    \t\tstencilBuffer.setTest( stencilTest );\n\n    \t}\n\n    \tfunction setStencilWrite( stencilWrite ) {\n\n    \t\tstencilBuffer.setMask( stencilWrite );\n\n    \t}\n\n    \tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\n    \t}\n\n    \tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\n    \t}\n\n    \t//\n\n    \tfunction setFlipSided( flipSided ) {\n\n    \t\tif ( currentFlipSided !== flipSided ) {\n\n    \t\t\tif ( flipSided ) {\n\n    \t\t\t\tgl.frontFace( gl.CW );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.frontFace( gl.CCW );\n\n    \t\t\t}\n\n    \t\t\tcurrentFlipSided = flipSided;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setCullFace( cullFace ) {\n\n    \t\tif ( cullFace !== CullFaceNone ) {\n\n    \t\t\tenable( gl.CULL_FACE );\n\n    \t\t\tif ( cullFace !== currentCullFace ) {\n\n    \t\t\t\tif ( cullFace === CullFaceBack ) {\n\n    \t\t\t\t\tgl.cullFace( gl.BACK );\n\n    \t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.CULL_FACE );\n\n    \t\t}\n\n    \t\tcurrentCullFace = cullFace;\n\n    \t}\n\n    \tfunction setLineWidth( width ) {\n\n    \t\tif ( width !== currentLineWidth ) {\n\n    \t\t\tgl.lineWidth( width );\n\n    \t\t\tcurrentLineWidth = width;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n    \t\tif ( polygonOffset ) {\n\n    \t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n    \t\t\t\tgl.polygonOffset( factor, units );\n\n    \t\t\t\tcurrentPolygonOffsetFactor = factor;\n    \t\t\t\tcurrentPolygonOffsetUnits = units;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t}\n\n    \t}\n\n    \tfunction getScissorTest() {\n\n    \t\treturn currentScissorTest;\n\n    \t}\n\n    \tfunction setScissorTest( scissorTest ) {\n\n    \t\tcurrentScissorTest = scissorTest;\n\n    \t\tif ( scissorTest ) {\n\n    \t\t\tenable( gl.SCISSOR_TEST );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.SCISSOR_TEST );\n\n    \t\t}\n\n    \t}\n\n    \t// texture\n\n    \tfunction activeTexture( webglSlot ) {\n\n    \t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n    \t\tif ( currentTextureSlot !== webglSlot ) {\n\n    \t\t\tgl.activeTexture( webglSlot );\n    \t\t\tcurrentTextureSlot = webglSlot;\n\n    \t\t}\n\n    \t}\n\n    \tfunction bindTexture( webglType, webglTexture ) {\n\n    \t\tif ( currentTextureSlot === null ) {\n\n    \t\t\tactiveTexture();\n\n    \t\t}\n\n    \t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n    \t\tif ( boundTexture === undefined ) {\n\n    \t\t\tboundTexture = { type: undefined, texture: undefined };\n    \t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n    \t\t}\n\n    \t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n    \t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n    \t\t\tboundTexture.type = webglType;\n    \t\t\tboundTexture.texture = webglTexture;\n\n    \t\t}\n\n    \t}\n\n    \tfunction compressedTexImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \tfunction texImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.texImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction clearColor( r, g, b, a ) {\n\n    \t\tcolorBuffer.setClear( r, g, b, a );\n\n    \t}\n\n    \tfunction clearDepth( depth ) {\n\n    \t\tdepthBuffer.setClear( depth );\n\n    \t}\n\n    \tfunction clearStencil( stencil ) {\n\n    \t\tstencilBuffer.setClear( stencil );\n\n    \t}\n\n    \t//\n\n    \tfunction scissor( scissor ) {\n\n    \t\tif ( currentScissor.equals( scissor ) === false ) {\n\n    \t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n    \t\t\tcurrentScissor.copy( scissor );\n\n    \t\t}\n\n    \t}\n\n    \tfunction viewport( viewport ) {\n\n    \t\tif ( currentViewport.equals( viewport ) === false ) {\n\n    \t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n    \t\t\tcurrentViewport.copy( viewport );\n\n    \t\t}\n\n    \t}\n\n    \t//\n\n    \tfunction reset() {\n\n    \t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n    \t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tcapabilities = {};\n\n    \t\tcompressedTextureFormats = null;\n\n    \t\tcurrentTextureSlot = null;\n    \t\tcurrentBoundTextures = {};\n\n    \t\tcurrentBlending = null;\n\n    \t\tcurrentFlipSided = null;\n    \t\tcurrentCullFace = null;\n\n    \t\tcolorBuffer.reset();\n    \t\tdepthBuffer.reset();\n    \t\tstencilBuffer.reset();\n\n    \t}\n\n    \treturn {\n\n    \t\tbuffers: {\n    \t\t\tcolor: colorBuffer,\n    \t\t\tdepth: depthBuffer,\n    \t\t\tstencil: stencilBuffer\n    \t\t},\n\n    \t\tinit: init,\n    \t\tinitAttributes: initAttributes,\n    \t\tenableAttribute: enableAttribute,\n    \t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n    \t\tdisableUnusedAttributes: disableUnusedAttributes,\n    \t\tenable: enable,\n    \t\tdisable: disable,\n    \t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n    \t\tsetBlending: setBlending,\n\n    \t\tsetColorWrite: setColorWrite,\n    \t\tsetDepthTest: setDepthTest,\n    \t\tsetDepthWrite: setDepthWrite,\n    \t\tsetDepthFunc: setDepthFunc,\n    \t\tsetStencilTest: setStencilTest,\n    \t\tsetStencilWrite: setStencilWrite,\n    \t\tsetStencilFunc: setStencilFunc,\n    \t\tsetStencilOp: setStencilOp,\n\n    \t\tsetFlipSided: setFlipSided,\n    \t\tsetCullFace: setCullFace,\n\n    \t\tsetLineWidth: setLineWidth,\n    \t\tsetPolygonOffset: setPolygonOffset,\n\n    \t\tgetScissorTest: getScissorTest,\n    \t\tsetScissorTest: setScissorTest,\n\n    \t\tactiveTexture: activeTexture,\n    \t\tbindTexture: bindTexture,\n    \t\tcompressedTexImage2D: compressedTexImage2D,\n    \t\ttexImage2D: texImage2D,\n\n    \t\tclearColor: clearColor,\n    \t\tclearDepth: clearDepth,\n    \t\tclearStencil: clearStencil,\n\n    \t\tscissor: scissor,\n    \t\tviewport: viewport,\n\n    \t\treset: reset\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLCapabilities( gl, extensions, parameters ) {\n\n    \tvar maxAnisotropy;\n\n    \tfunction getMaxAnisotropy() {\n\n    \t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n    \t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n    \t\t} else {\n\n    \t\t\tmaxAnisotropy = 0;\n\n    \t\t}\n\n    \t\treturn maxAnisotropy;\n\n    \t}\n\n    \tfunction getMaxPrecision( precision ) {\n\n    \t\tif ( precision === 'highp' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'highp';\n\n    \t\t\t}\n\n    \t\t\tprecision = 'mediump';\n\n    \t\t}\n\n    \t\tif ( precision === 'mediump' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'mediump';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn 'lowp';\n\n    \t}\n\n    \tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    \tvar maxPrecision = getMaxPrecision( precision );\n\n    \tif ( maxPrecision !== precision ) {\n\n    \t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n    \t\tprecision = maxPrecision;\n\n    \t}\n\n    \tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    \tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    \tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    \tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    \tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    \tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    \tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    \tvar vertexTextures = maxVertexTextures > 0;\n    \tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n    \tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    \treturn {\n\n    \t\tgetMaxAnisotropy: getMaxAnisotropy,\n    \t\tgetMaxPrecision: getMaxPrecision,\n\n    \t\tprecision: precision,\n    \t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n    \t\tmaxTextures: maxTextures,\n    \t\tmaxVertexTextures: maxVertexTextures,\n    \t\tmaxTextureSize: maxTextureSize,\n    \t\tmaxCubemapSize: maxCubemapSize,\n\n    \t\tmaxAttributes: maxAttributes,\n    \t\tmaxVertexUniforms: maxVertexUniforms,\n    \t\tmaxVaryings: maxVaryings,\n    \t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n    \t\tvertexTextures: vertexTextures,\n    \t\tfloatFragmentTextures: floatFragmentTextures,\n    \t\tfloatVertexTextures: floatVertexTextures\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLExtensions( gl ) {\n\n    \tvar extensions = {};\n\n    \treturn {\n\n    \t\tget: function ( name ) {\n\n    \t\t\tif ( extensions[ name ] !== undefined ) {\n\n    \t\t\t\treturn extensions[ name ];\n\n    \t\t\t}\n\n    \t\t\tvar extension;\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'WEBGL_depth_texture':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'EXT_texture_filter_anisotropic':\n    \t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n    \t\t\t\t\textension = gl.getExtension( name );\n\n    \t\t\t}\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n    \t\t\t}\n\n    \t\t\textensions[ name ] = extension;\n\n    \t\t\treturn extension;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLClipping() {\n\n    \tvar scope = this,\n\n    \t\tglobalState = null,\n    \t\tnumGlobalPlanes = 0,\n    \t\tlocalClippingEnabled = false,\n    \t\trenderingShadows = false,\n\n    \t\tplane = new Plane(),\n    \t\tviewNormalMatrix = new Matrix3(),\n\n    \t\tuniform = { value: null, needsUpdate: false };\n\n    \tthis.uniform = uniform;\n    \tthis.numPlanes = 0;\n\n    \tthis.init = function( planes, enableLocalClipping, camera ) {\n\n    \t\tvar enabled =\n    \t\t\tplanes.length !== 0 ||\n    \t\t\tenableLocalClipping ||\n    \t\t\t// enable state of previous frame - the clipping code has to\n    \t\t\t// run another frame in order to reset the state:\n    \t\t\tnumGlobalPlanes !== 0 ||\n    \t\t\tlocalClippingEnabled;\n\n    \t\tlocalClippingEnabled = enableLocalClipping;\n\n    \t\tglobalState = projectPlanes( planes, camera, 0 );\n    \t\tnumGlobalPlanes = planes.length;\n\n    \t\treturn enabled;\n\n    \t};\n\n    \tthis.beginShadows = function() {\n\n    \t\trenderingShadows = true;\n    \t\tprojectPlanes( null );\n\n    \t};\n\n    \tthis.endShadows = function() {\n\n    \t\trenderingShadows = false;\n    \t\tresetGlobalState();\n\n    \t};\n\n    \tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n    \t\tif ( ! localClippingEnabled ||\n    \t\t\t\tplanes === null || planes.length === 0 ||\n    \t\t\t\trenderingShadows && ! clipShadows ) {\n    \t\t\t// there's no local clipping\n\n    \t\t\tif ( renderingShadows ) {\n    \t\t\t\t// there's no global clipping\n\n    \t\t\t\tprojectPlanes( null );\n\n    \t\t\t} else {\n\n    \t\t\t\tresetGlobalState();\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n    \t\t\t\tlGlobal = nGlobal * 4,\n\n    \t\t\t\tdstArray = cache.clippingState || null;\n\n    \t\t\tuniform.value = dstArray; // ensure unique state\n\n    \t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n    \t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n    \t\t\t\tdstArray[ i ] = globalState[ i ];\n\n    \t\t\t}\n\n    \t\t\tcache.clippingState = dstArray;\n    \t\t\tthis.numPlanes += nGlobal;\n\n    \t\t}\n\n\n    \t};\n\n    \tfunction resetGlobalState() {\n\n    \t\tif ( uniform.value !== globalState ) {\n\n    \t\t\tuniform.value = globalState;\n    \t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n    \t\t}\n\n    \t\tscope.numPlanes = numGlobalPlanes;\n\n    \t}\n\n    \tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n    \t\tvar nPlanes = planes !== null ? planes.length : 0,\n    \t\t\tdstArray = null;\n\n    \t\tif ( nPlanes !== 0 ) {\n\n    \t\t\tdstArray = uniform.value;\n\n    \t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n    \t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n    \t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n    \t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n    \t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n    \t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0, i4 = dstOffset;\n    \t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n    \t\t\t\t\tplane.copy( planes[ i ] ).\n    \t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n    \t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n    \t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tuniform.value = dstArray;\n    \t\t\tuniform.needsUpdate = true;\n\n    \t\t}\n\n    \t\tscope.numPlanes = nPlanes;\n    \t\treturn dstArray;\n\n    \t}\n\n    }\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     * @author tschw\n     */\n\n    function WebGLRenderer( parameters ) {\n\n    \tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n    \tparameters = parameters || {};\n\n    \tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n    \t_context = parameters.context !== undefined ? parameters.context : null,\n\n    \t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n    \t_depth = parameters.depth !== undefined ? parameters.depth : true,\n    \t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n    \t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n    \t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n    \t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n    \tvar lights = [];\n\n    \tvar opaqueObjects = [];\n    \tvar opaqueObjectsLastIndex = - 1;\n    \tvar transparentObjects = [];\n    \tvar transparentObjectsLastIndex = - 1;\n\n    \tvar morphInfluences = new Float32Array( 8 );\n\n    \tvar sprites = [];\n    \tvar lensFlares = [];\n\n    \t// public properties\n\n    \tthis.domElement = _canvas;\n    \tthis.context = null;\n\n    \t// clearing\n\n    \tthis.autoClear = true;\n    \tthis.autoClearColor = true;\n    \tthis.autoClearDepth = true;\n    \tthis.autoClearStencil = true;\n\n    \t// scene graph\n\n    \tthis.sortObjects = true;\n\n    \t// user-defined clipping\n\n    \tthis.clippingPlanes = [];\n    \tthis.localClippingEnabled = false;\n\n    \t// physically based shading\n\n    \tthis.gammaFactor = 2.0;\t// for backwards compatibility\n    \tthis.gammaInput = false;\n    \tthis.gammaOutput = false;\n\n    \t// physical lights\n\n    \tthis.physicallyCorrectLights = false;\n\n    \t// tone mapping\n\n    \tthis.toneMapping = LinearToneMapping;\n    \tthis.toneMappingExposure = 1.0;\n    \tthis.toneMappingWhitePoint = 1.0;\n\n    \t// morphs\n\n    \tthis.maxMorphTargets = 8;\n    \tthis.maxMorphNormals = 4;\n\n    \t// internal properties\n\n    \tvar _this = this,\n\n    \t// internal state cache\n\n    \t_currentProgram = null,\n    \t_currentRenderTarget = null,\n    \t_currentFramebuffer = null,\n    \t_currentMaterialId = - 1,\n    \t_currentGeometryProgram = '',\n    \t_currentCamera = null,\n\n    \t_currentScissor = new Vector4(),\n    \t_currentScissorTest = null,\n\n    \t_currentViewport = new Vector4(),\n\n    \t//\n\n    \t_usedTextureUnits = 0,\n\n    \t//\n\n    \t_clearColor = new Color( 0x000000 ),\n    \t_clearAlpha = 0,\n\n    \t_width = _canvas.width,\n    \t_height = _canvas.height,\n\n    \t_pixelRatio = 1,\n\n    \t_scissor = new Vector4( 0, 0, _width, _height ),\n    \t_scissorTest = false,\n\n    \t_viewport = new Vector4( 0, 0, _width, _height ),\n\n    \t// frustum\n\n    \t_frustum = new Frustum(),\n\n    \t// clipping\n\n    \t_clipping = new WebGLClipping(),\n    \t_clippingEnabled = false,\n    \t_localClippingEnabled = false,\n\n    \t_sphere = new Sphere(),\n\n    \t// camera matrices cache\n\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_vector3 = new Vector3(),\n\n    \t// light arrays cache\n\n    \t_lights = {\n\n    \t\thash: '',\n\n    \t\tambient: [ 0, 0, 0 ],\n    \t\tdirectional: [],\n    \t\tdirectionalShadowMap: [],\n    \t\tdirectionalShadowMatrix: [],\n    \t\tspot: [],\n    \t\tspotShadowMap: [],\n    \t\tspotShadowMatrix: [],\n    \t\tpoint: [],\n    \t\tpointShadowMap: [],\n    \t\tpointShadowMatrix: [],\n    \t\themi: [],\n\n    \t\tshadows: []\n\n    \t},\n\n    \t// info\n\n    \t_infoRender = {\n\n    \t\tcalls: 0,\n    \t\tvertices: 0,\n    \t\tfaces: 0,\n    \t\tpoints: 0\n\n    \t};\n\n    \tthis.info = {\n\n    \t\trender: _infoRender,\n    \t\tmemory: {\n\n    \t\t\tgeometries: 0,\n    \t\t\ttextures: 0\n\n    \t\t},\n    \t\tprograms: null\n\n    \t};\n\n\n    \t// initialize\n\n    \tvar _gl;\n\n    \ttry {\n\n    \t\tvar attributes = {\n    \t\t\talpha: _alpha,\n    \t\t\tdepth: _depth,\n    \t\t\tstencil: _stencil,\n    \t\t\tantialias: _antialias,\n    \t\t\tpremultipliedAlpha: _premultipliedAlpha,\n    \t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n    \t\t};\n\n    \t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n    \t\tif ( _gl === null ) {\n\n    \t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n    \t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n    \t\t\t} else {\n\n    \t\t\t\tthrow 'Error creating WebGL context.';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n    \t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n    \t\t\t_gl.getShaderPrecisionFormat = function () {\n\n    \t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n    \t\t\t};\n\n    \t\t}\n\n    \t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t} catch ( error ) {\n\n    \t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n    \t}\n\n    \tvar extensions = new WebGLExtensions( _gl );\n\n    \textensions.get( 'WEBGL_depth_texture' );\n    \textensions.get( 'OES_texture_float' );\n    \textensions.get( 'OES_texture_float_linear' );\n    \textensions.get( 'OES_texture_half_float' );\n    \textensions.get( 'OES_texture_half_float_linear' );\n    \textensions.get( 'OES_standard_derivatives' );\n    \textensions.get( 'ANGLE_instanced_arrays' );\n\n    \tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\tBufferGeometry.MaxIndex = 4294967296;\n\n    \t}\n\n    \tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n    \tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n    \tvar properties = new WebGLProperties();\n    \tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n    \tvar objects = new WebGLObjects( _gl, properties, this.info );\n    \tvar programCache = new WebGLPrograms( this, capabilities );\n    \tvar lightCache = new WebGLLights();\n\n    \tthis.info.programs = programCache.programs;\n\n    \tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n    \tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n    \t//\n\n    \tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n    \tvar backgroundCamera2 = new PerspectiveCamera();\n    \tvar backgroundPlaneMesh = new Mesh(\n    \t\tnew PlaneBufferGeometry( 2, 2 ),\n    \t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n    \t);\n    \tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n    \tvar backgroundBoxMesh = new Mesh(\n    \t\tnew BoxBufferGeometry( 5, 5, 5 ),\n    \t\tnew ShaderMaterial( {\n    \t\t\tuniforms: backgroundBoxShader.uniforms,\n    \t\t\tvertexShader: backgroundBoxShader.vertexShader,\n    \t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n    \t\t\tside: BackSide,\n    \t\t\tdepthTest: false,\n    \t\t\tdepthWrite: false,\n    \t\t\tfog: false\n    \t\t} )\n    \t);\n\n    \t//\n\n    \tfunction getTargetPixelRatio() {\n\n    \t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n    \t}\n\n    \tfunction glClearColor( r, g, b, a ) {\n\n    \t\tif ( _premultipliedAlpha === true ) {\n\n    \t\t\tr *= a; g *= a; b *= a;\n\n    \t\t}\n\n    \t\tstate.clearColor( r, g, b, a );\n\n    \t}\n\n    \tfunction setDefaultGLState() {\n\n    \t\tstate.init();\n\n    \t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n    \t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t}\n\n    \tfunction resetGLState() {\n\n    \t\t_currentProgram = null;\n    \t\t_currentCamera = null;\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n\n    \t\tstate.reset();\n\n    \t}\n\n    \tsetDefaultGLState();\n\n    \tthis.context = _gl;\n    \tthis.capabilities = capabilities;\n    \tthis.extensions = extensions;\n    \tthis.properties = properties;\n    \tthis.state = state;\n\n    \t// shadow map\n\n    \tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\n    \tthis.shadowMap = shadowMap;\n\n\n    \t// Plugins\n\n    \tvar spritePlugin = new SpritePlugin( this, sprites );\n    \tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\n    \t// API\n\n    \tthis.getContext = function () {\n\n    \t\treturn _gl;\n\n    \t};\n\n    \tthis.getContextAttributes = function () {\n\n    \t\treturn _gl.getContextAttributes();\n\n    \t};\n\n    \tthis.forceContextLoss = function () {\n\n    \t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n    \t};\n\n    \tthis.getMaxAnisotropy = function () {\n\n    \t\treturn capabilities.getMaxAnisotropy();\n\n    \t};\n\n    \tthis.getPrecision = function () {\n\n    \t\treturn capabilities.precision;\n\n    \t};\n\n    \tthis.getPixelRatio = function () {\n\n    \t\treturn _pixelRatio;\n\n    \t};\n\n    \tthis.setPixelRatio = function ( value ) {\n\n    \t\tif ( value === undefined ) return;\n\n    \t\t_pixelRatio = value;\n\n    \t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n    \t};\n\n    \tthis.getSize = function () {\n\n    \t\treturn {\n    \t\t\twidth: _width,\n    \t\t\theight: _height\n    \t\t};\n\n    \t};\n\n    \tthis.setSize = function ( width, height, updateStyle ) {\n\n    \t\t_width = width;\n    \t\t_height = height;\n\n    \t\t_canvas.width = width * _pixelRatio;\n    \t\t_canvas.height = height * _pixelRatio;\n\n    \t\tif ( updateStyle !== false ) {\n\n    \t\t\t_canvas.style.width = width + 'px';\n    \t\t\t_canvas.style.height = height + 'px';\n\n    \t\t}\n\n    \t\tthis.setViewport( 0, 0, width, height );\n\n    \t};\n\n    \tthis.setViewport = function ( x, y, width, height ) {\n\n    \t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissor = function ( x, y, width, height ) {\n\n    \t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissorTest = function ( boolean ) {\n\n    \t\tstate.setScissorTest( _scissorTest = boolean );\n\n    \t};\n\n    \t// Clearing\n\n    \tthis.getClearColor = function () {\n\n    \t\treturn _clearColor;\n\n    \t};\n\n    \tthis.setClearColor = function ( color, alpha ) {\n\n    \t\t_clearColor.set( color );\n\n    \t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.getClearAlpha = function () {\n\n    \t\treturn _clearAlpha;\n\n    \t};\n\n    \tthis.setClearAlpha = function ( alpha ) {\n\n    \t\t_clearAlpha = alpha;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.clear = function ( color, depth, stencil ) {\n\n    \t\tvar bits = 0;\n\n    \t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n    \t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n    \t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n    \t\t_gl.clear( bits );\n\n    \t};\n\n    \tthis.clearColor = function () {\n\n    \t\tthis.clear( true, false, false );\n\n    \t};\n\n    \tthis.clearDepth = function () {\n\n    \t\tthis.clear( false, true, false );\n\n    \t};\n\n    \tthis.clearStencil = function () {\n\n    \t\tthis.clear( false, false, true );\n\n    \t};\n\n    \tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n    \t\tthis.setRenderTarget( renderTarget );\n    \t\tthis.clear( color, depth, stencil );\n\n    \t};\n\n    \t// Reset\n\n    \tthis.resetGLState = resetGLState;\n\n    \tthis.dispose = function() {\n\n    \t\ttransparentObjects = [];\n    \t\ttransparentObjectsLastIndex = -1;\n    \t\topaqueObjects = [];\n    \t\topaqueObjectsLastIndex = -1;\n\n    \t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t};\n\n    \t// Events\n\n    \tfunction onContextLost( event ) {\n\n    \t\tevent.preventDefault();\n\n    \t\tresetGLState();\n    \t\tsetDefaultGLState();\n\n    \t\tproperties.clear();\n\n    \t}\n\n    \tfunction onMaterialDispose( event ) {\n\n    \t\tvar material = event.target;\n\n    \t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n    \t\tdeallocateMaterial( material );\n\n    \t}\n\n    \t// Buffer deallocation\n\n    \tfunction deallocateMaterial( material ) {\n\n    \t\treleaseMaterialProgramReference( material );\n\n    \t\tproperties.delete( material );\n\n    \t}\n\n\n    \tfunction releaseMaterialProgramReference( material ) {\n\n    \t\tvar programInfo = properties.get( material ).program;\n\n    \t\tmaterial.program = undefined;\n\n    \t\tif ( programInfo !== undefined ) {\n\n    \t\t\tprogramCache.releaseProgram( programInfo );\n\n    \t\t}\n\n    \t}\n\n    \t// Buffer rendering\n\n    \tthis.renderBufferImmediate = function ( object, program, material ) {\n\n    \t\tstate.initAttributes();\n\n    \t\tvar buffers = properties.get( object );\n\n    \t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n    \t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n    \t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n    \t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( object.hasPositions ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.position );\n    \t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasNormals ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n    \t\t\tif ( ! material.isMeshPhongMaterial &&\n    \t\t\t     ! material.isMeshStandardMaterial &&\n    \t\t\t       material.shading === FlatShading ) {\n\n    \t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n    \t\t\t\t\tvar array = object.normalArray;\n\n    \t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n    \t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n    \t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n    \t\t\t\t\tarray[ i + 0 ] = nx;\n    \t\t\t\t\tarray[ i + 1 ] = ny;\n    \t\t\t\t\tarray[ i + 2 ] = nz;\n\n    \t\t\t\t\tarray[ i + 3 ] = nx;\n    \t\t\t\t\tarray[ i + 4 ] = ny;\n    \t\t\t\t\tarray[ i + 5 ] = nz;\n\n    \t\t\t\t\tarray[ i + 6 ] = nx;\n    \t\t\t\t\tarray[ i + 7 ] = ny;\n    \t\t\t\t\tarray[ i + 8 ] = nz;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.normal );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasUvs && material.map ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.uv );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.color );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n    \t\tobject.count = 0;\n\n    \t};\n\n    \tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n    \t\tsetMaterial( material );\n\n    \t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\tvar updateBuffers = false;\n    \t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n    \t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n    \t\t\t_currentGeometryProgram = geometryProgram;\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n    \t\tif ( morphTargetInfluences !== undefined ) {\n\n    \t\t\tvar activeInfluences = [];\n\n    \t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = morphTargetInfluences[ i ];\n    \t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n    \t\t\t}\n\n    \t\t\tactiveInfluences.sort( absNumericalSort );\n\n    \t\t\tif ( activeInfluences.length > 8 ) {\n\n    \t\t\t\tactiveInfluences.length = 8;\n\n    \t\t\t}\n\n    \t\t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = activeInfluences[ i ];\n    \t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n    \t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n    \t\t\t\t\tvar index = influence[ 1 ];\n\n    \t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n    \t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n    \t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\n    \t\t\t\tmorphInfluences[ i ] = 0.0;\n\n    \t\t\t}\n\n    \t\t\tprogram.getUniforms().setValue(\n    \t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar index = geometry.index;\n    \t\tvar position = geometry.attributes.position;\n    \t\tvar rangeFactor = 1;\n\n    \t\tif ( material.wireframe === true ) {\n\n    \t\t\tindex = objects.getWireframeAttribute( geometry );\n    \t\t\trangeFactor = 2;\n\n    \t\t}\n\n    \t\tvar renderer;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\trenderer = indexedBufferRenderer;\n    \t\t\trenderer.setIndex( index );\n\n    \t\t} else {\n\n    \t\t\trenderer = bufferRenderer;\n\n    \t\t}\n\n    \t\tif ( updateBuffers ) {\n\n    \t\t\tsetupVertexAttributes( material, program, geometry );\n\n    \t\t\tif ( index !== null ) {\n\n    \t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar dataCount = 0;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tdataCount = index.count;\n\n    \t\t} else if ( position !== undefined ) {\n\n    \t\t\tdataCount = position.count;\n\n    \t\t}\n\n    \t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n    \t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n    \t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n    \t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n    \t\tvar drawStart = Math.max( rangeStart, groupStart );\n    \t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n    \t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n    \t\tif ( drawCount === 0 ) return;\n\n    \t\t//\n\n    \t\tif ( object.isMesh ) {\n\n    \t\t\tif ( material.wireframe === true ) {\n\n    \t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\tswitch ( object.drawMode ) {\n\n    \t\t\t\t\tcase TrianglesDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleStripDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleFanDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n\n    \t\t} else if ( object.isLine ) {\n\n    \t\t\tvar lineWidth = material.linewidth;\n\n    \t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n    \t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n    \t\t\tif ( object.isLineSegments ) {\n\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n    \t\t\t}\n\n    \t\t} else if ( object.isPoints ) {\n\n    \t\t\trenderer.setMode( _gl.POINTS );\n\n    \t\t}\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n    \t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderer.render( drawStart, drawCount );\n\n    \t\t}\n\n    \t};\n\n    \tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n    \t\tvar extension;\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( startIndex === undefined ) startIndex = 0;\n\n    \t\tstate.initAttributes();\n\n    \t\tvar geometryAttributes = geometry.attributes;\n\n    \t\tvar programAttributes = program.getAttributes();\n\n    \t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n    \t\tfor ( var name in programAttributes ) {\n\n    \t\t\tvar programAttribute = programAttributes[ name ];\n\n    \t\t\tif ( programAttribute >= 0 ) {\n\n    \t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n    \t\t\t\tif ( geometryAttribute !== undefined ) {\n\n    \t\t\t\t\tvar type = _gl.FLOAT;\n    \t\t\t\t\tvar array = geometryAttribute.array;\n    \t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n    \t\t\t\t\tif ( array instanceof Float32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.FLOAT;\n\n    \t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n    \t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\n    \t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.BYTE;\n\n    \t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tvar size = geometryAttribute.itemSize;\n    \t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n    \t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {\n\n    \t\t\t\t\t\tvar data = geometryAttribute.data;\n    \t\t\t\t\t\tvar stride = data.stride;\n    \t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n    \t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n    \t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n    \t\t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\t\tswitch ( value.length ) {\n\n    \t\t\t\t\t\t\tcase 2:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 3:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 4:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t}\n\n    \t// Sorting\n\n    \tfunction absNumericalSort( a, b ) {\n\n    \t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\n    \t\t\treturn a.material.program.id - b.material.program.id;\n\n    \t\t} else if ( a.material.id !== b.material.id ) {\n\n    \t\t\treturn a.material.id - b.material.id;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn a.z - b.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \tfunction reversePainterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \t// Rendering\n\n    \tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n    \t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar fog = scene.fog;\n\n    \t\t// reset caching for this frame\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n    \t\t_currentCamera = null;\n\n    \t\t// update scene graph\n\n    \t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n    \t\t// update camera matrices and frustum\n\n    \t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n    \t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n    \t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n    \t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\tlights.length = 0;\n\n    \t\topaqueObjectsLastIndex = - 1;\n    \t\ttransparentObjectsLastIndex = - 1;\n\n    \t\tsprites.length = 0;\n    \t\tlensFlares.length = 0;\n\n    \t\t_localClippingEnabled = this.localClippingEnabled;\n    \t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n    \t\tprojectObject( scene, camera );\n\n    \t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n    \t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n    \t\tif ( _this.sortObjects === true ) {\n\n    \t\t\topaqueObjects.sort( painterSortStable );\n    \t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n    \t\tsetupShadows( lights );\n\n    \t\tshadowMap.render( scene, camera );\n\n    \t\tsetupLights( lights, camera );\n\n    \t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n    \t\t//\n\n    \t\t_infoRender.calls = 0;\n    \t\t_infoRender.vertices = 0;\n    \t\t_infoRender.faces = 0;\n    \t\t_infoRender.points = 0;\n\n    \t\tif ( renderTarget === undefined ) {\n\n    \t\t\trenderTarget = null;\n\n    \t\t}\n\n    \t\tthis.setRenderTarget( renderTarget );\n\n    \t\t//\n\n    \t\tvar background = scene.background;\n\n    \t\tif ( background === null ) {\n\n    \t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t\t} else if ( background && background.isColor ) {\n\n    \t\t\tglClearColor( background.r, background.g, background.b, 1 );\n    \t\t\tforceClear = true;\n\n    \t\t}\n\n    \t\tif ( this.autoClear || forceClear ) {\n\n    \t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n    \t\t}\n\n    \t\tif ( background && background.isCubeTexture ) {\n\n    \t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n    \t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n    \t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n    \t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n    \t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n    \t\t\tobjects.update( backgroundBoxMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n    \t\t} else if ( background && background.isTexture ) {\n\n    \t\t\tbackgroundPlaneMesh.material.map = background;\n\n    \t\t\tobjects.update( backgroundPlaneMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( scene.overrideMaterial ) {\n\n    \t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n    \t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n    \t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n    \t\t} else {\n\n    \t\t\t// opaque pass (front-to-back order)\n\n    \t\t\tstate.setBlending( NoBlending );\n    \t\t\trenderObjects( opaqueObjects, camera, fog );\n\n    \t\t\t// transparent pass (back-to-front order)\n\n    \t\t\trenderObjects( transparentObjects, camera, fog );\n\n    \t\t}\n\n    \t\t// custom render plugins (post pass)\n\n    \t\tspritePlugin.render( scene, camera );\n    \t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n    \t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n    \t\t}\n\n    \t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n    \t\tstate.setDepthTest( true );\n    \t\tstate.setDepthWrite( true );\n    \t\tstate.setColorWrite( true );\n\n    \t\t// _gl.finish();\n\n    \t};\n\n    \tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n    \t\tvar array, index;\n\n    \t\t// allocate the next position in the appropriate array\n\n    \t\tif ( material.transparent ) {\n\n    \t\t\tarray = transparentObjects;\n    \t\t\tindex = ++ transparentObjectsLastIndex;\n\n    \t\t} else {\n\n    \t\t\tarray = opaqueObjects;\n    \t\t\tindex = ++ opaqueObjectsLastIndex;\n\n    \t\t}\n\n    \t\t// recycle existing render item or grow the array\n\n    \t\tvar renderItem = array[ index ];\n\n    \t\tif ( renderItem !== undefined ) {\n\n    \t\t\trenderItem.id = object.id;\n    \t\t\trenderItem.object = object;\n    \t\t\trenderItem.geometry = geometry;\n    \t\t\trenderItem.material = material;\n    \t\t\trenderItem.z = _vector3.z;\n    \t\t\trenderItem.group = group;\n\n    \t\t} else {\n\n    \t\t\trenderItem = {\n    \t\t\t\tid: object.id,\n    \t\t\t\tobject: object,\n    \t\t\t\tgeometry: geometry,\n    \t\t\t\tmaterial: material,\n    \t\t\t\tz: _vector3.z,\n    \t\t\t\tgroup: group\n    \t\t\t};\n\n    \t\t\t// assert( index === array.length );\n    \t\t\tarray.push( renderItem );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Duplicated code (Frustum)\n\n    \tfunction isObjectViewable( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( geometry.boundingSphere === null )\n    \t\t\tgeometry.computeBoundingSphere();\n\n    \t\t_sphere.copy( geometry.boundingSphere ).\n    \t\t\tapplyMatrix4( object.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSpriteViewable( sprite ) {\n\n    \t\t_sphere.center.set( 0, 0, 0 );\n    \t\t_sphere.radius = 0.7071067811865476;\n    \t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSphereViewable( sphere ) {\n\n    \t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n    \t\tvar numPlanes = _clipping.numPlanes;\n\n    \t\tif ( numPlanes === 0 ) return true;\n\n    \t\tvar planes = _this.clippingPlanes,\n\n    \t\t\tcenter = sphere.center,\n    \t\t\tnegRad = - sphere.radius,\n    \t\t\ti = 0;\n\n    \t\tdo {\n\n    \t\t\t// out when deeper than radius in the negative halfspace\n    \t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n    \t\t} while ( ++ i !== numPlanes );\n\n    \t\treturn true;\n\n    \t}\n\n    \tfunction projectObject( object, camera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible ) {\n\n    \t\t\tif ( object.isLight ) {\n\n    \t\t\t\tlights.push( object );\n\n    \t\t\t} else if ( object.isSprite ) {\n\n    \t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n    \t\t\t\t\tsprites.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( object.isLensFlare ) {\n\n    \t\t\t\tlensFlares.push( object );\n\n    \t\t\t} else if ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t}\n\n    \t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n    \t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n    \t\t\t\tif ( object.isSkinnedMesh ) {\n\n    \t\t\t\t\tobject.skeleton.update();\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvar geometry = objects.update( object );\n\n    \t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\n    \t\t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\t\t\t\t\t\tvar group = groups[ i ];\n    \t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera );\n\n    \t\t}\n\n    \t}\n\n    \tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n    \t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n    \t\t\tvar renderItem = renderList[ i ];\n\n    \t\t\tvar object = renderItem.object;\n    \t\t\tvar geometry = renderItem.geometry;\n    \t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n    \t\t\tvar group = renderItem.group;\n\n    \t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n    \t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n    \t\t\tif ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tsetMaterial( material );\n\n    \t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\t\t\t_currentGeometryProgram = '';\n\n    \t\t\t\tobject.render( function ( object ) {\n\n    \t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n    \t\t\t\t} );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( object.onBeforeRender !== null ) object.onBeforeRender();\n\n    \t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction initMaterial( material, fog, object ) {\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tvar parameters = programCache.getParameters(\n    \t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n    \t\tvar code = programCache.getProgramCode( material, parameters );\n\n    \t\tvar program = materialProperties.program;\n    \t\tvar programChange = true;\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\t// new material\n    \t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n    \t\t} else if ( program.code !== code ) {\n\n    \t\t\t// changed glsl or parameters\n    \t\t\treleaseMaterialProgramReference( material );\n\n    \t\t} else if ( parameters.shaderID !== undefined ) {\n\n    \t\t\t// same glsl and uniform list\n    \t\t\treturn;\n\n    \t\t} else {\n\n    \t\t\t// only rebuild uniform list\n    \t\t\tprogramChange = false;\n\n    \t\t}\n\n    \t\tif ( programChange ) {\n\n    \t\t\tif ( parameters.shaderID ) {\n\n    \t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: exports.UniformsUtils.clone( shader.uniforms ),\n    \t\t\t\t\tvertexShader: shader.vertexShader,\n    \t\t\t\t\tfragmentShader: shader.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t} else {\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: material.uniforms,\n    \t\t\t\t\tvertexShader: material.vertexShader,\n    \t\t\t\t\tfragmentShader: material.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n    \t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n    \t\t\tmaterialProperties.program = program;\n    \t\t\tmaterial.program = program;\n\n    \t\t}\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( material.morphTargets ) {\n\n    \t\t\tmaterial.numSupportedMorphTargets = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.morphNormals ) {\n\n    \t\t\tmaterial.numSupportedMorphNormals = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( ! material.isShaderMaterial &&\n    \t\t     ! material.isRawShaderMaterial ||\n    \t\t       material.clipping === true ) {\n\n    \t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n    \t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n    \t\t}\n\n    \t\tmaterialProperties.fog = fog;\n\n    \t\t// store the light setup it was created for\n\n    \t\tmaterialProperties.lightsHash = _lights.hash;\n\n    \t\tif ( material.lights ) {\n\n    \t\t\t// wire up the material to this renderer's lighting state\n\n    \t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n    \t\t\tuniforms.directionalLights.value = _lights.directional;\n    \t\t\tuniforms.spotLights.value = _lights.spot;\n    \t\t\tuniforms.pointLights.value = _lights.point;\n    \t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n    \t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n    \t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n    \t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n    \t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n    \t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n    \t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n    \t\t}\n\n    \t\tvar progUniforms = materialProperties.program.getUniforms(),\n    \t\t\tuniformsList =\n    \t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n    \t\tmaterialProperties.uniformsList = uniformsList;\n    \t\tmaterialProperties.dynamicUniforms =\n    \t\t\t\tWebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n    \t}\n\n    \tfunction setMaterial( material ) {\n\n    \t\tmaterial.side === DoubleSide\n    \t\t\t? state.disable( _gl.CULL_FACE )\n    \t\t\t: state.enable( _gl.CULL_FACE );\n\n    \t\tstate.setFlipSided( material.side === BackSide );\n\n    \t\tmaterial.transparent === true\n    \t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n    \t\t\t: state.setBlending( NoBlending );\n\n    \t\tstate.setDepthFunc( material.depthFunc );\n    \t\tstate.setDepthTest( material.depthTest );\n    \t\tstate.setDepthWrite( material.depthWrite );\n    \t\tstate.setColorWrite( material.colorWrite );\n    \t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n    \t}\n\n    \tfunction setProgram( camera, fog, material, object ) {\n\n    \t\t_usedTextureUnits = 0;\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tif ( _clippingEnabled ) {\n\n    \t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n    \t\t\t\tvar useCache =\n    \t\t\t\t\t\tcamera === _currentCamera &&\n    \t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n    \t\t\t\t// we might want to call this function with some ClippingGroup\n    \t\t\t\t// object instead of the material, once it becomes feasible\n    \t\t\t\t// (#8465, #8379)\n    \t\t\t\t_clipping.setState(\n    \t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n    \t\t\t\t\t\tcamera, materialProperties, useCache );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate === false ) {\n\n    \t\t\tif ( materialProperties.program === undefined ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n    \t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate ) {\n\n    \t\t\tinitMaterial( material, fog, object );\n    \t\t\tmaterial.needsUpdate = false;\n\n    \t\t}\n\n    \t\tvar refreshProgram = false;\n    \t\tvar refreshMaterial = false;\n    \t\tvar refreshLights = false;\n\n    \t\tvar program = materialProperties.program,\n    \t\t\tp_uniforms = program.getUniforms(),\n    \t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( program.id !== _currentProgram ) {\n\n    \t\t\t_gl.useProgram( program.program );\n    \t\t\t_currentProgram = program.id;\n\n    \t\t\trefreshProgram = true;\n    \t\t\trefreshMaterial = true;\n    \t\t\trefreshLights = true;\n\n    \t\t}\n\n    \t\tif ( material.id !== _currentMaterialId ) {\n\n    \t\t\t_currentMaterialId = material.id;\n\n    \t\t\trefreshMaterial = true;\n\n    \t\t}\n\n    \t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n    \t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n    \t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n    \t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n    \t\t\t}\n\n\n    \t\t\tif ( camera !== _currentCamera ) {\n\n    \t\t\t\t_currentCamera = camera;\n\n    \t\t\t\t// lighting uniforms depend on the camera so enforce an update\n    \t\t\t\t// now, in case this material supports lights - or later, when\n    \t\t\t\t// the next material that does gets activated:\n\n    \t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n    \t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n    \t\t\t}\n\n    \t\t\t// load material specific uniforms\n    \t\t\t// (shader material also gets them for the sake of genericity)\n\n    \t\t\tif ( material.isShaderMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.envMap ) {\n\n    \t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n    \t\t\t\tif ( uCamPos !== undefined ) {\n\n    \t\t\t\t\tuCamPos.setValue( _gl,\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isShaderMaterial ||\n    \t\t\t     material.skinning ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n    \t\t\t}\n\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n    \t\t}\n\n    \t\t// skinning uniforms must be set even if material didn't change\n    \t\t// auto-setting of texture unit for bone texture must go before other textures\n    \t\t// not sure why, but otherwise weird things happen\n\n    \t\tif ( material.skinning ) {\n\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n    \t\t\tvar skeleton = object.skeleton;\n\n    \t\t\tif ( skeleton ) {\n\n    \t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( refreshMaterial ) {\n\n    \t\t\tif ( material.lights ) {\n\n    \t\t\t\t// the current material requires lighting info\n\n    \t\t\t\t// note: all lighting uniforms are always set correctly\n    \t\t\t\t// they simply reference the renderer's state for their\n    \t\t\t\t// values\n    \t\t\t\t//\n    \t\t\t\t// use the current material's .needsUpdate flags to set\n    \t\t\t\t// the GL state when required\n\n    \t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n    \t\t\t}\n\n    \t\t\t// refresh uniforms common to several materials\n\n    \t\t\tif ( fog && material.fog ) {\n\n    \t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isMeshDepthMaterial ) {\n\n    \t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n    \t\t\t}\n\n    \t\t\t// refresh single material specific uniforms\n\n    \t\t\tif ( material.isLineBasicMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n    \t\t\t} else if ( material.isLineDashedMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n    \t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n    \t\t\t} else if ( material.isPointsMaterial ) {\n\n    \t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n    \t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n    \t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\n    \t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n    \t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n    \t\t\t\tif ( material.displacementMap ) {\n\n    \t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n    \t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n    \t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n    \t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n    \t\t\t}\n\n    \t\t\tWebGLUniforms.upload(\n    \t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n    \t\t}\n\n\n    \t\t// common matrices\n\n    \t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n    \t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n    \t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n    \t\t// dynamic uniforms\n\n    \t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n    \t\tif ( dynUniforms !== null ) {\n\n    \t\t\tWebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );\n    \t\t\tWebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t}\n\n    \t// Uniforms (refresh uniforms objects)\n\n    \tfunction refreshUniformsCommon( uniforms, material ) {\n\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t\tuniforms.diffuse.value = material.color;\n\n    \t\tif ( material.emissive ) {\n\n    \t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n    \t\t}\n\n    \t\tuniforms.map.value = material.map;\n    \t\tuniforms.specularMap.value = material.specularMap;\n    \t\tuniforms.alphaMap.value = material.alphaMap;\n\n    \t\tif ( material.aoMap ) {\n\n    \t\t\tuniforms.aoMap.value = material.aoMap;\n    \t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n    \t\t}\n\n    \t\t// uv repeat and offset setting priorities\n    \t\t// 1. color map\n    \t\t// 2. specular map\n    \t\t// 3. normal map\n    \t\t// 4. bump map\n    \t\t// 5. alpha map\n    \t\t// 6. emissive map\n\n    \t\tvar uvScaleMap;\n\n    \t\tif ( material.map ) {\n\n    \t\t\tuvScaleMap = material.map;\n\n    \t\t} else if ( material.specularMap ) {\n\n    \t\t\tuvScaleMap = material.specularMap;\n\n    \t\t} else if ( material.displacementMap ) {\n\n    \t\t\tuvScaleMap = material.displacementMap;\n\n    \t\t} else if ( material.normalMap ) {\n\n    \t\t\tuvScaleMap = material.normalMap;\n\n    \t\t} else if ( material.bumpMap ) {\n\n    \t\t\tuvScaleMap = material.bumpMap;\n\n    \t\t} else if ( material.roughnessMap ) {\n\n    \t\t\tuvScaleMap = material.roughnessMap;\n\n    \t\t} else if ( material.metalnessMap ) {\n\n    \t\t\tuvScaleMap = material.metalnessMap;\n\n    \t\t} else if ( material.alphaMap ) {\n\n    \t\t\tuvScaleMap = material.alphaMap;\n\n    \t\t} else if ( material.emissiveMap ) {\n\n    \t\t\tuvScaleMap = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( uvScaleMap !== undefined ) {\n\n    \t\t\t// backwards compatibility\n    \t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n    \t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n    \t\t\t}\n\n    \t\t\tvar offset = uvScaleMap.offset;\n    \t\t\tvar repeat = uvScaleMap.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t\tuniforms.envMap.value = material.envMap;\n\n    \t\t// don't flip CubeTexture envMaps, flip everything else:\n    \t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n    \t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n    \t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n    \t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n    \t\tuniforms.reflectivity.value = material.reflectivity;\n    \t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n    \t}\n\n    \tfunction refreshUniformsLine( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t}\n\n    \tfunction refreshUniformsDash( uniforms, material ) {\n\n    \t\tuniforms.dashSize.value = material.dashSize;\n    \t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n    \t\tuniforms.scale.value = material.scale;\n\n    \t}\n\n    \tfunction refreshUniformsPoints( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n    \t\tuniforms.size.value = material.size * _pixelRatio;\n    \t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n    \t\tuniforms.map.value = material.map;\n\n    \t\tif ( material.map !== null ) {\n\n    \t\t\tvar offset = material.map.offset;\n    \t\t\tvar repeat = material.map.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsFog( uniforms, fog ) {\n\n    \t\tuniforms.fogColor.value = fog.color;\n\n    \t\tif ( fog.isFog ) {\n\n    \t\t\tuniforms.fogNear.value = fog.near;\n    \t\t\tuniforms.fogFar.value = fog.far;\n\n    \t\t} else if ( fog.isFogExp2 ) {\n\n    \t\t\tuniforms.fogDensity.value = fog.density;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsLambert( uniforms, material ) {\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhong( uniforms, material ) {\n\n    \t\tuniforms.specular.value = material.specular;\n    \t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsStandard( uniforms, material ) {\n\n    \t\tuniforms.roughness.value = material.roughness;\n    \t\tuniforms.metalness.value = material.metalness;\n\n    \t\tif ( material.roughnessMap ) {\n\n    \t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n    \t\t}\n\n    \t\tif ( material.metalnessMap ) {\n\n    \t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n    \t\t}\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t\tif ( material.envMap ) {\n\n    \t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n    \t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhysical( uniforms, material ) {\n\n    \t\tuniforms.clearCoat.value = material.clearCoat;\n    \t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n    \t\trefreshUniformsStandard( uniforms, material );\n\n    \t}\n\n    \t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n    \tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n    \t\tuniforms.ambientLightColor.needsUpdate = value;\n\n    \t\tuniforms.directionalLights.needsUpdate = value;\n    \t\tuniforms.pointLights.needsUpdate = value;\n    \t\tuniforms.spotLights.needsUpdate = value;\n    \t\tuniforms.hemisphereLights.needsUpdate = value;\n\n    \t}\n\n    \t// Lighting\n\n    \tfunction setupShadows( lights ) {\n\n    \t\tvar lightShadowsLength = 0;\n\n    \t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n    \t\t\tvar light = lights[ i ];\n\n    \t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.shadows.length = lightShadowsLength;\n\n    \t}\n\n    \tfunction setupLights( lights, camera ) {\n\n    \t\tvar l, ll, light,\n    \t\tr = 0, g = 0, b = 0,\n    \t\tcolor,\n    \t\tintensity,\n    \t\tdistance,\n    \t\tshadowMap,\n\n    \t\tviewMatrix = camera.matrixWorldInverse,\n\n    \t\tdirectionalLength = 0,\n    \t\tpointLength = 0,\n    \t\tspotLength = 0,\n    \t\themiLength = 0;\n\n    \t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n    \t\t\tlight = lights[ l ];\n\n    \t\t\tcolor = light.color;\n    \t\t\tintensity = light.intensity;\n    \t\t\tdistance = light.distance;\n\n    \t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n    \t\t\tif ( light.isAmbientLight ) {\n\n    \t\t\t\tr += color.r * intensity;\n    \t\t\t\tg += color.g * intensity;\n    \t\t\t\tb += color.b * intensity;\n\n    \t\t\t} else if ( light.isDirectionalLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n    \t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isSpotLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.distance = distance;\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n    \t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n    \t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isPointLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.distance = light.distance;\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n    \t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n    \t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\n    \t\t\t\t}\n\n    \t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n    \t\t\t\t// equal to inverse of the light's position\n    \t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n    \t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n    \t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isHemisphereLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n    \t\t\t\tuniforms.direction.normalize();\n\n    \t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n    \t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.ambient[ 0 ] = r;\n    \t\t_lights.ambient[ 1 ] = g;\n    \t\t_lights.ambient[ 2 ] = b;\n\n    \t\t_lights.directional.length = directionalLength;\n    \t\t_lights.spot.length = spotLength;\n    \t\t_lights.point.length = pointLength;\n    \t\t_lights.hemi.length = hemiLength;\n\n    \t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n    \t}\n\n    \t// GL state setting\n\n    \tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n    \t\tstate.setCullFace( cullFace );\n    \t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n    \t};\n\n    \t// Textures\n\n    \tfunction allocTextureUnit() {\n\n    \t\tvar textureUnit = _usedTextureUnits;\n\n    \t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n    \t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n    \t\t}\n\n    \t\t_usedTextureUnits += 1;\n\n    \t\treturn textureUnit;\n\n    \t}\n\n    \tthis.allocTextureUnit = allocTextureUnit;\n\n    \t// this.setTexture2D = setTexture2D;\n    \tthis.setTexture2D = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\t// backwards compatibility: peel texture.texture\n    \t\treturn function setTexture2D( texture, slot ) {\n\n    \t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTexture = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTexture( texture, slot ) {\n\n    \t\t\tif ( ! warned ) {\n\n    \t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n    \t\t\t\twarned = true;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTextureCube = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTextureCube( texture, slot ) {\n\n    \t\t\t// backwards compatibility: peel texture.texture\n    \t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n    \t\t\t// TODO: unify these code paths\n    \t\t\tif ( ( texture && texture.isCubeTexture ) ||\n    \t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n    \t\t\t\t// CompressedTexture can have Array in image :/\n\n    \t\t\t\t// this function alone should take care of cube textures\n    \t\t\t\ttextures.setTextureCube( texture, slot );\n\n    \t\t\t} else {\n\n    \t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n    \t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.getCurrentRenderTarget = function() {\n\n    \t\treturn _currentRenderTarget;\n\n    \t};\n\n    \tthis.setRenderTarget = function ( renderTarget ) {\n\n    \t\t_currentRenderTarget = renderTarget;\n\n    \t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n    \t\t\ttextures.setupRenderTarget( renderTarget );\n\n    \t\t}\n\n    \t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n    \t\tvar framebuffer;\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n    \t\t\t} else {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n    \t\t\t}\n\n    \t\t\t_currentScissor.copy( renderTarget.scissor );\n    \t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n    \t\t\t_currentViewport.copy( renderTarget.viewport );\n\n    \t\t} else {\n\n    \t\t\tframebuffer = null;\n\n    \t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n    \t\t\t_currentScissorTest = _scissorTest;\n\n    \t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n    \t\t}\n\n    \t\tif ( _currentFramebuffer !== framebuffer ) {\n\n    \t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t\t_currentFramebuffer = framebuffer;\n\n    \t\t}\n\n    \t\tstate.scissor( _currentScissor );\n    \t\tstate.setScissorTest( _currentScissorTest );\n\n    \t\tstate.viewport( _currentViewport );\n\n    \t\tif ( isCube ) {\n\n    \t\t\tvar textureProperties = properties.get( renderTarget.texture );\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n    \t\t}\n\n    \t};\n\n    \tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n    \t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n    \t\tif ( framebuffer ) {\n\n    \t\t\tvar restore = false;\n\n    \t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\t\t\trestore = true;\n\n    \t\t\t}\n\n    \t\t\ttry {\n\n    \t\t\t\tvar texture = renderTarget.texture;\n    \t\t\t\tvar textureFormat = texture.format;\n    \t\t\t\tvar textureType = texture.type;\n\n    \t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n    \t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n    \t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n    \t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n    \t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n    \t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n    \t\t\t\t}\n\n    \t\t\t} finally {\n\n    \t\t\t\tif ( restore ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \t// Map three.js constants to WebGL constants\n\n    \tfunction paramThreeToGL( p ) {\n\n    \t\tvar extension;\n\n    \t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n    \t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n    \t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n    \t\tif ( p === NearestFilter ) return _gl.NEAREST;\n    \t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n    \t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n    \t\tif ( p === LinearFilter ) return _gl.LINEAR;\n    \t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n    \t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n    \t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n    \t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n    \t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n    \t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n    \t\tif ( p === ByteType ) return _gl.BYTE;\n    \t\tif ( p === ShortType ) return _gl.SHORT;\n    \t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n    \t\tif ( p === IntType ) return _gl.INT;\n    \t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n    \t\tif ( p === FloatType ) return _gl.FLOAT;\n\n    \t\textension = extensions.get( 'OES_texture_half_float' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n    \t\t}\n\n    \t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n    \t\tif ( p === RGBFormat ) return _gl.RGB;\n    \t\tif ( p === RGBAFormat ) return _gl.RGBA;\n    \t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n    \t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n    \t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n    \t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\n    \t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n    \t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n    \t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n    \t\tif ( p === ZeroFactor ) return _gl.ZERO;\n    \t\tif ( p === OneFactor ) return _gl.ONE;\n    \t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n    \t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n    \t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n    \t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n    \t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n    \t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n    \t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n    \t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n    \t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_blend_minmax' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n    \t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n    \t\tif ( extension !== null ){\n\n    \t\t\tif ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n    \t\t}\n\n    \t\treturn 0;\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function FogExp2 ( color, density ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n    \tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n    }\n\n    FogExp2.prototype.isFogExp2 = true;\n\n    FogExp2.prototype.clone = function () {\n\n    \treturn new FogExp2( this.color.getHex(), this.density );\n\n    };\n\n    FogExp2.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'FogExp2',\n    \t\tcolor: this.color.getHex(),\n    \t\tdensity: this.density\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Fog ( color, near, far ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n\n    \tthis.near = ( near !== undefined ) ? near : 1;\n    \tthis.far = ( far !== undefined ) ? far : 1000;\n\n    }\n\n    Fog.prototype.isFog = true;\n\n    Fog.prototype.clone = function () {\n\n    \treturn new Fog( this.color.getHex(), this.near, this.far );\n\n    };\n\n    Fog.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'Fog',\n    \t\tcolor: this.color.getHex(),\n    \t\tnear: this.near,\n    \t\tfar: this.far\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Scene () {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Scene';\n\n    \tthis.background = null;\n    \tthis.fog = null;\n    \tthis.overrideMaterial = null;\n\n    \tthis.autoUpdate = true; // checked by the renderer\n\n    }\n\n    Scene.prototype = Object.create( Object3D.prototype );\n\n    Scene.prototype.constructor = Scene;\n\n    Scene.prototype.copy = function ( source, recursive ) {\n\n    \tObject3D.prototype.copy.call( this, source, recursive );\n\n    \tif ( source.background !== null ) this.background = source.background.clone();\n    \tif ( source.fog !== null ) this.fog = source.fog.clone();\n    \tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n    \tthis.autoUpdate = source.autoUpdate;\n    \tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n    \treturn this;\n\n    };\n\n    Scene.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n    \tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlare( texture, size, distance, blending, color ) {\n\n    \tObject3D.call( this );\n\n    \tthis.lensFlares = [];\n\n    \tthis.positionScreen = new Vector3();\n    \tthis.customUpdateCallback = undefined;\n\n    \tif ( texture !== undefined ) {\n\n    \t\tthis.add( texture, size, distance, blending, color );\n\n    \t}\n\n    }\n\n    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LensFlare,\n\n    \tisLensFlare: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.positionScreen.copy( source.positionScreen );\n    \t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n    \t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n    \t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n    \t\tif ( size === undefined ) size = - 1;\n    \t\tif ( distance === undefined ) distance = 0;\n    \t\tif ( opacity === undefined ) opacity = 1;\n    \t\tif ( color === undefined ) color = new Color( 0xffffff );\n    \t\tif ( blending === undefined ) blending = NormalBlending;\n\n    \t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n    \t\tthis.lensFlares.push( {\n    \t\t\ttexture: texture,\t// THREE.Texture\n    \t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n    \t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n    \t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n    \t\t\tscale: 1, \t\t// scale\n    \t\t\trotation: 0, \t\t// rotation\n    \t\t\topacity: opacity,\t// opacity\n    \t\t\tcolor: color,\t\t// color\n    \t\t\tblending: blending\t// blending\n    \t\t} );\n\n    \t},\n\n    \t/*\n    \t * Update lens flares update positions on all flares based on the screen position\n    \t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n    \t */\n\n    \tupdateLensFlares: function () {\n\n    \t\tvar f, fl = this.lensFlares.length;\n    \t\tvar flare;\n    \t\tvar vecX = - this.positionScreen.x * 2;\n    \t\tvar vecY = - this.positionScreen.y * 2;\n\n    \t\tfor ( f = 0; f < fl; f ++ ) {\n\n    \t\t\tflare = this.lensFlares[ f ];\n\n    \t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n    \t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n    \t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n    \t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *\tuvOffset: new THREE.Vector2(),\n     *\tuvScale: new THREE.Vector2()\n     * }\n     */\n\n    function SpriteMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'SpriteMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n    \tthis.map = null;\n\n    \tthis.rotation = 0;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    SpriteMaterial.prototype = Object.create( Material.prototype );\n    SpriteMaterial.prototype.constructor = SpriteMaterial;\n\n    SpriteMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.map = source.map;\n\n    \tthis.rotation = source.rotation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Sprite( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Sprite';\n\n    \tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n    }\n\n    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Sprite,\n\n    \tisSprite: true,\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n    \t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n    \t\t\tif ( distanceSq > guessSizeSq ) {\n\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t\tintersects.push( {\n\n    \t\t\t\tdistance: Math.sqrt( distanceSq ),\n    \t\t\t\tpoint: this.position,\n    \t\t\t\tface: null,\n    \t\t\t\tobject: this\n\n    \t\t\t} );\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LOD() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'LOD';\n\n    \tObject.defineProperties( this, {\n    \t\tlevels: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: []\n    \t\t}\n    \t} );\n\n    }\n\n\n    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LOD,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source, false );\n\n    \t\tvar levels = source.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \taddLevel: function ( object, distance ) {\n\n    \t\tif ( distance === undefined ) distance = 0;\n\n    \t\tdistance = Math.abs( distance );\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\tif ( distance < levels[ l ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n    \t\tthis.add( object );\n\n    \t},\n\n    \tgetObjectForDistance: function ( distance ) {\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tif ( distance < levels[ i ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn levels[ i - 1 ].object;\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n    \t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n    \t\t};\n\n    \t}() ),\n\n    \tupdate: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar levels = this.levels;\n\n    \t\t\tif ( levels.length > 1 ) {\n\n    \t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\t\tvar distance = v1.distanceTo( v2 );\n\n    \t\t\t\tlevels[ 0 ].object.visible = true;\n\n    \t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n    \t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n    \t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( ; i < l; i ++ ) {\n\n    \t\t\t\t\tlevels[ i ].object.visible = false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.levels = [];\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tdata.object.levels.push( {\n    \t\t\t\tobject: level.object.uuid,\n    \t\t\t\tdistance: level.distance\n    \t\t\t} );\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { data: data, width: width, height: height };\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps  = false;\n\n    }\n\n    DataTexture.prototype = Object.create( Texture.prototype );\n    DataTexture.prototype.constructor = DataTexture;\n\n    DataTexture.prototype.isDataTexture = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author michael guerrero / http://realitymeltdown.com\n     * @author ikerr / http://verold.com\n     */\n\n    function Skeleton( bones, boneInverses, useVertexTexture ) {\n\n    \tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n    \tthis.identityMatrix = new Matrix4();\n\n    \t// copy the bone array\n\n    \tbones = bones || [];\n\n    \tthis.bones = bones.slice( 0 );\n\n    \t// create a bone texture or an array of floats\n\n    \tif ( this.useVertexTexture ) {\n\n    \t\t// layout (1 matrix = 4 pixels)\n    \t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    \t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n    \t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n    \t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n    \t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n    \t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n    \t\tsize = exports.Math.nextPowerOfTwo( Math.ceil( size ) );\n    \t\tsize = Math.max( size, 4 );\n\n    \t\tthis.boneTextureWidth = size;\n    \t\tthis.boneTextureHeight = size;\n\n    \t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n    \t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\n    \t} else {\n\n    \t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n    \t}\n\n    \t// use the supplied bone inverses or calculate the inverses\n\n    \tif ( boneInverses === undefined ) {\n\n    \t\tthis.calculateInverses();\n\n    \t} else {\n\n    \t\tif ( this.bones.length === boneInverses.length ) {\n\n    \t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n    \t\t\tthis.boneInverses = [];\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    }\n\n    Object.assign( Skeleton.prototype, {\n\n    \tcalculateInverses: function () {\n\n    \t\tthis.boneInverses = [];\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tvar inverse = new Matrix4();\n\n    \t\t\tif ( this.bones[ b ] ) {\n\n    \t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n    \t\t\t}\n\n    \t\t\tthis.boneInverses.push( inverse );\n\n    \t\t}\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tvar bone;\n\n    \t\t// recover the bind-time world matrices\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// compute the local matrices, positions, rotations and scales\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n    \t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n    \t\t\t\t}\n\n    \t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdate: ( function () {\n\n    \t\tvar offsetMatrix = new Matrix4();\n\n    \t\treturn function update() {\n\n    \t\t\t// flatten bone matrices to array\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\t// compute the offset between the current and the original transform\n\n    \t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n    \t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n    \t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n    \t\t\t}\n\n    \t\t\tif ( this.useVertexTexture ) {\n\n    \t\t\t\tthis.boneTexture.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t} )(),\n\n    \tclone: function () {\n\n    \t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function Bone( skin ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Bone';\n\n    \tthis.skin = skin;\n\n    }\n\n    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Bone,\n\n    \tisBone: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.skin = source.skin;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkinnedMesh( geometry, material, useVertexTexture ) {\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.type = 'SkinnedMesh';\n\n    \tthis.bindMode = \"attached\";\n    \tthis.bindMatrix = new Matrix4();\n    \tthis.bindMatrixInverse = new Matrix4();\n\n    \t// init bones\n\n    \t// TODO: remove bone creation as there is no reason (other than\n    \t// convenience) for THREE.SkinnedMesh to do this.\n\n    \tvar bones = [];\n\n    \tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n    \t\tvar bone, gbone;\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tbone = new Bone( this );\n    \t\t\tbones.push( bone );\n\n    \t\t\tbone.name = gbone.name;\n    \t\t\tbone.position.fromArray( gbone.pos );\n    \t\t\tbone.quaternion.fromArray( gbone.rotq );\n    \t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n    \t\t}\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n    \t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n    \t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.add( bones[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tthis.normalizeSkinWeights();\n\n    \tthis.updateMatrixWorld( true );\n    \tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n    }\n\n\n    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n    \tconstructor: SkinnedMesh,\n\n    \tisSkinnedMesh: true,\n\n    \tbind: function( skeleton, bindMatrix ) {\n\n    \t\tthis.skeleton = skeleton;\n\n    \t\tif ( bindMatrix === undefined ) {\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.skeleton.calculateInverses();\n\n    \t\t\tbindMatrix = this.matrixWorld;\n\n    \t\t}\n\n    \t\tthis.bindMatrix.copy( bindMatrix );\n    \t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tthis.skeleton.pose();\n\n    \t},\n\n    \tnormalizeSkinWeights: function () {\n\n    \t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\n    \t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n    \t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n    \t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tsw.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\n    \t\t\tvar vec = new Vector4();\n\n    \t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n    \t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n    \t\t\t\tvec.x = skinWeight.getX( i );\n    \t\t\t\tvec.y = skinWeight.getY( i );\n    \t\t\t\tvec.z = skinWeight.getZ( i );\n    \t\t\t\tvec.w = skinWeight.getW( i );\n\n    \t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tvec.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrixWorld: function( force ) {\n\n    \t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\n    \t\tif ( this.bindMode === \"attached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n    \t\t} else if ( this.bindMode === \"detached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function() {\n\n    \t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *  linecap: \"round\",\n     *  linejoin: \"round\"\n     * }\n     */\n\n    function LineBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n    \tthis.linecap = 'round';\n    \tthis.linejoin = 'round';\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineBasicMaterial.prototype = Object.create( Material.prototype );\n    LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n    LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n    LineBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n    \tthis.linecap = source.linecap;\n    \tthis.linejoin = source.linejoin;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Line( geometry, material, mode ) {\n\n    \tif ( mode === 1 ) {\n\n    \t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n    \t\treturn new LineSegments( geometry, material );\n\n    \t}\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Line';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Line,\n\n    \tisLine: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar precision = raycaster.linePrecision;\n    \t\t\tvar precisionSq = precision * precision;\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar vStart = new Vector3();\n    \t\t\tvar vEnd = new Vector3();\n    \t\t\tvar interSegment = new Vector3();\n    \t\t\tvar interRay = new Vector3();\n    \t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n    \t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n    \t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n    \t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n    \t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar nbVertices = vertices.length;\n\n    \t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n    \t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n    \t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LineSegments( geometry, material ) {\n\n    \tLine.call( this, geometry, material );\n\n    \tthis.type = 'LineSegments';\n\n    }\n\n    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n    \tconstructor: LineSegments,\n\n    \tisLineSegments: true\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  size: <float>,\n     *  sizeAttenuation: <bool>\n     * }\n     */\n\n    function PointsMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'PointsMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.map = null;\n\n    \tthis.size = 1;\n    \tthis.sizeAttenuation = true;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    PointsMaterial.prototype = Object.create( Material.prototype );\n    PointsMaterial.prototype.constructor = PointsMaterial;\n\n    PointsMaterial.prototype.isPointsMaterial = true;\n\n    PointsMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.size = source.size;\n    \tthis.sizeAttenuation = source.sizeAttenuation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Points( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Points';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Points,\n\n    \tisPoints: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar object = this;\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n    \t\t\tvar threshold = raycaster.params.Points.threshold;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n    \t\t\tvar localThresholdSq = localThreshold * localThreshold;\n    \t\t\tvar position = new Vector3();\n\n    \t\t\tfunction testPoint( point, index ) {\n\n    \t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n    \t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n    \t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n    \t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n    \t\t\t\t\t\tpoint: intersectPoint.clone(),\n    \t\t\t\t\t\tindex: index,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tobject: object\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n\n    \t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, a );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n    \t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, i );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n    \t\t\t\t\ttestPoint( vertices[ i ], i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Group() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Group';\n\n    }\n\n    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Group\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.generateMipmaps = false;\n\n    \tvar scope = this;\n\n    \tfunction update() {\n\n    \t\trequestAnimationFrame( update );\n\n    \t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n    \t\t\tscope.needsUpdate = true;\n\n    \t\t}\n\n    \t}\n\n    \tupdate();\n\n    }\n\n    VideoTexture.prototype = Object.create( Texture.prototype );\n    VideoTexture.prototype.constructor = VideoTexture;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { width: width, height: height };\n    \tthis.mipmaps = mipmaps;\n\n    \t// no flipping for cube textures\n    \t// (also flipping doesn't work for compressed textures )\n\n    \tthis.flipY = false;\n\n    \t// can't generate mipmaps for compressed textures\n    \t// mips must be embedded in DDS files\n\n    \tthis.generateMipmaps = false;\n\n    }\n\n    CompressedTexture.prototype = Object.create( Texture.prototype );\n    CompressedTexture.prototype.constructor = CompressedTexture;\n\n    CompressedTexture.prototype.isCompressedTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.needsUpdate = true;\n\n    }\n\n    CanvasTexture.prototype = Object.create( Texture.prototype );\n    CanvasTexture.prototype.constructor = CanvasTexture;\n\n    /**\n     * @author Matt DesLauriers / @mattdesl\n     * @author atix / arthursilber.de\n     */\n\n    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n    \tformat = format !== undefined ? format : DepthFormat;\n\n    \tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n    \t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\n    \t}\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.image = { width: width, height: height };\n\n    \tthis.type = type !== undefined ? type : UnsignedShortType;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps\t= false;\n\n    }\n\n    DepthTexture.prototype = Object.create( Texture.prototype );\n    DepthTexture.prototype.constructor = DepthTexture;\n    DepthTexture.prototype.isDepthTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WireframeGeometry( geometry ) {\n\n    \tBufferGeometry.call( this );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faces = geometry.faces;\n    \t\tvar numEdges = 0;\n\n    \t\t// allocate maximal size\n    \t\tvar edges = new Uint32Array( 6 * faces.length );\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\tvar key = edge.toString();\n\n    \t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n    \t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\tcoords[ index + 0 ] = vertex.x;\n    \t\t\t\tcoords[ index + 1 ] = vertex.y;\n    \t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tif ( geometry.index !== null ) {\n\n    \t\t\t// Indexed BufferGeometry\n\n    \t\t\tvar indices = geometry.index.array;\n    \t\t\tvar vertices = geometry.attributes.position;\n    \t\t\tvar groups = geometry.groups;\n    \t\t\tvar numEdges = 0;\n\n    \t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\tgeometry.addGroup( 0, indices.length );\n\n    \t\t\t}\n\n    \t\t\t// allocate maximal size\n    \t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n    \t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n    \t\t\t\tvar group = groups[ o ];\n\n    \t\t\t\tvar start = group.start;\n    \t\t\t\tvar count = group.count;\n\n    \t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n    \t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n    \t\t\t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\t\t\tvar key = edge.toString();\n\n    \t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n    \t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n    \t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n    \t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t} else {\n\n    \t\t\t// non-indexed BufferGeometry\n\n    \t\t\tvar vertices = geometry.attributes.position.array;\n    \t\t\tvar numEdges = vertices.length / 3;\n    \t\t\tvar numTris = numEdges / 3;\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\tvar index = 18 * i + 6 * j;\n\n    \t\t\t\t\tvar index1 = 9 * i + 3 * j;\n    \t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n    \t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n    \t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n    \t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n    \t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n    \t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n    \t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n    WireframeGeometry.prototype.constructor = WireframeGeometry;\n\n    /**\n     * @author zz85 / https://github.com/zz85\n     * Parametric Surfaces Geometry\n     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n     *\n     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n     *\n     */\n\n    function ParametricGeometry( func, slices, stacks ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ParametricGeometry';\n\n    \tthis.parameters = {\n    \t\tfunc: func,\n    \t\tslices: slices,\n    \t\tstacks: stacks\n    \t};\n\n    \tvar verts = this.vertices;\n    \tvar faces = this.faces;\n    \tvar uvs = this.faceVertexUvs[ 0 ];\n\n    \tvar i, j, p;\n    \tvar u, v;\n\n    \tvar sliceCount = slices + 1;\n\n    \tfor ( i = 0; i <= stacks; i ++ ) {\n\n    \t\tv = i / stacks;\n\n    \t\tfor ( j = 0; j <= slices; j ++ ) {\n\n    \t\t\tu = j / slices;\n\n    \t\t\tp = func( u, v );\n    \t\t\tverts.push( p );\n\n    \t\t}\n\n    \t}\n\n    \tvar a, b, c, d;\n    \tvar uva, uvb, uvc, uvd;\n\n    \tfor ( i = 0; i < stacks; i ++ ) {\n\n    \t\tfor ( j = 0; j < slices; j ++ ) {\n\n    \t\t\ta = i * sliceCount + j;\n    \t\t\tb = i * sliceCount + j + 1;\n    \t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n    \t\t\td = ( i + 1 ) * sliceCount + j;\n\n    \t\t\tuva = new Vector2( j / slices, i / stacks );\n    \t\t\tuvb = new Vector2( ( j + 1 ) / slices, i / stacks );\n    \t\t\tuvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n    \t\t\tuvd = new Vector2( j / slices, ( i + 1 ) / stacks );\n\n    \t\t\tfaces.push( new Face3( a, b, d ) );\n    \t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n    \t\t\tfaces.push( new Face3( b, c, d ) );\n    \t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \t// console.log(this);\n\n    \t// magic bullet\n    \t// var diff = this.mergeVertices();\n    \t// console.log('removed ', diff, ' vertices by merging');\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    ParametricGeometry.prototype = Object.create( Geometry.prototype );\n    ParametricGeometry.prototype.constructor = ParametricGeometry;\n\n    /**\n     * @author clockworkgeek / https://github.com/clockworkgeek\n     * @author timothypratley / https://github.com/timothypratley\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PolyhedronGeometry';\n\n    \tthis.parameters = {\n    \t\tvertices: vertices,\n    \t\tindices: indices,\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    \tradius = radius || 1;\n    \tdetail = detail || 0;\n\n    \tvar that = this;\n\n    \tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n    \t\tprepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n    \t}\n\n    \tvar p = this.vertices;\n\n    \tvar faces = [];\n\n    \tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n    \t\tvar v1 = p[ indices[ i ] ];\n    \t\tvar v2 = p[ indices[ i + 1 ] ];\n    \t\tvar v3 = p[ indices[ i + 2 ] ];\n\n    \t\tfaces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n    \t}\n\n    \tvar centroid = new Vector3();\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tsubdivide( faces[ i ], detail );\n\n    \t}\n\n\n    \t// Handle case when face straddles the seam\n\n    \tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n    \t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\tvar x0 = uvs[ 0 ].x;\n    \t\tvar x1 = uvs[ 1 ].x;\n    \t\tvar x2 = uvs[ 2 ].x;\n\n    \t\tvar max = Math.max( x0, x1, x2 );\n    \t\tvar min = Math.min( x0, x1, x2 );\n\n    \t\tif ( max > 0.9 && min < 0.1 ) {\n\n    \t\t\t// 0.9 is somewhat arbitrary\n\n    \t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n    \t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n    \t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n    \t\t}\n\n    \t}\n\n\n    \t// Apply radius\n\n    \tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n    \t\tthis.vertices[ i ].multiplyScalar( radius );\n\n    \t}\n\n\n    \t// Merge vertices\n\n    \tthis.mergeVertices();\n\n    \tthis.computeFaceNormals();\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n\n    \t// Project vector onto sphere's surface\n\n    \tfunction prepare( vector ) {\n\n    \t\tvar vertex = vector.normalize().clone();\n    \t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n    \t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n    \t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n    \t\tvar v = inclination( vector ) / Math.PI + 0.5;\n    \t\tvertex.uv = new Vector2( u, 1 - v );\n\n    \t\treturn vertex;\n\n    \t}\n\n\n    \t// Approximate a curved face with recursively sub-divided triangles.\n\n    \tfunction make( v1, v2, v3 ) {\n\n    \t\tvar face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n    \t\tthat.faces.push( face );\n\n    \t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n    \t\tvar azi = azimuth( centroid );\n\n    \t\tthat.faceVertexUvs[ 0 ].push( [\n    \t\t\tcorrectUV( v1.uv, v1, azi ),\n    \t\t\tcorrectUV( v2.uv, v2, azi ),\n    \t\t\tcorrectUV( v3.uv, v3, azi )\n    \t\t] );\n\n    \t}\n\n\n    \t// Analytically subdivide a face to the required detail level.\n\n    \tfunction subdivide( face, detail ) {\n\n    \t\tvar cols = Math.pow( 2, detail );\n    \t\tvar a = prepare( that.vertices[ face.a ] );\n    \t\tvar b = prepare( that.vertices[ face.b ] );\n    \t\tvar c = prepare( that.vertices[ face.c ] );\n    \t\tvar v = [];\n\n    \t\t// Construct all of the vertices for this subdivision.\n\n    \t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n    \t\t\tv[ i ] = [];\n\n    \t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n    \t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n    \t\t\tvar rows = cols - i;\n\n    \t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n    \t\t\t\tif ( j === 0 && i === cols ) {\n\n    \t\t\t\t\tv[ i ][ j ] = aj;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Construct all of the faces.\n\n    \t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n    \t\t\t\tvar k = Math.floor( j / 2 );\n\n    \t\t\t\tif ( j % 2 === 0 ) {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ],\n    \t\t\t\t\t\tv[ i ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Angle around the Y axis, counter-clockwise when looking from above.\n\n    \tfunction azimuth( vector ) {\n\n    \t\treturn Math.atan2( vector.z, - vector.x );\n\n    \t}\n\n\n    \t// Angle above the XZ plane.\n\n    \tfunction inclination( vector ) {\n\n    \t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n    \t}\n\n\n    \t// Texture fixing helper. Spheres have some odd behaviours.\n\n    \tfunction correctUV( uv, vector, azimuth ) {\n\n    \t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );\n    \t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n    \t\treturn uv.clone();\n\n    \t}\n\n    }\n\n    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function TetrahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'TetrahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function OctahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'OctahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function IcosahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n    \tvar vertices = [\n    \t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n    \t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n    \t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n    \t];\n\n    \tvar indices = [\n    \t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n    \t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n    \t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n    \t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'IcosahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n    /**\n     * @author Abe Pazos / https://hamoid.com\n     */\n\n    function DodecahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n    \tvar r = 1 / t;\n\n    \tvar vertices = [\n\n    \t\t// (±1, ±1, ±1)\n    \t\t- 1, - 1, - 1,    - 1, - 1,  1,\n    \t\t- 1,  1, - 1,    - 1,  1,  1,\n    \t\t 1, - 1, - 1,     1, - 1,  1,\n    \t\t 1,  1, - 1,     1,  1,  1,\n\n    \t\t// (0, ±1/φ, ±φ)\n    \t\t 0, - r, - t,     0, - r,  t,\n    \t\t 0,  r, - t,     0,  r,  t,\n\n    \t\t// (±1/φ, ±φ, 0)\n    \t\t- r, - t,  0,    - r,  t,  0,\n    \t\t r, - t,  0,     r,  t,  0,\n\n    \t\t// (±φ, 0, ±1/φ)\n    \t\t- t,  0, - r,     t,  0, - r,\n    \t\t- t,  0,  r,     t,  0,  r\n    \t];\n\n    \tvar indices = [\n    \t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n    \t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n    \t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n    \t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n    \t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n    \t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n    \t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n    \t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n    \t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n    \t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n    \t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n    \t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'DodecahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n    /**\n     * @author WestLangley / https://github.com/WestLangley\n     * @author zz85 / https://github.com/zz85\n     * @author miningold / https://github.com/miningold\n     * @author jonobr1 / https://github.com/jonobr1\n     *\n     * Modified from the TorusKnotGeometry by @oosmoxiecode\n     *\n     * Creates a tube which extrudes along a 3d spline\n     *\n     * Uses parallel transport frames as described in\n     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n     */\n\n    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TubeGeometry';\n\n    \tthis.parameters = {\n    \t\tpath: path,\n    \t\tsegments: segments,\n    \t\tradius: radius,\n    \t\tradialSegments: radialSegments,\n    \t\tclosed: closed,\n    \t\ttaper: taper\n    \t};\n\n    \tsegments = segments || 64;\n    \tradius = radius || 1;\n    \tradialSegments = radialSegments || 8;\n    \tclosed = closed || false;\n    \ttaper = taper || TubeGeometry.NoTaper;\n\n    \tvar grid = [];\n\n    \tvar scope = this,\n\n    \t\ttangent,\n    \t\tnormal,\n    \t\tbinormal,\n\n    \t\tnumpoints = segments + 1,\n\n    \t\tu, v, r,\n\n    \t\tcx, cy,\n    \t\tpos, pos2 = new Vector3(),\n    \t\ti, j,\n    \t\tip, jp,\n    \t\ta, b, c, d,\n    \t\tuva, uvb, uvc, uvd;\n\n    \tvar frames = new TubeGeometry.FrenetFrames( path, segments, closed ),\n    \t\ttangents = frames.tangents,\n    \t\tnormals = frames.normals,\n    \t\tbinormals = frames.binormals;\n\n    \t// proxy internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \tfunction vert( x, y, z ) {\n\n    \t\treturn scope.vertices.push( new Vector3( x, y, z ) ) - 1;\n\n    \t}\n\n    \t// construct the grid\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tgrid[ i ] = [];\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\tpos = path.getPointAt( u );\n\n    \t\ttangent = tangents[ i ];\n    \t\tnormal = normals[ i ];\n    \t\tbinormal = binormals[ i ];\n\n    \t\tr = radius * taper( u );\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tv = j / radialSegments * 2 * Math.PI;\n\n    \t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n    \t\t\tcy = r * Math.sin( v );\n\n    \t\t\tpos2.copy( pos );\n    \t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n    \t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n    \t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n    \t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n    \t\t}\n\n    \t}\n\n\n    \t// construct the mesh\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n    \t\t\tjp = ( j + 1 ) % radialSegments;\n\n    \t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n    \t\t\tb = grid[ ip ][ j ];\n    \t\t\tc = grid[ ip ][ jp ];\n    \t\t\td = grid[ i ][ jp ];\n\n    \t\t\tuva = new Vector2( i / segments, j / radialSegments );\n    \t\t\tuvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );\n    \t\t\tuvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n    \t\t\tuvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n    \t\t\tthis.faces.push( new Face3( a, b, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n    \t\t\tthis.faces.push( new Face3( b, c, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    TubeGeometry.prototype = Object.create( Geometry.prototype );\n    TubeGeometry.prototype.constructor = TubeGeometry;\n\n    TubeGeometry.NoTaper = function ( u ) {\n\n    \treturn 1;\n\n    };\n\n    TubeGeometry.SinusoidalTaper = function ( u ) {\n\n    \treturn Math.sin( Math.PI * u );\n\n    };\n\n    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n    \tvar\tnormal = new Vector3(),\n\n    \t\ttangents = [],\n    \t\tnormals = [],\n    \t\tbinormals = [],\n\n    \t\tvec = new Vector3(),\n    \t\tmat = new Matrix4(),\n\n    \t\tnumpoints = segments + 1,\n    \t\ttheta,\n    \t\tsmallest,\n\n    \t\ttx, ty, tz,\n    \t\ti, u;\n\n\n    \t// expose internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \t// compute the tangent vectors for each segment on the path\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\ttangents[ i ] = path.getTangentAt( u );\n    \t\ttangents[ i ].normalize();\n\n    \t}\n\n    \tinitialNormal3();\n\n    \t/*\n    \tfunction initialNormal1(lastBinormal) {\n    \t\t// fixed start binormal. Has dangers of 0 vectors\n    \t\tnormals[ 0 ] = new THREE.Vector3();\n    \t\tbinormals[ 0 ] = new THREE.Vector3();\n    \t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n    \t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n    \t}\n\n    \tfunction initialNormal2() {\n\n    \t\t// This uses the Frenet-Serret formula for deriving binormal\n    \t\tvar t2 = path.getTangentAt( epsilon );\n\n    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n    \t}\n    \t*/\n\n    \tfunction initialNormal3() {\n\n    \t\t// select an initial normal vector perpendicular to the first tangent vector,\n    \t\t// and in the direction of the smallest tangent xyz component\n\n    \t\tnormals[ 0 ] = new Vector3();\n    \t\tbinormals[ 0 ] = new Vector3();\n    \t\tsmallest = Number.MAX_VALUE;\n    \t\ttx = Math.abs( tangents[ 0 ].x );\n    \t\tty = Math.abs( tangents[ 0 ].y );\n    \t\ttz = Math.abs( tangents[ 0 ].z );\n\n    \t\tif ( tx <= smallest ) {\n\n    \t\t\tsmallest = tx;\n    \t\t\tnormal.set( 1, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( ty <= smallest ) {\n\n    \t\t\tsmallest = ty;\n    \t\t\tnormal.set( 0, 1, 0 );\n\n    \t\t}\n\n    \t\tif ( tz <= smallest ) {\n\n    \t\t\tnormal.set( 0, 0, 1 );\n\n    \t\t}\n\n    \t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n    \t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t}\n\n\n    \t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n    \tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n    \t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n    \t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n    \t\tif ( vec.length() > Number.EPSILON ) {\n\n    \t\t\tvec.normalize();\n\n    \t\t\ttheta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n    \t\t}\n\n    \t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t}\n\n\n    \t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n    \tif ( closed ) {\n\n    \t\ttheta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n    \t\ttheta /= ( numpoints - 1 );\n\n    \t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n    \t\t\ttheta = - theta;\n\n    \t\t}\n\n    \t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\t\t// twist a little...\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n    \t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     *\n     * see: http://www.blackpawn.com/texts/pqtorus/\n     */\n    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusKnotBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \ttubularSegments = Math.floor( tubularSegments ) || 64;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \tp = p || 2;\n    \tq = q || 3;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar i, j, index = 0, indexOffset = 0;\n\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n    \tvar uv = new Vector2();\n\n    \tvar P1 = new Vector3();\n    \tvar P2 = new Vector3();\n\n    \tvar B = new Vector3();\n    \tvar T = new Vector3();\n    \tvar N = new Vector3();\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n    \t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n    \t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n    \t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n    \t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n    \t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n    \t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n    \t\t// calculate orthonormal basis\n\n    \t\tT.subVectors( P2, P1 );\n    \t\tN.addVectors( P2, P1 );\n    \t\tB.crossVectors( T, N );\n    \t\tN.crossVectors( B, T );\n\n    \t\t// normalize B, N. T can be ignored, we don't use it\n\n    \t\tB.normalize();\n    \t\tN.normalize();\n\n    \t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n    \t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n    \t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n    \t\t\tvar cx = - tube * Math.cos( v );\n    \t\t\tvar cy = tube * Math.sin( v );\n\n    \t\t\t// now calculate the final vertex position.\n    \t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n    \t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n    \t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n    \t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n    \t\t\tnormal.subVectors( vertex, P1 ).normalize();\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / tubularSegments;\n    \t\t\tuv.y = j / radialSegments;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n    \t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n    \t\t\tvar c = ( radialSegments + 1 ) * j + i;\n    \t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// this function calculates the current position on the torus curve\n\n    \tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n    \t\tvar cu = Math.cos( u );\n    \t\tvar su = Math.sin( u );\n    \t\tvar quOverP = q / p * u;\n    \t\tvar cs = Math.cos( quOverP );\n\n    \t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n    \t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n    \t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n    \t}\n\n    }\n\n    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     */\n\n    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusKnotGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n    \tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n    \tthis.mergeVertices();\n\n    }\n\n    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \ttubularSegments = Math.floor( tubularSegments ) || 6;\n    \tarc = arc || Math.PI * 2;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n\n    \t// helper variables\n    \tvar center = new Vector3();\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n    \t\t\tvar u = i / tubularSegments * arc;\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n    \t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n    \t\t\tvertex.z = tube * Math.sin( v );\n\n    \t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n    \t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n    \t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n    \t\t\t// this vector is used to calculate the normal\n    \t\t\tcenter.x = radius * Math.cos( u );\n    \t\t\tcenter.y = radius * Math.sin( u );\n\n    \t\t\t// normal\n    \t\t\tnormal.subVectors( vertex, center ).normalize();\n\n    \t\t\tnormals[ vertexBufferOffset ] = normal.x;\n    \t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n    \t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n    \t\t\t// uv\n    \t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n    \t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n    \t\t\t// update offsets\n    \t\t\tvertexBufferOffset += 3;\n    \t\t\tuvBufferOffset += 2;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n    \t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n    \t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n    \t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n    \t\t\t// face one\n    \t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t// face two\n    \t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t// update offset\n    \t\t\tindexBufferOffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n     */\n\n    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n    }\n\n    TorusGeometry.prototype = Object.create( Geometry.prototype );\n    TorusGeometry.prototype.constructor = TorusGeometry;\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.ShapeUtils = {\n\n    \t// calculate area of the contour polygon\n\n    \tarea: function ( contour ) {\n\n    \t\tvar n = contour.length;\n    \t\tvar a = 0.0;\n\n    \t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n    \t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n    \t\t}\n\n    \t\treturn a * 0.5;\n\n    \t},\n\n    \ttriangulate: ( function () {\n\n    \t\t/**\n    \t\t * This code is a quick port of code written in C++ which was submitted to\n    \t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n    \t\t * See original code and more information here:\n    \t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n    \t\t *\n    \t\t * ported to actionscript by Zevan Rosser\n    \t\t * www.actionsnippet.com\n    \t\t *\n    \t\t * ported to javascript by Joshua Koo\n    \t\t * http://www.lab4games.net/zz85/blog\n    \t\t *\n    \t\t */\n\n    \t\tfunction snip( contour, u, v, w, n, verts ) {\n\n    \t\t\tvar p;\n    \t\t\tvar ax, ay, bx, by;\n    \t\t\tvar cx, cy, px, py;\n\n    \t\t\tax = contour[ verts[ u ] ].x;\n    \t\t\tay = contour[ verts[ u ] ].y;\n\n    \t\t\tbx = contour[ verts[ v ] ].x;\n    \t\t\tby = contour[ verts[ v ] ].y;\n\n    \t\t\tcx = contour[ verts[ w ] ].x;\n    \t\t\tcy = contour[ verts[ w ] ].y;\n\n    \t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n    \t\t\tvar aX, aY, bX, bY, cX, cY;\n    \t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n    \t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n    \t\t\taX = cx - bx;  aY = cy - by;\n    \t\t\tbX = ax - cx;  bY = ay - cy;\n    \t\t\tcX = bx - ax;  cY = by - ay;\n\n    \t\t\tfor ( p = 0; p < n; p ++ ) {\n\n    \t\t\t\tpx = contour[ verts[ p ] ].x;\n    \t\t\t\tpy = contour[ verts[ p ] ].y;\n\n    \t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n    \t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n    \t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n    \t\t\t\tapx = px - ax;  apy = py - ay;\n    \t\t\t\tbpx = px - bx;  bpy = py - by;\n    \t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n    \t\t\t\t// see if p is inside triangle abc\n\n    \t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n    \t\t\t\tcCROSSap = cX * apy - cY * apx;\n    \t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n    \t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// takes in an contour array and returns\n\n    \t\treturn function triangulate( contour, indices ) {\n\n    \t\t\tvar n = contour.length;\n\n    \t\t\tif ( n < 3 ) return null;\n\n    \t\t\tvar result = [],\n    \t\t\t\tverts = [],\n    \t\t\t\tvertIndices = [];\n\n    \t\t\t/* we want a counter-clockwise polygon in verts */\n\n    \t\t\tvar u, v, w;\n\n    \t\t\tif ( exports.ShapeUtils.area( contour ) > 0.0 ) {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n    \t\t\t}\n\n    \t\t\tvar nv = n;\n\n    \t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n    \t\t\tvar count = 2 * nv;   /* error detection */\n\n    \t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n    \t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n    \t\t\t\tif ( ( count -- ) <= 0 ) {\n\n    \t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n    \t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n    \t\t\t\t\t//return null;\n    \t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n    \t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n    \t\t\t\t\tif ( indices ) return vertIndices;\n    \t\t\t\t\treturn result;\n\n    \t\t\t\t}\n\n    \t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n    \t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n    \t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n    \t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n    \t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n    \t\t\t\t\tvar a, b, c, s, t;\n\n    \t\t\t\t\t/* true names of the vertices */\n\n    \t\t\t\t\ta = verts[ u ];\n    \t\t\t\t\tb = verts[ v ];\n    \t\t\t\t\tc = verts[ w ];\n\n    \t\t\t\t\t/* output Triangle */\n\n    \t\t\t\t\tresult.push( [ contour[ a ],\n    \t\t\t\t\t\tcontour[ b ],\n    \t\t\t\t\t\tcontour[ c ] ] );\n\n\n    \t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n    \t\t\t\t\t/* remove v from the remaining polygon */\n\n    \t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n    \t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tnv --;\n\n    \t\t\t\t\t/* reset error detection counter */\n\n    \t\t\t\t\tcount = 2 * nv;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( indices ) return vertIndices;\n    \t\t\treturn result;\n\n    \t\t}\n\n    \t} )(),\n\n    \ttriangulateShape: function ( contour, holes ) {\n\n    \t\tfunction removeDupEndPts(points) {\n\n    \t\t\tvar l = points.length;\n\n    \t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\t\tpoints.pop();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tremoveDupEndPts( contour );\n    \t\tholes.forEach( removeDupEndPts );\n\n    \t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n    \t\t\t// inOtherPt needs to be collinear to the inSegment\n    \t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n    \t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n    \t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n    \t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n    \t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n    \t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n    \t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n    \t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n    \t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n    \t\t\t\t// not parallel\n\n    \t\t\t\tvar perpSeg2;\n    \t\t\t\tif ( limit > 0 ) {\n\n    \t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n    \t\t\t\t}\n\n    \t\t\t\t// i.e. to reduce rounding errors\n    \t\t\t\t// intersection at endpoint of segment#1?\n    \t\t\t\tif ( perpSeg2 === 0 ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\tif ( perpSeg2 === limit ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt2 ];\n\n    \t\t\t\t}\n    \t\t\t\t// intersection at endpoint of segment#2?\n    \t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n    \t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n    \t\t\t\t// return real intersection point\n    \t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n    \t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n    \t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// parallel or collinear\n    \t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n    \t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n    \t\t\t\t// they are collinear or degenerate\n    \t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n    \t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n    \t\t\t\t// both segments are points\n    \t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n    \t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n    \t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n    \t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n    \t\t\t\t}\n    \t\t\t\t// segment#1  is a single point\n    \t\t\t\tif ( seg1Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\t// segment#2  is a single point\n    \t\t\t\tif ( seg2Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n    \t\t\t\t\treturn [ inSeg2Pt1 ];\n\n    \t\t\t\t}\n\n    \t\t\t\t// they are collinear segments, which might overlap\n    \t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n    \t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n    \t\t\t\tif ( seg1dx !== 0 ) {\n\n    \t\t\t\t\t// the segments are NOT on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// the segments are on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n    \t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n    \t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg2min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n    \t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n    \t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg1min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n    \t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n    \t\t\t// The order of legs is important\n\n    \t\t\t// translation of all points, so that Vertex is at (0,0)\n    \t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n    \t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n    \t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n    \t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n    \t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n    \t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n    \t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n    \t\t\t\t// angle != 180 deg.\n\n    \t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n    \t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n    \t\t\t\tif ( from2toAngle > 0 ) {\n\n    \t\t\t\t\t// main angle < 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// main angle > 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// angle == 180 deg.\n    \t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n    \t\t\t\treturn\t( from2otherAngle > 0 );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tfunction removeHoles( contour, holes ) {\n\n    \t\t\tvar shape = contour.concat(); // work on this shape\n    \t\t\tvar hole;\n\n    \t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n    \t\t\t\t// Check if hole point lies within angle around shape point\n    \t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n    \t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n    \t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n    \t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n    \t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n    \t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\t// Check if shape point lies within angle around hole point\n    \t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n    \t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n    \t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n    \t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n    \t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n    \t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\ttrue;\n\n    \t\t\t}\n\n    \t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with shape edges\n    \t\t\t\tvar sIdx, nextIdx, intersection;\n    \t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n    \t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n    \t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n    \t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar indepHoles = [];\n\n    \t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with hole edges\n    \t\t\t\tvar ihIdx, chkHole,\n    \t\t\t\t\thIdx, nextIdx, intersection;\n    \t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n    \t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n    \t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n    \t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n    \t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n    \t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar holeIndex, shapeIndex,\n    \t\t\t\tshapePt, holePt,\n    \t\t\t\tholeIdx, cutKey, failedCuts = [],\n    \t\t\t\ttmpShape1, tmpShape2,\n    \t\t\t\ttmpHole1, tmpHole2;\n\n    \t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\t\tindepHoles.push( h );\n\n    \t\t\t}\n\n    \t\t\tvar minShapeIndex = 0;\n    \t\t\tvar counter = indepHoles.length * 2;\n    \t\t\twhile ( indepHoles.length > 0 ) {\n\n    \t\t\t\tcounter --;\n    \t\t\t\tif ( counter < 0 ) {\n\n    \t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t\t// search for shape-vertex and hole-vertex,\n    \t\t\t\t// which can be connected without intersections\n    \t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n    \t\t\t\t\tshapePt = shape[ shapeIndex ];\n    \t\t\t\t\tholeIndex\t= - 1;\n\n    \t\t\t\t\t// search for hole which can be reached without intersections\n    \t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n    \t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n    \t\t\t\t\t\t// prevent multiple checks\n    \t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n    \t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n    \t\t\t\t\t\thole = holes[ holeIdx ];\n    \t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n    \t\t\t\t\t\t\tholePt = hole[ h2 ];\n    \t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n    \t\t\t\t\t\t\tholeIndex = h2;\n    \t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n    \t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n    \t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n    \t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n    \t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n    \t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n    \t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n    \t\t\t\t\t\t\t// Debug only, to show the selected cuts\n    \t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n    \t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn shape; \t\t\t/* shape with no holes */\n\n    \t\t}\n\n\n    \t\tvar i, il, f, face,\n    \t\t\tkey, index,\n    \t\t\tallPointsMap = {};\n\n    \t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n    \t\tvar allpoints = contour.concat();\n\n    \t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n    \t\t}\n\n    \t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n    \t\t// prepare all points map\n\n    \t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n    \t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n    \t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n    \t\t\t}\n\n    \t\t\tallPointsMap[ key ] = i;\n\n    \t\t}\n\n    \t\t// remove holes by cutting paths to holes and adding them to the shape\n    \t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n    \t\tvar triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n    \t\t//console.log( \"triangles\",triangles, triangles.length );\n\n    \t\t// check all face vertices against all points map\n\n    \t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n    \t\t\tface = triangles[ i ];\n\n    \t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n    \t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n    \t\t\t\tindex = allPointsMap[ key ];\n\n    \t\t\t\tif ( index !== undefined ) {\n\n    \t\t\t\t\tface[ f ] = index;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn triangles.concat();\n\n    \t},\n\n    \tisClockWise: function ( pts ) {\n\n    \t\treturn exports.ShapeUtils.area( pts ) < 0;\n\n    \t},\n\n    \t// Bezier Curves formulas obtained from\n    \t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n    \t// Quad Bezier Functions\n\n    \tb2: ( function () {\n\n    \t\tfunction b2p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * p;\n\n    \t\t}\n\n    \t\tfunction b2p1( t, p ) {\n\n    \t\t\treturn 2 * ( 1 - t ) * t * p;\n\n    \t\t}\n\n    \t\tfunction b2p2( t, p ) {\n\n    \t\t\treturn t * t * p;\n\n    \t\t}\n\n    \t\treturn function b2( t, p0, p1, p2 ) {\n\n    \t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n    \t\t};\n\n    \t} )(),\n\n    \t// Cubic Bezier Functions\n\n    \tb3: ( function () {\n\n    \t\tfunction b3p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * k * p;\n\n    \t\t}\n\n    \t\tfunction b3p1( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * k * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p2( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * t * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p3( t, p ) {\n\n    \t\t\treturn t * t * t * p;\n\n    \t\t}\n\n    \t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n    \t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     * Creates extruded geometry from a path shape.\n     *\n     * parameters = {\n     *\n     *  curveSegments: <int>, // number of points on the curves\n     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n     *  amount: <int>, // Depth to extrude the shape\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into the original shape bevel goes\n     *  bevelSize: <float>, // how far from shape outline is bevel\n     *  bevelSegments: <int>, // number of bevel layers\n     *\n     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n     *\n     *  uvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ExtrudeGeometry( shapes, options ) {\n\n    \tif ( typeof( shapes ) === \"undefined\" ) {\n\n    \t\tshapes = [];\n    \t\treturn;\n\n    \t}\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ExtrudeGeometry';\n\n    \tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    \t// can't really use automatic vertex normals\n    \t// as then front and back sides get smoothed too\n    \t// should do separate smoothing just for sides\n\n    \t//this.computeVertexNormals();\n\n    \t//console.log( \"took\", ( Date.now() - startTime ) );\n\n    }\n\n    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tvar sl = shapes.length;\n\n    \tfor ( var s = 0; s < sl; s ++ ) {\n\n    \t\tvar shape = shapes[ s ];\n    \t\tthis.addShape( shape, options );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tvar amount = options.amount !== undefined ? options.amount : 100;\n\n    \tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n    \tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n    \tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n    \tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar steps = options.steps !== undefined ? options.steps : 1;\n\n    \tvar extrudePath = options.extrudePath;\n    \tvar extrudePts, extrudeByPath = false;\n\n    \t// Use default WorldUVGenerator if no UV generators are specified.\n    \tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n    \tvar splineTube, binormal, normal, position2;\n    \tif ( extrudePath ) {\n\n    \t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n    \t\textrudeByPath = true;\n    \t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n    \t\t// SETUP TNB variables\n\n    \t\t// Reuse TNB from TubeGeomtry for now.\n    \t\t// TODO1 - have a .isClosed in spline?\n\n    \t\tsplineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n    \t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n    \t\tbinormal = new Vector3();\n    \t\tnormal = new Vector3();\n    \t\tposition2 = new Vector3();\n\n    \t}\n\n    \t// Safeguards if bevels are not enabled\n\n    \tif ( ! bevelEnabled ) {\n\n    \t\tbevelSegments = 0;\n    \t\tbevelThickness = 0;\n    \t\tbevelSize = 0;\n\n    \t}\n\n    \t// Variables initialization\n\n    \tvar ahole, h, hl; // looping of holes\n    \tvar scope = this;\n\n    \tvar shapesOffset = this.vertices.length;\n\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( ahole ) ) {\n\n    \t\t\t\tholes[ h ] = ahole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n    \t}\n\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t/* Vertices */\n\n    \tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\tvertices = vertices.concat( ahole );\n\n    \t}\n\n\n    \tfunction scalePt2( pt, vec, size ) {\n\n    \t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n    \t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n    \t}\n\n    \tvar b, bs, t, z,\n    \t\tvert, vlen = vertices.length,\n    \t\tface, flen = faces.length;\n\n\n    \t// Find directions for point movement\n\n\n    \tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n    \t\t// computes for inPt the corresponding point inPt' on a new contour\n    \t\t//   shifted by 1 unit (length of normalized vector) to the left\n    \t\t// if we walk along contour clockwise, this new contour is outside the old one\n    \t\t//\n    \t\t// inPt' is the intersection of the two lines parallel to the two\n    \t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n    \t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n    \t\t// good reading for geometry algorithms (here: line-line intersection)\n    \t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n    \t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n    \t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n    \t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n    \t\t// check for collinear edges\n    \t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n    \t\t\t// not collinear\n\n    \t\t\t// length of vectors for normalizing\n\n    \t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n    \t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n    \t\t\t// shift adjacent points by unit vectors to the left\n\n    \t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n    \t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n    \t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n    \t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n    \t\t\t// scaling factor for v_prev to intersection point\n\n    \t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n    \t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n    \t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\t\t// vector from inPt to intersection point\n\n    \t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n    \t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n    \t\t\t// Don't normalize!, otherwise sharp corners become ugly\n    \t\t\t//  but prevent crazy spikes\n    \t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n    \t\t\tif ( v_trans_lensq <= 2 ) {\n\n    \t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\n    \t\t\t} else {\n\n    \t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// handle special case of collinear edges\n\n    \t\t\tvar direction_eq = false;\t\t// assumes: opposite\n    \t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n    \t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n    \t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n    \t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( direction_eq ) {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n    \t\t\t\tv_trans_x = - v_prev_y;\n    \t\t\t\tv_trans_y =  v_prev_x;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n    \t\t\t} else {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n    \t\t\t\tv_trans_x = v_prev_x;\n    \t\t\t\tv_trans_y = v_prev_y;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n    \t}\n\n\n    \tvar contourMovements = [];\n\n    \tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\tif ( j === il ) j = 0;\n    \t\tif ( k === il ) k = 0;\n\n    \t\t//  (j)---(i)---(k)\n    \t\t// console.log('i,j,k', i, j , k)\n\n    \t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n    \t}\n\n    \tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\toneHoleMovements = [];\n\n    \t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\t\tif ( j === il ) j = 0;\n    \t\t\tif ( k === il ) k = 0;\n\n    \t\t\t//  (j)---(i)---(k)\n    \t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n    \t\t}\n\n    \t\tholesMovements.push( oneHoleMovements );\n    \t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n    \t}\n\n\n    \t// Loop bevelSegments, 1 for the front, 1 for the back\n\n    \tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n    \t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n    \t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tbs = bevelSize;\n\n    \t// Back facing vertices\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\tif ( ! extrudeByPath ) {\n\n    \t\t\tv( vert.x, vert.y, 0 );\n\n    \t\t} else {\n\n    \t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n    \t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n    \t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n    \t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n    \t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t}\n\n    \t}\n\n    \t// Add stepped vertices...\n    \t// Including front facing vertices\n\n    \tvar s;\n\n    \tfor ( s = 1; s <= steps; s ++ ) {\n\n    \t\tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n    \t\t\t} else {\n\n    \t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n    \t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n    \t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n    \t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n    \t\t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Add bevel segments planes\n\n    \t//for ( b = 1; b <= bevelSegments; b ++ ) {\n    \tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n    \t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t/* Faces */\n\n    \t// Top and bottom faces\n\n    \tbuildLidFaces();\n\n    \t// Sides faces\n\n    \tbuildSideFaces();\n\n\n    \t/////  Internal functions\n\n    \tfunction buildLidFaces() {\n\n    \t\tif ( bevelEnabled ) {\n\n    \t\t\tvar layer = 0; // steps + 1\n    \t\t\tvar offset = vlen * layer;\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n    \t\t\t}\n\n    \t\t\tlayer = steps + bevelSegments * 2;\n    \t\t\toffset = vlen * layer;\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t// Create faces for the z-sides of the shape\n\n    \tfunction buildSideFaces() {\n\n    \t\tvar layeroffset = 0;\n    \t\tsidewalls( contour, layeroffset );\n    \t\tlayeroffset += contour.length;\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\tsidewalls( ahole, layeroffset );\n\n    \t\t\t//, true\n    \t\t\tlayeroffset += ahole.length;\n\n    \t\t}\n\n    \t}\n\n    \tfunction sidewalls( contour, layeroffset ) {\n\n    \t\tvar j, k;\n    \t\ti = contour.length;\n\n    \t\twhile ( -- i >= 0 ) {\n\n    \t\t\tj = i;\n    \t\t\tk = i - 1;\n    \t\t\tif ( k < 0 ) k = contour.length - 1;\n\n    \t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n    \t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n    \t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n    \t\t\t\tvar slen1 = vlen * s;\n    \t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n    \t\t\t\tvar a = layeroffset + j + slen1,\n    \t\t\t\t\tb = layeroffset + k + slen1,\n    \t\t\t\t\tc = layeroffset + k + slen2,\n    \t\t\t\t\td = layeroffset + j + slen2;\n\n    \t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \tfunction v( x, y, z ) {\n\n    \t\tscope.vertices.push( new Vector3( x, y, z ) );\n\n    \t}\n\n    \tfunction f3( a, b, c ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\n    \t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n    \t}\n\n    \tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n    \t\td += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n    \t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\n    \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.WorldUVGenerator = {\n\n    \tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n\n    \t\treturn [\n    \t\t\tnew Vector2( a.x, a.y ),\n    \t\t\tnew Vector2( b.x, b.y ),\n    \t\t\tnew Vector2( c.x, c.y )\n    \t\t];\n\n    \t},\n\n    \tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n    \t\tvar d = vertices[ indexD ];\n\n    \t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.x, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.x, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.x, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.x, 1 - d.z )\n    \t\t\t];\n\n    \t\t} else {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.y, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.y, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.y, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.y, 1 - d.z )\n    \t\t\t];\n\n    \t\t}\n\n    \t}\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * Text = 3D Text\n     *\n     * parameters = {\n     *  font: <THREE.Font>, // font\n     *\n     *  size: <float>, // size of the text\n     *  height: <float>, // thickness to extrude text\n     *  curveSegments: <int>, // number of points on the curves\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into text bevel goes\n     *  bevelSize: <float> // how far from text outline is bevel\n     * }\n     */\n\n    function TextGeometry( text, parameters ) {\n\n    \tparameters = parameters || {};\n\n    \tvar font = parameters.font;\n\n    \tif ( (font && font.isFont) === false ) {\n\n    \t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n    \t\treturn new Geometry();\n\n    \t}\n\n    \tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n    \t// translate parameters to ExtrudeGeometry API\n\n    \tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n    \t// defaults\n\n    \tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n    \tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n    \tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n    \tExtrudeGeometry.call( this, shapes, parameters );\n\n    \tthis.type = 'TextGeometry';\n\n    }\n\n    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n    TextGeometry.prototype.constructor = TextGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     * based on THREE.SphereGeometry\n     */\n\n    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'SphereBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n\n    \twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n    \theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n    \tphiStart = phiStart !== undefined ? phiStart : 0;\n    \tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n    \tvar thetaEnd = thetaStart + thetaLength;\n\n    \tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n    \tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \tvar index = 0, vertices = [], normal = new Vector3();\n\n    \tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n    \t\tvar verticesRow = [];\n\n    \t\tvar v = y / heightSegments;\n\n    \t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n    \t\t\tvar u = x / widthSegments;\n\n    \t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n    \t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n    \t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n    \t\t\tnormal.set( px, py, pz ).normalize();\n\n    \t\t\tpositions.setXYZ( index, px, py, pz );\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n    \t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\tverticesRow.push( index );\n\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\tvertices.push( verticesRow );\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n    \t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n    \t\t\tvar v1 = vertices[ y ][ x + 1 ];\n    \t\t\tvar v2 = vertices[ y ][ x ];\n    \t\t\tvar v3 = vertices[ y + 1 ][ x ];\n    \t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n    \t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n    \t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n    \tthis.addAttribute( 'position', positions );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'SphereGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n    }\n\n    SphereGeometry.prototype = Object.create( Geometry.prototype );\n    SphereGeometry.prototype.constructor = SphereGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'RingBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tinnerRadius = innerRadius || 20;\n    \touterRadius = outerRadius || 50;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n    \tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n    \tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// some helper variables\n    \tvar index = 0, indexOffset = 0, segment;\n    \tvar radius = innerRadius;\n    \tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \t// values are generate from the inside of the ring to the outside\n\n    \tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n    \t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * Math.cos( segment );\n    \t\t\tvertex.y = radius * Math.sin( segment );\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n    \t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex++;\n\n    \t\t}\n\n    \t\t// increase the radius for next row of vertices\n    \t\tradius += radiusStep;\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 0; j < phiSegments; j ++ ) {\n\n    \t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n    \t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n    \t\t\tsegment = i + thetaSegmentLevel;\n\n    \t\t\t// indices\n    \t\t\tvar a = segment;\n    \t\t\tvar b = segment + thetaSegments + 1;\n    \t\t\tvar c = segment + thetaSegments + 2;\n    \t\t\tvar d = segment + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    }\n\n    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n    /**\n     * @author Kaleb Murphy\n     */\n\n    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'RingGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n    }\n\n    RingGeometry.prototype = Object.create( Geometry.prototype );\n    RingGeometry.prototype.constructor = RingGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PlaneGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n    }\n\n    PlaneGeometry.prototype = Object.create( Geometry.prototype );\n    PlaneGeometry.prototype.constructor = PlaneGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n     // points - to create a closed torus, one must use a set of points\n     //    like so: [ a, b, c, d, a ], see first is the same as last.\n     // segments - the number of circumference segments to create\n     // phiStart - the starting radian\n     // phiLength - the radian (0 to 2PI) range of the lathed section\n     //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'LatheBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tsegments = Math.floor( segments ) || 12;\n    \tphiStart = phiStart || 0;\n    \tphiLength = phiLength || Math.PI * 2;\n\n    \t// clamp phiLength so it's in range of [ 0, 2PI ]\n    \tphiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( segments + 1 ) * points.length;\n    \tvar indexCount = segments * points.length * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar index = 0, indexOffset = 0, base;\n    \tvar inverseSegments = 1.0 / segments;\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar i, j;\n\n    \t// generate vertices and uvs\n\n    \tfor ( i = 0; i <= segments; i ++ ) {\n\n    \t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n    \t\tvar sin = Math.sin( phi );\n    \t\tvar cos = Math.cos( phi );\n\n    \t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = points[ j ].x * sin;\n    \t\t\tvertex.y = points[ j ].y;\n    \t\t\tvertex.z = points[ j ].x * cos;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / segments;\n    \t\t\tuv.y = j / ( points.length - 1 );\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n    \t\t\tbase = j + i * points.length;\n\n    \t\t\t// indices\n    \t\t\tvar a = base;\n    \t\t\tvar b = base + points.length;\n    \t\t\tvar c = base + points.length + 1;\n    \t\t\tvar d = base + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// generate normals\n\n    \tthis.computeVertexNormals();\n\n    \t// if the geometry is closed, we need to average the normals along the seam.\n    \t// because the corresponding vertices are identical (but still have different UVs).\n\n    \tif( phiLength === Math.PI * 2 ) {\n\n    \t\tvar normals = this.attributes.normal.array;\n    \t\tvar n1 = new Vector3();\n    \t\tvar n2 = new Vector3();\n    \t\tvar n = new Vector3();\n\n    \t\t// this is the buffer offset for the last line of vertices\n    \t\tbase = segments * points.length * 3;\n\n    \t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n    \t\t\t// select the normal of the vertex in the first line\n    \t\t\tn1.x = normals[ j + 0 ];\n    \t\t\tn1.y = normals[ j + 1 ];\n    \t\t\tn1.z = normals[ j + 2 ];\n\n    \t\t\t// select the normal of the vertex in the last line\n    \t\t\tn2.x = normals[ base + j + 0 ];\n    \t\t\tn2.y = normals[ base + j + 1 ];\n    \t\t\tn2.z = normals[ base + j + 2 ];\n\n    \t\t\t// average normals\n    \t\t\tn.addVectors( n1, n2 ).normalize();\n\n    \t\t\t// assign the new values to both normals\n    \t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n    \t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n    \t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n    \t\t} // next row\n\n    \t}\n\n    }\n\n    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n    /**\n     * @author astrodud / http://astrodud.isgreat.org/\n     * @author zz85 / https://github.com/zz85\n     * @author bhouston / http://clara.io\n     */\n\n    // points - to create a closed torus, one must use a set of points\n    //    like so: [ a, b, c, d, a ], see first is the same as last.\n    // segments - the number of circumference segments to create\n    // phiStart - the starting radian\n    // phiLength - the radian (0 to 2PI) range of the lathed section\n    //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheGeometry( points, segments, phiStart, phiLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'LatheGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    LatheGeometry.prototype = Object.create( Geometry.prototype );\n    LatheGeometry.prototype.constructor = LatheGeometry;\n\n    /**\n     * @author jonobr1 / http://jonobr1.com\n     *\n     * Creates a one-sided polygonal geometry from a path shape. Similar to\n     * ExtrudeGeometry.\n     *\n     * parameters = {\n     *\n     *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n     *\n     *\tmaterial: <int> // material index for front and back faces\n     *\tuvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ShapeGeometry( shapes, options ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ShapeGeometry';\n\n    \tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    }\n\n    ShapeGeometry.prototype = Object.create( Geometry.prototype );\n    ShapeGeometry.prototype.constructor = ShapeGeometry;\n\n    /**\n     * Add an array of shapes to THREE.ShapeGeometry.\n     */\n    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n    \t\tthis.addShape( shapes[ i ], options );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n     */\n    ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tif ( options === undefined ) options = {};\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar material = options.material;\n    \tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n    \t//\n\n    \tvar i, l, hole;\n\n    \tvar shapesOffset = this.vertices.length;\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n    \t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\t\thole = holes[ i ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( hole ) ) {\n\n    \t\t\t\tholes[ i ] = hole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false;\n\n    \t}\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t// Vertices\n\n    \tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\thole = holes[ i ];\n    \t\tvertices = vertices.concat( hole );\n\n    \t}\n\n    \t//\n\n    \tvar vert, vlen = vertices.length;\n    \tvar face, flen = faces.length;\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = vertices[ i ];\n\n    \t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\n    \t}\n\n    \tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\tface = faces[ i ];\n\n    \t\tvar a = face[ 0 ] + shapesOffset;\n    \t\tvar b = face[ 1 ] + shapesOffset;\n    \t\tvar c = face[ 2 ] + shapesOffset;\n\n    \t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n    \t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function EdgesGeometry( geometry, thresholdAngle ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n    \tvar thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tvar geometry2;\n\n    \tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tgeometry2 = new Geometry();\n    \t\tgeometry2.fromBufferGeometry( geometry );\n\n    \t} else {\n\n    \t\tgeometry2 = geometry.clone();\n\n    \t}\n\n    \tgeometry2.mergeVertices();\n    \tgeometry2.computeFaceNormals();\n\n    \tvar vertices = geometry2.vertices;\n    \tvar faces = geometry2.faces;\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tvar face = faces[ i ];\n\n    \t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\tedge.sort( sortFunction );\n\n    \t\t\tvar key = edge.toString();\n\n    \t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n    \t\t\t} else {\n\n    \t\t\t\thash[ key ].face2 = i;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tvar coords = [];\n\n    \tfor ( var key in hash ) {\n\n    \t\tvar h = hash[ key ];\n\n    \t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n    \t\t\tvar vertex = vertices[ h.vert1 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t\tvertex = vertices[ h.vert2 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t}\n\n    \t}\n\n    \tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\n    }\n\n    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n    EdgesGeometry.prototype.constructor = EdgesGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CylinderBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tvar scope = this;\n\n    \tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n    \tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n    \theight = height !== undefined ? height : 100;\n\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n\n    \topenEnded = openEnded !== undefined ? openEnded : false;\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n    \t// used to calculate buffer length\n\n    \tvar nbCap = 0;\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) nbCap ++;\n    \t\tif ( radiusBottom > 0 ) nbCap ++;\n\n    \t}\n\n    \tvar vertexCount = calculateVertexCount();\n    \tvar indexCount = calculateIndexCount();\n\n    \t// buffers\n\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n\n    \tvar index = 0,\n    \t    indexOffset = 0,\n    \t    indexArray = [],\n    \t    halfHeight = height / 2;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// generate geometry\n\n    \tgenerateTorso();\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) generateCap( true );\n    \t\tif ( radiusBottom > 0 ) generateCap( false );\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount() {\n\n    \t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction calculateIndexCount() {\n\n    \t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += radialSegments * nbCap * 3;\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction generateTorso() {\n\n    \t\tvar x, y;\n    \t\tvar normal = new Vector3();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\t// this will be used to calculate the normal\n    \t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n    \t\t\tvar indexRow = [];\n\n    \t\t\tvar v = y / heightSegments;\n\n    \t\t\t// calculate the radius of the current row\n    \t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n    \t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\t\tvar u = x / radialSegments;\n\n    \t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\t\tvar sinTheta = Math.sin( theta );\n    \t\t\t\tvar cosTheta = Math.cos( theta );\n\n    \t\t\t\t// vertex\n    \t\t\t\tvertex.x = radius * sinTheta;\n    \t\t\t\tvertex.y = - v * height + halfHeight;\n    \t\t\t\tvertex.z = radius * cosTheta;\n    \t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t\t// normal\n    \t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n    \t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t\t// uv\n    \t\t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\t\t// save index of vertex in respective row\n    \t\t\t\tindexRow.push( index );\n\n    \t\t\t\t// increase index\n    \t\t\t\tindex ++;\n\n    \t\t\t}\n\n    \t\t\t// now save vertices of the row in our index array\n    \t\t\tindexArray.push( indexRow );\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n    \t\t\t\t// we use the index array to access the correct indices\n    \t\t\t\tvar i1 = indexArray[ y ][ x ];\n    \t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n    \t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n    \t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n    \t\t\t\t// face one\n    \t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// update counters\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, 0 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    \tfunction generateCap( top ) {\n\n    \t\tvar x, centerIndexStart, centerIndexEnd;\n\n    \t\tvar uv = new Vector2();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n    \t\tvar sign = ( top === true ) ? 1 : - 1;\n\n    \t\t// save the index of the first center vertex\n    \t\tcenterIndexStart = index;\n\n    \t\t// first we generate the center vertex data of the cap.\n    \t\t// because the geometry needs one set of uvs per face,\n    \t\t// we must generate a center vertex per face/segment\n\n    \t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = 0.5;\n    \t\t\tuv.y = 0.5;\n\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// save the index of the last center vertex\n    \t\tcenterIndexEnd = index;\n\n    \t\t// now we generate the surrounding vertices, normals and uvs\n\n    \t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\tvar u = x / radialSegments;\n    \t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\tvar cosTheta = Math.cos( theta );\n    \t\t\tvar sinTheta = Math.sin( theta );\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * sinTheta;\n    \t\t\tvertex.y = halfHeight * sign;\n    \t\t\tvertex.z = radius * cosTheta;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n    \t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tvar c = centerIndexStart + x;\n    \t\t\tvar i = centerIndexEnd + x;\n\n    \t\t\tif ( top === true ) {\n\n    \t\t\t\t// face top\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t} else {\n\n    \t\t\t\t// face bottom\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t}\n\n    \t\t\t// update counters\n    \t\t\tgroupCount += 3;\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    }\n\n    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CylinderGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    CylinderGeometry.prototype = Object.create( Geometry.prototype );\n    CylinderGeometry.prototype.constructor = CylinderGeometry;\n\n    /**\n     * @author abelnation / http://github.com/abelnation\n     */\n\n    function ConeGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n    ConeGeometry.prototype.constructor = ConeGeometry;\n\n    /*\n     * @author: abelnation / http://github.com/abelnation\n     */\n\n    function ConeBufferGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderBufferGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CircleBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n    \tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tvar vertices = segments + 2;\n\n    \tvar positions = new Float32Array( vertices * 3 );\n    \tvar normals = new Float32Array( vertices * 3 );\n    \tvar uvs = new Float32Array( vertices * 2 );\n\n    \t// center data is already zero, but need to set a few extras\n    \tnormals[ 2 ] = 1.0;\n    \tuvs[ 0 ] = 0.5;\n    \tuvs[ 1 ] = 0.5;\n\n    \tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n    \t\tvar segment = thetaStart + s / segments * thetaLength;\n\n    \t\tpositions[ i ] = radius * Math.cos( segment );\n    \t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n    \t\tnormals[ i + 2 ] = 1; // normal z\n\n    \t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n    \t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var i = 1; i <= segments; i ++ ) {\n\n    \t\tindices.push( i, i + 1, 0 );\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n    /**\n     * @author hughes\n     */\n\n    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CircleGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n    }\n\n    CircleGeometry.prototype = Object.create( Geometry.prototype );\n    CircleGeometry.prototype.constructor = CircleGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n     */\n\n    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'BoxGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n    \tthis.mergeVertices();\n\n    }\n\n    BoxGeometry.prototype = Object.create( Geometry.prototype );\n    BoxGeometry.prototype.constructor = BoxGeometry;\n\n\n\n    var Geometries = Object.freeze({\n    \tWireframeGeometry: WireframeGeometry,\n    \tParametricGeometry: ParametricGeometry,\n    \tTetrahedronGeometry: TetrahedronGeometry,\n    \tOctahedronGeometry: OctahedronGeometry,\n    \tIcosahedronGeometry: IcosahedronGeometry,\n    \tDodecahedronGeometry: DodecahedronGeometry,\n    \tPolyhedronGeometry: PolyhedronGeometry,\n    \tTubeGeometry: TubeGeometry,\n    \tTorusKnotGeometry: TorusKnotGeometry,\n    \tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n    \tTorusGeometry: TorusGeometry,\n    \tTorusBufferGeometry: TorusBufferGeometry,\n    \tTextGeometry: TextGeometry,\n    \tSphereBufferGeometry: SphereBufferGeometry,\n    \tSphereGeometry: SphereGeometry,\n    \tRingGeometry: RingGeometry,\n    \tRingBufferGeometry: RingBufferGeometry,\n    \tPlaneBufferGeometry: PlaneBufferGeometry,\n    \tPlaneGeometry: PlaneGeometry,\n    \tLatheGeometry: LatheGeometry,\n    \tLatheBufferGeometry: LatheBufferGeometry,\n    \tShapeGeometry: ShapeGeometry,\n    \tExtrudeGeometry: ExtrudeGeometry,\n    \tEdgesGeometry: EdgesGeometry,\n    \tConeGeometry: ConeGeometry,\n    \tConeBufferGeometry: ConeBufferGeometry,\n    \tCylinderGeometry: CylinderGeometry,\n    \tCylinderBufferGeometry: CylinderBufferGeometry,\n    \tCircleBufferGeometry: CircleBufferGeometry,\n    \tCircleGeometry: CircleGeometry,\n    \tBoxBufferGeometry: BoxBufferGeometry,\n    \tBoxGeometry: BoxGeometry\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ShadowMaterial() {\n\n    \tShaderMaterial.call( this, {\n    \t\tuniforms: exports.UniformsUtils.merge( [\n    \t\t\tUniformsLib[ \"lights\" ],\n    \t\t\t{\n    \t\t\t\topacity: { value: 1.0 }\n    \t\t\t}\n    \t\t] ),\n    \t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n    \t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n    \t} );\n\n    \tthis.lights = true;\n    \tthis.transparent = true;\n\n    \tObject.defineProperties( this, {\n    \t\topacity: {\n    \t\t\tenumerable: true,\n    \t\t\tget: function () {\n    \t\t\t\treturn this.uniforms.opacity.value;\n    \t\t\t},\n    \t\t\tset: function ( value ) {\n    \t\t\t\tthis.uniforms.opacity.value = value;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    ShadowMaterial.prototype.constructor = ShadowMaterial;\n\n    ShadowMaterial.prototype.isShadowMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function RawShaderMaterial( parameters ) {\n\n    \tShaderMaterial.call( this, parameters );\n\n    \tthis.type = 'RawShaderMaterial';\n\n    }\n\n    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n    RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MultiMaterial( materials ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.type = 'MultiMaterial';\n\n    \tthis.materials = materials instanceof Array ? materials : [];\n\n    \tthis.visible = true;\n\n    }\n\n    MultiMaterial.prototype = {\n\n    \tconstructor: MultiMaterial,\n\n    \tisMultiMaterial: true,\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.2,\n    \t\t\t\ttype: 'material',\n    \t\t\t\tgenerator: 'MaterialExporter'\n    \t\t\t},\n    \t\t\tuuid: this.uuid,\n    \t\t\ttype: this.type,\n    \t\t\tmaterials: []\n    \t\t};\n\n    \t\tvar materials = this.materials;\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tvar material = materials[ i ].toJSON( meta );\n    \t\t\tdelete material.metadata;\n\n    \t\t\toutput.materials.push( material );\n\n    \t\t}\n\n    \t\toutput.visible = this.visible;\n\n    \t\treturn output;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\tvar material = new this.constructor();\n\n    \t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n    \t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n    \t\t}\n\n    \t\tmaterial.visible = this.visible;\n\n    \t\treturn material;\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  roughness: <float>,\n     *  metalness: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  roughnessMap: new THREE.Texture( <Image> ),\n     *\n     *  metalnessMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n     *  envMapIntensity: <float>\n     *\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshStandardMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.type = 'MeshStandardMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.roughness = 0.5;\n    \tthis.metalness = 0.5;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.roughnessMap = null;\n\n    \tthis.metalnessMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.envMapIntensity = 1.0;\n\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshStandardMaterial.prototype = Object.create( Material.prototype );\n    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n    MeshStandardMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.color.copy( source.color );\n    \tthis.roughness = source.roughness;\n    \tthis.metalness = source.metalness;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.roughnessMap = source.roughnessMap;\n\n    \tthis.metalnessMap = source.metalnessMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.envMapIntensity = source.envMapIntensity;\n\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  reflectivity: <float>\n     * }\n     */\n\n    function MeshPhysicalMaterial( parameters ) {\n\n    \tMeshStandardMaterial.call( this );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.type = 'MeshPhysicalMaterial';\n\n    \tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n    \tthis.clearCoat = 0.0;\n    \tthis.clearCoatRoughness = 0.0;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n    MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n    \tMeshStandardMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.reflectivity = source.reflectivity;\n\n    \tthis.clearCoat = source.clearCoat;\n    \tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  specular: <hex>,\n     *  shininess: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshPhongMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshPhongMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.specular = new Color( 0x111111 );\n    \tthis.shininess = 30;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhongMaterial.prototype = Object.create( Material.prototype );\n    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n    MeshPhongMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.specular.copy( source.specular );\n    \tthis.shininess = source.shininess;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * parameters = {\n     *  opacity: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshNormalMaterial( parameters ) {\n\n    \tMaterial.call( this, parameters );\n\n    \tthis.type = 'MeshNormalMaterial';\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n    \tthis.morphTargets = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshNormalMaterial.prototype = Object.create( Material.prototype );\n    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n    MeshNormalMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshLambertMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshLambertMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshLambertMaterial.prototype = Object.create( Material.prototype );\n    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n    MeshLambertMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *\n     *  scale: <float>,\n     *  dashSize: <float>,\n     *  gapSize: <float>\n     * }\n     */\n\n    function LineDashedMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineDashedMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n\n    \tthis.scale = 1;\n    \tthis.dashSize = 3;\n    \tthis.gapSize = 1;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineDashedMaterial.prototype = Object.create( Material.prototype );\n    LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n    LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n    LineDashedMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n\n    \tthis.scale = source.scale;\n    \tthis.dashSize = source.dashSize;\n    \tthis.gapSize = source.gapSize;\n\n    \treturn this;\n\n    };\n\n\n\n    var Materials = Object.freeze({\n    \tShadowMaterial: ShadowMaterial,\n    \tSpriteMaterial: SpriteMaterial,\n    \tRawShaderMaterial: RawShaderMaterial,\n    \tShaderMaterial: ShaderMaterial,\n    \tPointsMaterial: PointsMaterial,\n    \tMultiMaterial: MultiMaterial,\n    \tMeshPhysicalMaterial: MeshPhysicalMaterial,\n    \tMeshStandardMaterial: MeshStandardMaterial,\n    \tMeshPhongMaterial: MeshPhongMaterial,\n    \tMeshNormalMaterial: MeshNormalMaterial,\n    \tMeshLambertMaterial: MeshLambertMaterial,\n    \tMeshDepthMaterial: MeshDepthMaterial,\n    \tMeshBasicMaterial: MeshBasicMaterial,\n    \tLineDashedMaterial: LineDashedMaterial,\n    \tLineBasicMaterial: LineBasicMaterial,\n    \tMaterial: Material\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Cache = {\n\n    \tenabled: false,\n\n    \tfiles: {},\n\n    \tadd: function ( key, file ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n    \t\tthis.files[ key ] = file;\n\n    \t},\n\n    \tget: function ( key ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n    \t\treturn this.files[ key ];\n\n    \t},\n\n    \tremove: function ( key ) {\n\n    \t\tdelete this.files[ key ];\n\n    \t},\n\n    \tclear: function () {\n\n    \t\tthis.files = {};\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LoadingManager( onLoad, onProgress, onError ) {\n\n    \tvar scope = this;\n\n    \tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n    \tthis.onStart = undefined;\n    \tthis.onLoad = onLoad;\n    \tthis.onProgress = onProgress;\n    \tthis.onError = onError;\n\n    \tthis.itemStart = function ( url ) {\n\n    \t\titemsTotal ++;\n\n    \t\tif ( isLoading === false ) {\n\n    \t\t\tif ( scope.onStart !== undefined ) {\n\n    \t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tisLoading = true;\n\n    \t};\n\n    \tthis.itemEnd = function ( url ) {\n\n    \t\titemsLoaded ++;\n\n    \t\tif ( scope.onProgress !== undefined ) {\n\n    \t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n    \t\t}\n\n    \t\tif ( itemsLoaded === itemsTotal ) {\n\n    \t\t\tisLoading = false;\n\n    \t\t\tif ( scope.onLoad !== undefined ) {\n\n    \t\t\t\tscope.onLoad();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \tthis.itemError = function ( url ) {\n\n    \t\tif ( scope.onError !== undefined ) {\n\n    \t\t\tscope.onError( url );\n\n    \t\t}\n\n    \t};\n\n    }\n\n    exports.DefaultLoadingManager = new LoadingManager();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function XHRLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( XHRLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.path !== undefined ) url = this.path + url;\n\n    \t\tvar scope = this;\n\n    \t\tvar cached = exports.Cache.get( url );\n\n    \t\tif ( cached !== undefined ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\tsetTimeout( function () {\n\n    \t\t\t\tif ( onLoad ) onLoad( cached );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, 0 );\n\n    \t\t\treturn cached;\n\n    \t\t}\n\n    \t\tvar request = new XMLHttpRequest();\n    \t\trequest.open( 'GET', url, true );\n\n    \t\trequest.addEventListener( 'load', function ( event ) {\n\n    \t\t\tvar response = event.target.response;\n\n    \t\t\texports.Cache.add( url, response );\n\n    \t\t\tif ( this.status === 200 ) {\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else if ( this.status === 0 ) {\n\n    \t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n    \t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n    \t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( onError ) onError( event );\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t}\n\n    \t\t}, false );\n\n    \t\tif ( onProgress !== undefined ) {\n\n    \t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n    \t\t\t\tonProgress( event );\n\n    \t\t\t}, false );\n\n    \t\t}\n\n    \t\trequest.addEventListener( 'error', function ( event ) {\n\n    \t\t\tif ( onError ) onError( event );\n\n    \t\t\tscope.manager.itemError( url );\n\n    \t\t}, false );\n\n    \t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n    \t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n    \t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\n    \t\trequest.send( null );\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn request;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetResponseType: function ( value ) {\n\n    \t\tthis.responseType = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * Abstract Base class to block based textures loader (dds, pvr, ...)\n     */\n\n    function CompressedTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( CompressedTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar images = [];\n\n    \t\tvar texture = new CompressedTexture();\n    \t\ttexture.image = images;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setPath( this.path );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( url[ i ], function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\timages[ i ] = {\n    \t\t\t\t\twidth: texDatas.width,\n    \t\t\t\t\theight: texDatas.height,\n    \t\t\t\t\tformat: texDatas.format,\n    \t\t\t\t\tmipmaps: texDatas.mipmaps\n    \t\t\t\t};\n\n    \t\t\t\tloaded += 1;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n    \t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tif ( Array.isArray( url ) ) {\n\n    \t\t\tvar loaded = 0;\n\n    \t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n    \t\t\t\tloadTexture( i );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// compressed cubemap texture stored in a single DDS file\n\n    \t\t\tloader.load( url, function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\tif ( texDatas.isCubemap ) {\n\n    \t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n    \t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n    \t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n    \t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n    \t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n    \t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n    \t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n    \t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttexture.image.width = texDatas.width;\n    \t\t\t\t\ttexture.image.height = texDatas.height;\n    \t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n    \t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author Nikos M. / https://github.com/foo123/\n     *\n     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n     */\n\n    var DataTextureLoader = BinaryTextureLoader;\n    function BinaryTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( BinaryTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texture = new DataTexture();\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar texData = scope._parser( buffer );\n\n    \t\t\tif ( ! texData ) return;\n\n    \t\t\tif ( undefined !== texData.image ) {\n\n    \t\t\t\ttexture.image = texData.image;\n\n    \t\t\t} else if ( undefined !== texData.data ) {\n\n    \t\t\t\ttexture.image.width = texData.width;\n    \t\t\t\ttexture.image.height = texData.height;\n    \t\t\t\ttexture.image.data = texData.data;\n\n    \t\t\t}\n\n    \t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n    \t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n    \t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n    \t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n    \t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n    \t\t\tif ( undefined !== texData.format ) {\n\n    \t\t\t\ttexture.format = texData.format;\n\n    \t\t\t}\n    \t\t\tif ( undefined !== texData.type ) {\n\n    \t\t\t\ttexture.type = texData.type;\n\n    \t\t\t}\n\n    \t\t\tif ( undefined !== texData.mipmaps ) {\n\n    \t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n    \t\t\t}\n\n    \t\t\tif ( 1 === texData.mipmapCount ) {\n\n    \t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t}\n\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad ) onLoad( texture, texData );\n\n    \t\t}, onProgress, onError );\n\n\n    \t\treturn texture;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ImageLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( ImageLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n    \t\timage.onload = function () {\n\n    \t\t\timage.onload = null;\n\n    \t\t\tURL.revokeObjectURL( image.src );\n\n    \t\t\tif ( onLoad ) onLoad( image );\n\n    \t\t\tscope.manager.itemEnd( url );\n\n    \t\t};\n\n    \t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n    \t\t\timage.src = url;\n\n    \t\t} else {\n\n    \t\t\tvar loader = new XHRLoader();\n    \t\t\tloader.setPath( this.path );\n    \t\t\tloader.setResponseType( 'blob' );\n    \t\t\tloader.setWithCredentials( this.withCredentials );\n    \t\t\tloader.load( url, function ( blob ) {\n\n    \t\t\t\timage.src = URL.createObjectURL( blob );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn image;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( CubeTextureLoader.prototype, {\n\n    \tload: function ( urls, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new CubeTexture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setPath( this.path );\n\n    \t\tvar loaded = 0;\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( urls[ i ], function ( image ) {\n\n    \t\t\t\ttexture.images[ i ] = image;\n\n    \t\t\t\tloaded ++;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, undefined, onError );\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n    \t\t\tloadTexture( i );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function TextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( TextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new Texture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.setPath( this.path );\n    \t\tloader.load( url, function ( image ) {\n\n    \t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n    \t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n    \t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n    \t\t\ttexture.image = image;\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad !== undefined ) {\n\n    \t\t\t\tonLoad( texture );\n\n    \t\t\t}\n\n    \t\t}, onProgress, onError );\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Light( color, intensity ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Light';\n\n    \tthis.color = new Color( color );\n    \tthis.intensity = intensity !== undefined ? intensity : 1;\n\n    \tthis.receiveShadow = undefined;\n\n    }\n\n    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Light,\n\n    \tisLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.color.copy( source.color );\n    \t\tthis.intensity = source.intensity;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.color = this.color.getHex();\n    \t\tdata.object.intensity = this.intensity;\n\n    \t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n    \t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n    \t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n    \t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n    \t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n    \t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function HemisphereLight( skyColor, groundColor, intensity ) {\n\n    \tLight.call( this, skyColor, intensity );\n\n    \tthis.type = 'HemisphereLight';\n\n    \tthis.castShadow = undefined;\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.groundColor = new Color( groundColor );\n\n    }\n\n    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: HemisphereLight,\n\n    \tisHemisphereLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.groundColor.copy( source.groundColor );\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LightShadow( camera ) {\n\n    \tthis.camera = camera;\n\n    \tthis.bias = 0;\n    \tthis.radius = 1;\n\n    \tthis.mapSize = new Vector2( 512, 512 );\n\n    \tthis.map = null;\n    \tthis.matrix = new Matrix4();\n\n    }\n\n    Object.assign( LightShadow.prototype, {\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.camera = source.camera.clone();\n\n    \t\tthis.bias = source.bias;\n    \t\tthis.radius = source.radius;\n\n    \t\tthis.mapSize.copy( source.mapSize );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar object = {};\n\n    \t\tif ( this.bias !== 0 ) object.bias = this.bias;\n    \t\tif ( this.radius !== 1 ) object.radius = this.radius;\n    \t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n    \t\tobject.camera = this.camera.toJSON( false ).object;\n    \t\tdelete object.camera.matrix;\n\n    \t\treturn object;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SpotLightShadow() {\n\n    \tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n    }\n\n    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: SpotLightShadow,\n\n    \tisSpotLightShadow: true,\n\n    \tupdate: function ( light ) {\n\n    \t\tvar fov = exports.Math.RAD2DEG * 2 * light.angle;\n    \t\tvar aspect = this.mapSize.width / this.mapSize.height;\n    \t\tvar far = light.distance || 500;\n\n    \t\tvar camera = this.camera;\n\n    \t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n    \t\t\tcamera.fov = fov;\n    \t\t\tcamera.aspect = aspect;\n    \t\t\tcamera.far = far;\n    \t\t\tcamera.updateProjectionMatrix();\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'SpotLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * Math.PI;\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / Math.PI;\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n    \tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new SpotLightShadow();\n\n    }\n\n    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: SpotLight,\n\n    \tisSpotLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.angle = source.angle;\n    \t\tthis.penumbra = source.penumbra;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n\n    function PointLight( color, intensity, distance, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'PointLight';\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * 4 * Math.PI;\n\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / ( 4 * Math.PI );\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n    }\n\n    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: PointLight,\n\n    \tisPointLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectionalLightShadow( light ) {\n\n    \tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n    }\n\n    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: DirectionalLightShadow\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DirectionalLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'DirectionalLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tthis.shadow = new DirectionalLightShadow();\n\n    }\n\n    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: DirectionalLight,\n\n    \tisDirectionalLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AmbientLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'AmbientLight';\n\n    \tthis.castShadow = undefined;\n\n    }\n\n    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: AmbientLight,\n\n    \tisAmbientLight: true,\n\n    } );\n\n    /**\n     * @author tschw\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    exports.AnimationUtils = {\n\n    \t// same as Array.prototype.slice, but also works on typed arrays\n    \tarraySlice: function( array, from, to ) {\n\n    \t\tif ( exports.AnimationUtils.isTypedArray( array ) ) {\n\n    \t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n    \t\t}\n\n    \t\treturn array.slice( from, to );\n\n    \t},\n\n    \t// converts an array to a specific type\n    \tconvertArray: function( array, type, forceClone ) {\n\n    \t\tif ( ! array || // let 'undefined' and 'null' pass\n    \t\t\t\t! forceClone && array.constructor === type ) return array;\n\n    \t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n    \t\t\treturn new type( array ); // create typed array\n\n    \t\t}\n\n    \t\treturn Array.prototype.slice.call( array ); // create Array\n\n    \t},\n\n    \tisTypedArray: function( object ) {\n\n    \t\treturn ArrayBuffer.isView( object ) &&\n    \t\t\t\t! ( object instanceof DataView );\n\n    \t},\n\n    \t// returns an array by which times and values can be sorted\n    \tgetKeyframeOrder: function( times ) {\n\n    \t\tfunction compareTime( i, j ) {\n\n    \t\t\treturn times[ i ] - times[ j ];\n\n    \t\t}\n\n    \t\tvar n = times.length;\n    \t\tvar result = new Array( n );\n    \t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n    \t\tresult.sort( compareTime );\n\n    \t\treturn result;\n\n    \t},\n\n    \t// uses the array previously returned by 'getKeyframeOrder' to sort data\n    \tsortedArray: function( values, stride, order ) {\n\n    \t\tvar nValues = values.length;\n    \t\tvar result = new values.constructor( nValues );\n\n    \t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n    \t\t\tvar srcOffset = order[ i ] * stride;\n\n    \t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// function for parsing AOS keyframe formats\n    \tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n    \t\tvar i = 1, key = jsonKeys[ 0 ];\n\n    \t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n    \t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t}\n\n    \t\tif ( key === undefined ) return; // no data\n\n    \t\tvar value = key[ valuePropertyName ];\n    \t\tif ( value === undefined ) return; // no data\n\n    \t\tif ( Array.isArray( value ) ) {\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else if ( value.toArray !== undefined ) {\n    \t\t\t// ...assume THREE.Math-ish\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalue.toArray( values, values.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else {\n    \t\t\t// otherwise push as-is\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push( value );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * Abstract base class of interpolants over parametric samples.\n     *\n     * The parameter domain is one dimensional, typically the time or a path\n     * along a curve defined by the data.\n     *\n     * The sample values can have any dimensionality and derived classes may\n     * apply special interpretations to the data.\n     *\n     * This class provides the interval seek in a Template Method, deferring\n     * the actual interpolation to derived classes.\n     *\n     * Time complexity is O(1) for linear access crossing at most two points\n     * and O(log N) for random access, where N is the number of positions.\n     *\n     * References:\n     *\n     * \t\thttp://www.oodesign.com/template-method-pattern.html\n     *\n     * @author tschw\n     */\n\n    function Interpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tthis.parameterPositions = parameterPositions;\n    \tthis._cachedIndex = 0;\n\n    \tthis.resultBuffer = resultBuffer !== undefined ?\n    \t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n    \tthis.sampleValues = sampleValues;\n    \tthis.valueSize = sampleSize;\n\n    }\n\n    Interpolant.prototype = {\n\n    \tconstructor: Interpolant,\n\n    \tevaluate: function( t ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\ti1 = this._cachedIndex,\n\n    \t\t\tt1 = pp[   i1   ],\n    \t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\tvalidate_interval: {\n\n    \t\t\tseek: {\n\n    \t\t\t\tvar right;\n\n    \t\t\t\tlinear_scan: {\n    //- See http://jsperf.com/comparison-to-undefined/3\n    //- slower code:\n    //-\n    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n    \t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n    \t\t\t\t\t\t\t\t// after end\n\n    \t\t\t\t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt0 = t1;\n    \t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n    \t\t\t\t\t\t\tif ( t < t1 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the right side of the index\n    \t\t\t\t\t\tright = pp.length;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    //- slower code:\n    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n    \t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n    \t\t\t\t\t\t// looping?\n\n    \t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n    \t\t\t\t\t\tif ( t < t1global ) {\n\n    \t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n    \t\t\t\t\t\t\tt0 = t1global;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// linear reverse scan\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\t\t\t\t// before start\n\n    \t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt1 = t0;\n    \t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n    \t\t\t\t\t\t\tif ( t >= t0 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the left side of the index\n    \t\t\t\t\t\tright = i1;\n    \t\t\t\t\t\ti1 = 0;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// the interval is valid\n\n    \t\t\t\t\tbreak validate_interval;\n\n    \t\t\t\t} // linear scan\n\n    \t\t\t\t// binary search\n\n    \t\t\t\twhile ( i1 < right ) {\n\n    \t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n    \t\t\t\t\tif ( t < pp[ mid ] ) {\n\n    \t\t\t\t\t\tright = mid;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\ti1 = mid + 1;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tt1 = pp[   i1   ];\n    \t\t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\t\t\t// check boundary cases, again\n\n    \t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n    \t\t\t\t}\n\n    \t\t\t} // seek\n\n    \t\t\tthis._cachedIndex = i1;\n\n    \t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n    \t\t} // validate_interval\n\n    \t\treturn this.interpolate_( i1, t0, t, t1 );\n\n    \t},\n\n    \tsettings: null, // optional, subclass-specific settings structure\n    \t// Note: The indirection allows central control of many interpolants.\n\n    \t// --- Protected interface\n\n    \tDefaultSettings_: {},\n\n    \tgetSettings_: function() {\n\n    \t\treturn this.settings || this.DefaultSettings_;\n\n    \t},\n\n    \tcopySampleValue_: function( index ) {\n\n    \t\t// copies a sample value to the result buffer\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = index * stride;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] = values[ offset + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// Template methods for derived classes:\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tthrow new Error( \"call to abstract method\" );\n    \t\t// implementations shall return this.resultBuffer\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\t// empty\n\n    \t}\n\n    };\n\n    Object.assign( Interpolant.prototype, {\n\n    \tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_,\n\n    \tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_\n\n    } );\n\n    /**\n     * Fast and simple cubic spline interpolant.\n     *\n     * It was derived from a Hermitian construction setting the first derivative\n     * at each sample position to the linear slope between neighboring positions\n     * over their parameter interval.\n     *\n     * @author tschw\n     */\n\n    function CubicInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    \tthis._weightPrev = -0;\n    \tthis._offsetPrev = -0;\n    \tthis._weightNext = -0;\n    \tthis._offsetNext = -0;\n\n    }\n\n    CubicInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: CubicInterpolant,\n\n    \tDefaultSettings_: {\n\n    \t\tendingStart: \tZeroCurvatureEnding,\n    \t\tendingEnd:\t\tZeroCurvatureEnding\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\tiPrev = i1 - 2,\n    \t\t\tiNext = i1 + 1,\n\n    \t\t\ttPrev = pp[ iPrev ],\n    \t\t\ttNext = pp[ iNext ];\n\n    \t\tif ( tPrev === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingStart ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(t0) = 0\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = 2 * t0 - t1;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiPrev = pp.length - 2;\n    \t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = t1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tNext === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(tN) = 0\n    \t\t\t\t\tiNext = i1;\n    \t\t\t\t\ttNext = 2 * t1 - t0;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiNext = 1;\n    \t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n    \t\t\t\t\tiNext = i1 - 1;\n    \t\t\t\t\ttNext = t0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar halfDt = ( t1 - t0 ) * 0.5,\n    \t\t\tstride = this.valueSize;\n\n    \t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n    \t\tthis._weightNext = halfDt / ( tNext - t1 );\n    \t\tthis._offsetPrev = iPrev * stride;\n    \t\tthis._offsetNext = iNext * stride;\n\n    \t},\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n    \t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n    \t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n    \t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tpp = p * p,\n    \t\t\tppp = pp * p;\n\n    \t\t// evaluate polynomials\n\n    \t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n    \t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n    \t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n    \t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n    \t\t// combine data linearly\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tsP * values[ oP + i ] +\n    \t\t\t\t\ts0 * values[ o0 + i ] +\n    \t\t\t\t\ts1 * values[ o1 + i ] +\n    \t\t\t\t\tsN * values[ oN + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     * @author tschw\n     */\n\n    function LinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    LinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: LinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset1 = i1 * stride,\n    \t\t\toffset0 = offset1 - stride,\n\n    \t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tweight0 = 1 - weight1;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n    \t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Interpolant that evaluates to the sample value at the position preceeding\n     * the parameter.\n     *\n     * @author tschw\n     */\n\n    function DiscreteInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    DiscreteInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: DiscreteInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\treturn this.copySampleValue_( i1 - 1 );\n\n    \t}\n\n    } );\n\n    var KeyframeTrackPrototype;\n\n    KeyframeTrackPrototype = {\n\n    \tTimeBufferType: Float32Array,\n    \tValueBufferType: Float32Array,\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodDiscrete: function( result ) {\n\n    \t\treturn new DiscreteInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new LinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: function( result ) {\n\n    \t\treturn new CubicInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tsetInterpolation: function( interpolation ) {\n\n    \t\tvar factoryMethod;\n\n    \t\tswitch ( interpolation ) {\n\n    \t\t\tcase InterpolateDiscrete:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateLinear:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateSmooth:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tif ( factoryMethod === undefined ) {\n\n    \t\t\tvar message = \"unsupported interpolation for \" +\n    \t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n    \t\t\tif ( this.createInterpolant === undefined ) {\n\n    \t\t\t\t// fall back to default, unless the default itself is messed up\n    \t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n    \t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tconsole.warn( message );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.createInterpolant = factoryMethod;\n\n    \t},\n\n    \tgetInterpolation: function() {\n\n    \t\tswitch ( this.createInterpolant ) {\n\n    \t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n    \t\t\t\treturn InterpolateDiscrete;\n\n    \t\t\tcase this.InterpolantFactoryMethodLinear:\n\n    \t\t\t\treturn InterpolateLinear;\n\n    \t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n    \t\t\t\treturn InterpolateSmooth;\n\n    \t\t}\n\n    \t},\n\n    \tgetValueSize: function() {\n\n    \t\treturn this.values.length / this.times.length;\n\n    \t},\n\n    \t// move all keyframes either forwards or backwards in time\n    \tshift: function( timeOffset ) {\n\n    \t\tif( timeOffset !== 0.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] += timeOffset;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n    \tscale: function( timeScale ) {\n\n    \t\tif( timeScale !== 1.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] *= timeScale;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n    \t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n    \ttrim: function( startTime, endTime ) {\n\n    \t\tvar times = this.times,\n    \t\t\tnKeys = times.length,\n    \t\t\tfrom = 0,\n    \t\t\tto = nKeys - 1;\n\n    \t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n    \t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n    \t\t++ to; // inclusive -> exclusive bound\n\n    \t\tif( from !== 0 || to !== nKeys ) {\n\n    \t\t\t// empty tracks are forbidden, so keep at least one keyframe\n    \t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n    \t\t\tvar stride = this.getValueSize();\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, from, to );\n    \t\t\tthis.values = exports.AnimationUtils.\n    \t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n    \tvalidate: function() {\n\n    \t\tvar valid = true;\n\n    \t\tvar valueSize = this.getValueSize();\n    \t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n    \t\t\tconsole.error( \"invalid value size in track\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n\n    \t\t\tnKeys = times.length;\n\n    \t\tif( nKeys === 0 ) {\n\n    \t\t\tconsole.error( \"track is empty\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar prevTime = null;\n\n    \t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n    \t\t\tvar currTime = times[ i ];\n\n    \t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n    \t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n    \t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tprevTime = currTime;\n\n    \t\t}\n\n    \t\tif ( values !== undefined ) {\n\n    \t\t\tif ( exports.AnimationUtils.isTypedArray( values ) ) {\n\n    \t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tvar value = values[ i ];\n\n    \t\t\t\t\tif ( isNaN( value ) ) {\n\n    \t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n    \t\t\t\t\t\tvalid = false;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn valid;\n\n    \t},\n\n    \t// removes equivalent sequential keys as common in morph target sequences\n    \t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n    \toptimize: function() {\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n    \t\t\tstride = this.getValueSize(),\n\n    \t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n    \t\t\twriteIndex = 1,\n    \t\t\tlastIndex = times.length - 1;\n\n    \t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\n    \t\t\tvar keep = false;\n\n    \t\t\tvar time = times[ i ];\n    \t\t\tvar timeNext = times[ i + 1 ];\n\n    \t\t\t// remove adjacent keyframes scheduled at the same time\n\n    \t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n    \t\t\t\tif ( ! smoothInterpolation ) {\n\n    \t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n    \t\t\t\t\tvar offset = i * stride,\n    \t\t\t\t\t\toffsetP = offset - stride,\n    \t\t\t\t\t\toffsetN = offset + stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\t\t\tvar value = values[ offset + j ];\n\n    \t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n    \t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n    \t\t\t\t\t\t\tkeep = true;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else keep = true;\n\n    \t\t\t}\n\n    \t\t\t// in-place compaction\n\n    \t\t\tif ( keep ) {\n\n    \t\t\t\tif ( i !== writeIndex ) {\n\n    \t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n    \t\t\t\t\tvar readOffset = i * stride,\n    \t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\n    \t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t\t}\n\n    \t\t\t\t++ writeIndex;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// flush last keyframe (compaction looks ahead)\n\n    \t\tif ( lastIndex > 0 ) {\n\n    \t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n    \t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\n    \t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t++ writeIndex;\n\n    \t\t}\n\n    \t\tif ( writeIndex !== times.length ) {\n\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );\n    \t\t\tthis.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    }\n\n    function KeyframeTrackConstructor( name, times, values, interpolation ) {\n\n    \tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n    \tif( times === undefined || times.length === 0 ) {\n\n    \t\tthrow new Error( \"no keyframes in track named \" + name );\n\n    \t}\n\n    \tthis.name = name;\n\n    \tthis.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );\n    \tthis.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n    \tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n    \tthis.validate();\n    \tthis.optimize();\n\n    }\n\n    /**\n     *\n     * A Track of vectored keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function VectorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    VectorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: VectorKeyframeTrack,\n\n    \tValueTypeName: 'vector'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     * Spherical linear unit quaternion interpolant.\n     *\n     * @author tschw\n     */\n\n    function QuaternionLinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    QuaternionLinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: QuaternionLinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset = i1 * stride,\n\n    \t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n    \t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n    \t\t\tQuaternion.slerpFlat( result, 0,\n    \t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * A Track of quaternion keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    QuaternionKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: QuaternionKeyframeTrack,\n\n    \tValueTypeName: 'quaternion',\n\n    \t// ValueBufferType is inherited\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new QuaternionLinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n    } );\n\n    /**\n     *\n     * A Track of numeric keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function NumberKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    NumberKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: NumberKeyframeTrack,\n\n    \tValueTypeName: 'number',\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     *\n     * A Track that interpolates Strings\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function StringKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    StringKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: StringKeyframeTrack,\n\n    \tValueTypeName: 'string',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    } );\n\n    /**\n     *\n     * A Track of Boolean keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function BooleanKeyframeTrack( name, times, values ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values );\n\n    }\n\n    BooleanKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: BooleanKeyframeTrack,\n\n    \tValueTypeName: 'bool',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    \t// Note: Actually this track could have a optimized / compressed\n    \t// representation of a single value and a custom interpolant that\n    \t// computes \"firstValue ^ isOdd( index )\".\n\n    } );\n\n    /**\n     *\n     * A Track of keyframe values that represent color.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function ColorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    ColorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: ColorKeyframeTrack,\n\n    \tValueTypeName: 'color'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n\n    \t// Note: Very basic implementation and nothing special yet.\n    \t// However, this is the place for color space parameterization.\n\n    } );\n\n    /**\n     *\n     * A timed sequence of keyframes for a specific property.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function KeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.apply( this, arguments );\n\n    }\n\n    KeyframeTrack.prototype = KeyframeTrackPrototype;\n    KeyframeTrackPrototype.constructor = KeyframeTrack;\n\n    // Static methods:\n\n    Object.assign( KeyframeTrack, {\n\n    \t// Serialization (in static context, because of constructor invocation\n    \t// and automatic invocation of .toJSON):\n\n    \tparse: function( json ) {\n\n    \t\tif( json.type === undefined ) {\n\n    \t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n    \t\t}\n\n    \t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n    \t\tif ( json.times === undefined ) {\n\n    \t\t\tvar times = [], values = [];\n\n    \t\t\texports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n    \t\t\tjson.times = times;\n    \t\t\tjson.values = values;\n\n    \t\t}\n\n    \t\t// derived classes can define a static parse method\n    \t\tif ( trackType.parse !== undefined ) {\n\n    \t\t\treturn trackType.parse( json );\n\n    \t\t} else {\n\n    \t\t\t// by default, we asssume a constructor compatible with the base\n    \t\t\treturn new trackType(\n    \t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function( track ) {\n\n    \t\tvar trackType = track.constructor;\n\n    \t\tvar json;\n\n    \t\t// derived classes can define a static toJSON method\n    \t\tif ( trackType.toJSON !== undefined ) {\n\n    \t\t\tjson = trackType.toJSON( track );\n\n    \t\t} else {\n\n    \t\t\t// by default, we assume the data can be serialized as-is\n    \t\t\tjson = {\n\n    \t\t\t\t'name': track.name,\n    \t\t\t\t'times': exports.AnimationUtils.convertArray( track.times, Array ),\n    \t\t\t\t'values': exports.AnimationUtils.convertArray( track.values, Array )\n\n    \t\t\t};\n\n    \t\t\tvar interpolation = track.getInterpolation();\n\n    \t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n    \t\t\t\tjson.interpolation = interpolation;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tjson.type = track.ValueTypeName; // mandatory\n\n    \t\treturn json;\n\n    \t},\n\n    \t_getTrackTypeForValueTypeName: function( typeName ) {\n\n    \t\tswitch( typeName.toLowerCase() ) {\n\n    \t\t\tcase \"scalar\":\n    \t\t\tcase \"double\":\n    \t\t\tcase \"float\":\n    \t\t\tcase \"number\":\n    \t\t\tcase \"integer\":\n\n    \t\t\t\treturn NumberKeyframeTrack;\n\n    \t\t\tcase \"vector\":\n    \t\t\tcase \"vector2\":\n    \t\t\tcase \"vector3\":\n    \t\t\tcase \"vector4\":\n\n    \t\t\t\treturn VectorKeyframeTrack;\n\n    \t\t\tcase \"color\":\n\n    \t\t\t\treturn ColorKeyframeTrack;\n\n    \t\t\tcase \"quaternion\":\n\n    \t\t\t\treturn QuaternionKeyframeTrack;\n\n    \t\t\tcase \"bool\":\n    \t\t\tcase \"boolean\":\n\n    \t\t\t\treturn BooleanKeyframeTrack;\n\n    \t\t\tcase \"string\":\n\n    \t\t\t\treturn StringKeyframeTrack;\n\n    \t\t}\n\n    \t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Reusable set of Tracks that represent an animation.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    function AnimationClip( name, duration, tracks ) {\n\n    \tthis.name = name;\n    \tthis.tracks = tracks;\n    \tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// this means it should figure out its duration by scanning the tracks\n    \tif ( this.duration < 0 ) {\n\n    \t\tthis.resetDuration();\n\n    \t}\n\n    \tthis.optimize();\n\n    }\n\n    AnimationClip.prototype = {\n\n    \tconstructor: AnimationClip,\n\n    \tresetDuration: function() {\n\n    \t\tvar tracks = this.tracks,\n    \t\t\tduration = 0;\n\n    \t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n    \t\t\tvar track = this.tracks[ i ];\n\n    \t\t\tduration = Math.max(\n    \t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n    \t\t}\n\n    \t\tthis.duration = duration;\n\n    \t},\n\n    \ttrim: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \toptimize: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].optimize();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    // Static methods:\n\n    Object.assign( AnimationClip, {\n\n    \tparse: function( json ) {\n\n    \t\tvar tracks = [],\n    \t\t\tjsonTracks = json.tracks,\n    \t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n    \t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n    \t\t}\n\n    \t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n    \t},\n\n\n    \ttoJSON: function( clip ) {\n\n    \t\tvar tracks = [],\n    \t\t\tclipTracks = clip.tracks;\n\n    \t\tvar json = {\n\n    \t\t\t'name': clip.name,\n    \t\t\t'duration': clip.duration,\n    \t\t\t'tracks': tracks\n\n    \t\t};\n\n    \t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n    \t\t}\n\n    \t\treturn json;\n\n    \t},\n\n\n    \tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n    \t\tvar numMorphTargets = morphTargetSequence.length;\n    \t\tvar tracks = [];\n\n    \t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n    \t\t\tvar times = [];\n    \t\t\tvar values = [];\n\n    \t\t\ttimes.push(\n    \t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n    \t\t\t\t\ti,\n    \t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n    \t\t\tvalues.push( 0, 1, 0 );\n\n    \t\t\tvar order = exports.AnimationUtils.getKeyframeOrder( times );\n    \t\t\ttimes = exports.AnimationUtils.sortedArray( times, 1, order );\n    \t\t\tvalues = exports.AnimationUtils.sortedArray( values, 1, order );\n\n    \t\t\t// if there is a key at the first frame, duplicate it as the\n    \t\t\t// last frame as well for perfect loop.\n    \t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n    \t\t\t\ttimes.push( numMorphTargets );\n    \t\t\t\tvalues.push( values[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\ttracks.push(\n    \t\t\t\t\tnew NumberKeyframeTrack(\n    \t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n    \t\t\t\t\t\ttimes, values\n    \t\t\t\t\t).scale( 1.0 / fps ) );\n    \t\t}\n\n    \t\treturn new AnimationClip( name, -1, tracks );\n\n    \t},\n\n    \tfindByName: function( objectOrClipArray, name ) {\n\n    \t\tvar clipArray = objectOrClipArray;\n\n    \t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n    \t\t\tvar o = objectOrClipArray;\n    \t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n    \t\t\tif ( clipArray[ i ].name === name ) {\n\n    \t\t\t\treturn clipArray[ i ];\n\n    \t\t\t}\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n    \t\tvar animationToMorphTargets = {};\n\n    \t\t// tested with https://regex101.com/ on trick sequences\n    \t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n    \t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n    \t\t// sort morph target names into animation groups based\n    \t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n    \t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n    \t\t\tvar morphTarget = morphTargets[ i ];\n    \t\t\tvar parts = morphTarget.name.match( pattern );\n\n    \t\t\tif ( parts && parts.length > 1 ) {\n\n    \t\t\t\tvar name = parts[ 1 ];\n\n    \t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n    \t\t\t\tif ( ! animationMorphTargets ) {\n\n    \t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n    \t\t\t\t}\n\n    \t\t\t\tanimationMorphTargets.push( morphTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar clips = [];\n\n    \t\tfor ( var name in animationToMorphTargets ) {\n\n    \t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n    \t\t}\n\n    \t\treturn clips;\n\n    \t},\n\n    \t// parse the animation.hierarchy format\n    \tparseAnimation: function( animation, bones ) {\n\n    \t\tif ( ! animation ) {\n\n    \t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar addNonemptyTrack = function(\n    \t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n    \t\t\t// only return track if there are actually keys.\n    \t\t\tif ( animationKeys.length !== 0 ) {\n\n    \t\t\t\tvar times = [];\n    \t\t\t\tvar values = [];\n\n    \t\t\t\texports.AnimationUtils.flattenJSON(\n    \t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n    \t\t\t\t// empty keys are filtered out, so check again\n    \t\t\t\tif ( times.length !== 0 ) {\n\n    \t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t\tvar tracks = [];\n\n    \t\tvar clipName = animation.name || 'default';\n    \t\t// automatic length determination in AnimationClip.\n    \t\tvar duration = animation.length || -1;\n    \t\tvar fps = animation.fps || 30;\n\n    \t\tvar hierarchyTracks = animation.hierarchy || [];\n\n    \t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n    \t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n    \t\t\t// skip empty tracks\n    \t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n    \t\t\t// process morph targets in a way exactly compatible\n    \t\t\t// with AnimationHandler.init( animation )\n    \t\t\tif ( animationKeys[0].morphTargets ) {\n\n    \t\t\t\t// figure out all morph targets used in this track\n    \t\t\t\tvar morphTargetNames = {};\n    \t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n    \t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n    \t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n    \t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\t// create a track for each morph target with all zero\n    \t\t\t\t// morphTargetInfluences except for the keys in which\n    \t\t\t\t// the morphTarget is named.\n    \t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n    \t\t\t\t\tvar times = [];\n    \t\t\t\t\tvar values = [];\n\n    \t\t\t\t\tfor ( var m = 0;\n    \t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n    \t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n    \t\t\t\t\t\ttimes.push( animationKey.time );\n    \t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n    \t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n    \t\t\t} else {\n    \t\t\t\t// ...assume skeletal animation\n\n    \t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n    \t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n    \t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n    \t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tracks.length === 0 ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n    \t\treturn clip;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MaterialLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.textures = {};\n\n    }\n\n    Object.assign( MaterialLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTextures: function ( value ) {\n\n    \t\tthis.textures = value;\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar textures = this.textures;\n\n    \t\tfunction getTexture( name ) {\n\n    \t\t\tif ( textures[ name ] === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n    \t\t\t}\n\n    \t\t\treturn textures[ name ];\n\n    \t\t}\n\n    \t\tvar material = new Materials[ json.type ]();\n\n    \t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n    \t\tif ( json.name !== undefined ) material.name = json.name;\n    \t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n    \t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n    \t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n    \t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n    \t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n    \t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n    \t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n    \t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n    \t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n    \t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n    \t\tif ( json.fog !== undefined ) material.fog = json.fog;\n    \t\tif ( json.shading !== undefined ) material.shading = json.shading;\n    \t\tif ( json.blending !== undefined ) material.blending = json.blending;\n    \t\tif ( json.side !== undefined ) material.side = json.side;\n    \t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n    \t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n    \t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n    \t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n    \t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n    \t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n    \t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n    \t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n    \t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n    \t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n    \t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n    \t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\n    \t\t// for PointsMaterial\n\n    \t\tif ( json.size !== undefined ) material.size = json.size;\n    \t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n    \t\t// maps\n\n    \t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n    \t\tif ( json.alphaMap !== undefined ) {\n\n    \t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n    \t\t\tmaterial.transparent = true;\n\n    \t\t}\n\n    \t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n    \t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n    \t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n    \t\tif ( json.normalScale !== undefined ) {\n\n    \t\t\tvar normalScale = json.normalScale;\n\n    \t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n    \t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n    \t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n    \t\t\t}\n\n    \t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n    \t\t}\n\n    \t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n    \t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n    \t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n    \t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n    \t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n    \t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n    \t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n    \t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n    \t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n    \t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n    \t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n    \t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n    \t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n    \t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n    \t\t// MultiMaterial\n\n    \t\tif ( json.materials !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n    \t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn material;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometryLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( BufferGeometryLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar geometry = new BufferGeometry();\n\n    \t\tvar index = json.data.index;\n\n    \t\tvar TYPED_ARRAYS = {\n    \t\t\t'Int8Array': Int8Array,\n    \t\t\t'Uint8Array': Uint8Array,\n    \t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n    \t\t\t'Int16Array': Int16Array,\n    \t\t\t'Uint16Array': Uint16Array,\n    \t\t\t'Int32Array': Int32Array,\n    \t\t\t'Uint32Array': Uint32Array,\n    \t\t\t'Float32Array': Float32Array,\n    \t\t\t'Float64Array': Float64Array\n    \t\t};\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n    \t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n    \t\t}\n\n    \t\tvar attributes = json.data.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n    \t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n    \t\t}\n\n    \t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n    \t\tif ( groups !== undefined ) {\n\n    \t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar boundingSphere = json.data.boundingSphere;\n\n    \t\tif ( boundingSphere !== undefined ) {\n\n    \t\t\tvar center = new Vector3();\n\n    \t\t\tif ( boundingSphere.center !== undefined ) {\n\n    \t\t\t\tcenter.fromArray( boundingSphere.center );\n\n    \t\t\t}\n\n    \t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Loader() {\n\n    \tthis.onLoadStart = function () {};\n    \tthis.onLoadProgress = function () {};\n    \tthis.onLoadComplete = function () {};\n\n    }\n\n    Loader.prototype = {\n\n    \tconstructor: Loader,\n\n    \tcrossOrigin: undefined,\n\n    \textractUrlBase: function ( url ) {\n\n    \t\tvar parts = url.split( '/' );\n\n    \t\tif ( parts.length === 1 ) return './';\n\n    \t\tparts.pop();\n\n    \t\treturn parts.join( '/' ) + '/';\n\n    \t},\n\n    \tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n    \t\tvar array = [];\n\n    \t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n    \t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n    \t\t}\n\n    \t\treturn array;\n\n    \t},\n\n    \tcreateMaterial: ( function () {\n\n    \t\tvar color, textureLoader, materialLoader;\n\n    \t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n    \t\t\tif ( color === undefined ) color = new Color();\n    \t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n    \t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\n    \t\t\t// convert from old material format\n\n    \t\t\tvar textures = {};\n\n    \t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n    \t\t\t\tvar fullPath = texturePath + path;\n    \t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n    \t\t\t\tvar texture;\n\n    \t\t\t\tif ( loader !== null ) {\n\n    \t\t\t\t\ttexture = loader.load( fullPath );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n    \t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( repeat !== undefined ) {\n\n    \t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n    \t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( offset !== undefined ) {\n\n    \t\t\t\t\ttexture.offset.fromArray( offset );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( wrap !== undefined ) {\n\n    \t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n    \t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( anisotropy !== undefined ) {\n\n    \t\t\t\t\ttexture.anisotropy = anisotropy;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar uuid = exports.Math.generateUUID();\n\n    \t\t\t\ttextures[ uuid ] = texture;\n\n    \t\t\t\treturn uuid;\n\n    \t\t\t}\n\n    \t\t\t//\n\n    \t\t\tvar json = {\n    \t\t\t\tuuid: exports.Math.generateUUID(),\n    \t\t\t\ttype: 'MeshLambertMaterial'\n    \t\t\t};\n\n    \t\t\tfor ( var name in m ) {\n\n    \t\t\t\tvar value = m[ name ];\n\n    \t\t\t\tswitch ( name ) {\n    \t\t\t\t\tcase 'DbgColor':\n    \t\t\t\t\tcase 'DbgIndex':\n    \t\t\t\t\tcase 'opticalDensity':\n    \t\t\t\t\tcase 'illumination':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'DbgName':\n    \t\t\t\t\t\tjson.name = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'blending':\n    \t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorAmbient':\n    \t\t\t\t\tcase 'mapAmbient':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorDiffuse':\n    \t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorSpecular':\n    \t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorEmissive':\n    \t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'specularCoef':\n    \t\t\t\t\t\tjson.shininess = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'shading':\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuse':\n    \t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuseRepeat':\n    \t\t\t\t\tcase 'mapDiffuseOffset':\n    \t\t\t\t\tcase 'mapDiffuseWrap':\n    \t\t\t\t\tcase 'mapDiffuseAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissive':\n    \t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissiveRepeat':\n    \t\t\t\t\tcase 'mapEmissiveOffset':\n    \t\t\t\t\tcase 'mapEmissiveWrap':\n    \t\t\t\t\tcase 'mapEmissiveAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLight':\n    \t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLightRepeat':\n    \t\t\t\t\tcase 'mapLightOffset':\n    \t\t\t\t\tcase 'mapLightWrap':\n    \t\t\t\t\tcase 'mapLightAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAO':\n    \t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAORepeat':\n    \t\t\t\t\tcase 'mapAOOffset':\n    \t\t\t\t\tcase 'mapAOWrap':\n    \t\t\t\t\tcase 'mapAOAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBump':\n    \t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpScale':\n    \t\t\t\t\t\tjson.bumpScale = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpRepeat':\n    \t\t\t\t\tcase 'mapBumpOffset':\n    \t\t\t\t\tcase 'mapBumpWrap':\n    \t\t\t\t\tcase 'mapBumpAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormal':\n    \t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalFactor':\n    \t\t\t\t\t\tjson.normalScale = [ value, value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalRepeat':\n    \t\t\t\t\tcase 'mapNormalOffset':\n    \t\t\t\t\tcase 'mapNormalWrap':\n    \t\t\t\t\tcase 'mapNormalAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecular':\n    \t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecularRepeat':\n    \t\t\t\t\tcase 'mapSpecularOffset':\n    \t\t\t\t\tcase 'mapSpecularWrap':\n    \t\t\t\t\tcase 'mapSpecularAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalness':\n    \t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalnessRepeat':\n    \t\t\t\t\tcase 'mapMetalnessOffset':\n    \t\t\t\t\tcase 'mapMetalnessWrap':\n    \t\t\t\t\tcase 'mapMetalnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughness':\n    \t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughnessRepeat':\n    \t\t\t\t\tcase 'mapRoughnessOffset':\n    \t\t\t\t\tcase 'mapRoughnessWrap':\n    \t\t\t\t\tcase 'mapRoughnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlpha':\n    \t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlphaRepeat':\n    \t\t\t\t\tcase 'mapAlphaOffset':\n    \t\t\t\t\tcase 'mapAlphaWrap':\n    \t\t\t\t\tcase 'mapAlphaAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'flipSided':\n    \t\t\t\t\t\tjson.side = BackSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'doubleSided':\n    \t\t\t\t\t\tjson.side = DoubleSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'transparency':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n    \t\t\t\t\t\tjson.opacity = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'depthTest':\n    \t\t\t\t\tcase 'depthWrite':\n    \t\t\t\t\tcase 'colorWrite':\n    \t\t\t\t\tcase 'opacity':\n    \t\t\t\t\tcase 'reflectivity':\n    \t\t\t\t\tcase 'transparent':\n    \t\t\t\t\tcase 'visible':\n    \t\t\t\t\tcase 'wireframe':\n    \t\t\t\t\t\tjson[ name ] = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'vertexColors':\n    \t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n    \t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tdefault:\n    \t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n    \t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n    \t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n    \t\t\tmaterialLoader.setTextures( textures );\n\n    \t\t\treturn materialLoader.parse( json );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    Loader.Handlers = {\n\n    \thandlers: [],\n\n    \tadd: function ( regex, loader ) {\n\n    \t\tthis.handlers.push( regex, loader );\n\n    \t},\n\n    \tget: function ( file ) {\n\n    \t\tvar handlers = this.handlers;\n\n    \t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n    \t\t\tvar regex = handlers[ i ];\n    \t\t\tvar loader  = handlers[ i + 1 ];\n\n    \t\t\tif ( regex.test( file ) ) {\n\n    \t\t\t\treturn loader;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function JSONLoader( manager ) {\n\n    \tif ( typeof manager === 'boolean' ) {\n\n    \t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n    \t\tmanager = undefined;\n\n    \t}\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \tthis.withCredentials = false;\n\n    }\n\n    Object.assign( JSONLoader.prototype, {\n\n    \tload: function( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json = JSON.parse( text );\n    \t\t\tvar metadata = json.metadata;\n\n    \t\t\tif ( metadata !== undefined ) {\n\n    \t\t\t\tvar type = metadata.type;\n\n    \t\t\t\tif ( type !== undefined ) {\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar object = scope.parse( json, texturePath );\n    \t\t\tonLoad( object.geometry, object.materials );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tparse: function ( json, texturePath ) {\n\n    \t\tvar geometry = new Geometry(),\n    \t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n    \t\tparseModel( scale );\n\n    \t\tparseSkin();\n    \t\tparseMorphing( scale );\n    \t\tparseAnimations();\n\n    \t\tgeometry.computeFaceNormals();\n    \t\tgeometry.computeBoundingSphere();\n\n    \t\tfunction parseModel( scale ) {\n\n    \t\t\tfunction isBitSet( value, position ) {\n\n    \t\t\t\treturn value & ( 1 << position );\n\n    \t\t\t}\n\n    \t\t\tvar i, j, fi,\n\n    \t\t\toffset, zLength,\n\n    \t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n    \t\t\ttype,\n    \t\t\tisQuad,\n    \t\t\thasMaterial,\n    \t\t\thasFaceVertexUv,\n    \t\t\thasFaceNormal, hasFaceVertexNormal,\n    \t\t\thasFaceColor, hasFaceVertexColor,\n\n    \t\tvertex, face, faceA, faceB, hex, normal,\n\n    \t\t\tuvLayer, uv, u, v,\n\n    \t\t\tfaces = json.faces,\n    \t\t\tvertices = json.vertices,\n    \t\t\tnormals = json.normals,\n    \t\t\tcolors = json.colors,\n\n    \t\t\tnUvLayers = 0;\n\n    \t\t\tif ( json.uvs !== undefined ) {\n\n    \t\t\t\t// disregard empty arrays\n\n    \t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n    \t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = vertices.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\tvertex = new Vector3();\n\n    \t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n    \t\t\t\tgeometry.vertices.push( vertex );\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = faces.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\ttype = faces[ offset ++ ];\n\n\n    \t\t\t\tisQuad              = isBitSet( type, 0 );\n    \t\t\t\thasMaterial         = isBitSet( type, 1 );\n    \t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n    \t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n    \t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n    \t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n    \t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n    \t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n    \t\t\t\tif ( isQuad ) {\n\n    \t\t\t\t\tfaceA = new Face3();\n    \t\t\t\t\tfaceA.a = faces[ offset ];\n    \t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n    \t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n    \t\t\t\t\tfaceB = new Face3();\n    \t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n    \t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n    \t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n    \t\t\t\t\toffset += 4;\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n    \t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n    \t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tfaceA.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\tfaceA.color.setHex( hex );\n    \t\t\t\t\t\tfaceB.color.setHex( hex );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( faceA );\n    \t\t\t\t\tgeometry.faces.push( faceB );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface = new Face3();\n    \t\t\t\t\tface.a = faces[ offset ++ ];\n    \t\t\t\t\tface.b = faces[ offset ++ ];\n    \t\t\t\t\tface.c = faces[ offset ++ ];\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tface.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n    \t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( face );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseSkin() {\n\n    \t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n    \t\t\tif ( json.skinWeights ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar x =                               json.skinWeights[ i ];\n    \t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n    \t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n    \t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.skinIndices ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar a =                               json.skinIndices[ i ];\n    \t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n    \t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n    \t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry.bones = json.bones;\n\n    \t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n    \t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n    \t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseMorphing( scale ) {\n\n    \t\t\tif ( json.morphTargets !== undefined ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\t\tgeometry.morphTargets[ i ] = {};\n    \t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n    \t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n    \t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n    \t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n    \t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n    \t\t\t\t\t\tvar vertex = new Vector3();\n    \t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n    \t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n    \t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n    \t\t\t\t\t\tdstVertices.push( vertex );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n    \t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseAnimations() {\n\n    \t\t\tvar outputAnimations = [];\n\n    \t\t\t// parse old style Bone/Hierarchy animations\n    \t\t\tvar animations = [];\n\n    \t\t\tif ( json.animation !== undefined ) {\n\n    \t\t\t\tanimations.push( json.animation );\n\n    \t\t\t}\n\n    \t\t\tif ( json.animations !== undefined ) {\n\n    \t\t\t\tif ( json.animations.length ) {\n\n    \t\t\t\t\tanimations = animations.concat( json.animations );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tanimations.push( json.animations );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n    \t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n    \t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n    \t\t\t}\n\n    \t\t\t// parse implicit morph animations\n    \t\t\tif ( geometry.morphTargets ) {\n\n    \t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n    \t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n    \t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n    \t\t\t}\n\n    \t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n    \t\t}\n\n    \t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n    \t\t\treturn { geometry: geometry };\n\n    \t\t} else {\n\n    \t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n    \t\t\treturn { geometry: geometry, materials: materials };\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ObjectLoader ( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.texturePath = '';\n\n    }\n\n    Object.assign( ObjectLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.texturePath === '' ) {\n\n    \t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n    \t\t}\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n\n    \t},\n\n    \tparse: function ( json, onLoad ) {\n\n    \t\tvar geometries = this.parseGeometries( json.geometries );\n\n    \t\tvar images = this.parseImages( json.images, function () {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t} );\n\n    \t\tvar textures  = this.parseTextures( json.textures, images );\n    \t\tvar materials = this.parseMaterials( json.materials, textures );\n\n    \t\tvar object = this.parseObject( json.object, geometries, materials );\n\n    \t\tif ( json.animations ) {\n\n    \t\t\tobject.animations = this.parseAnimations( json.animations );\n\n    \t\t}\n\n    \t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t}\n\n    \t\treturn object;\n\n    \t},\n\n    \tparseGeometries: function ( json ) {\n\n    \t\tvar geometries = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar geometryLoader = new JSONLoader();\n    \t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar geometry;\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tswitch ( data.type ) {\n\n    \t\t\t\t\tcase 'PlaneGeometry':\n    \t\t\t\t\tcase 'PlaneBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BoxGeometry':\n    \t\t\t\t\tcase 'BoxBufferGeometry':\n    \t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.depth,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.depthSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CircleGeometry':\n    \t\t\t\t\tcase 'CircleBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CylinderGeometry':\n    \t\t\t\t\tcase 'CylinderBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radiusTop,\n    \t\t\t\t\t\t\tdata.radiusBottom,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'ConeGeometry':\n    \t\t\t\t\tcase 'ConeBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'SphereGeometry':\n    \t\t\t\t\tcase 'SphereBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'DodecahedronGeometry':\n    \t\t\t\t\tcase 'IcosahedronGeometry':\n    \t\t\t\t\tcase 'OctahedronGeometry':\n    \t\t\t\t\tcase 'TetrahedronGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.detail\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'RingGeometry':\n    \t\t\t\t\tcase 'RingBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.innerRadius,\n    \t\t\t\t\t\t\tdata.outerRadius,\n    \t\t\t\t\t\t\tdata.thetaSegments,\n    \t\t\t\t\t\t\tdata.phiSegments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusGeometry':\n    \t\t\t\t\tcase 'TorusBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.arc\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusKnotGeometry':\n    \t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.p,\n    \t\t\t\t\t\t\tdata.q\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'LatheGeometry':\n    \t\t\t\t\tcase 'LatheBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.points,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BufferGeometry':\n\n    \t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'Geometry':\n\n    \t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tdefault:\n\n    \t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n    \t\t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tgeometry.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n    \t\t\t\tgeometries[ data.uuid ] = geometry;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometries;\n\n    \t},\n\n    \tparseMaterials: function ( json, textures ) {\n\n    \t\tvar materials = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar loader = new MaterialLoader();\n    \t\t\tloader.setTextures( textures );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar material = loader.parse( json[ i ] );\n    \t\t\t\tmaterials[ material.uuid ] = material;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn materials;\n\n    \t},\n\n    \tparseAnimations: function ( json ) {\n\n    \t\tvar animations = [];\n\n    \t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n    \t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n    \t\t\tanimations.push( clip );\n\n    \t\t}\n\n    \t\treturn animations;\n\n    \t},\n\n    \tparseImages: function ( json, onLoad ) {\n\n    \t\tvar scope = this;\n    \t\tvar images = {};\n\n    \t\tfunction loadImage( url ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\treturn loader.load( url, function () {\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, undefined, function () {\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t} );\n\n    \t\t}\n\n    \t\tif ( json !== undefined && json.length > 0 ) {\n\n    \t\t\tvar manager = new LoadingManager( onLoad );\n\n    \t\t\tvar loader = new ImageLoader( manager );\n    \t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar image = json[ i ];\n    \t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n    \t\t\t\timages[ image.uuid ] = loadImage( path );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn images;\n\n    \t},\n\n    \tparseTextures: function ( json, images ) {\n\n    \t\tfunction parseConstant( value, type ) {\n\n    \t\t\tif ( typeof( value ) === 'number' ) return value;\n\n    \t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n    \t\t\treturn type[ value ];\n\n    \t\t}\n\n    \t\tvar textures = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tif ( data.image === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( images[ data.image ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n    \t\t\t\t}\n\n    \t\t\t\tvar texture = new Texture( images[ data.image ] );\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\ttexture.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n    \t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\n    \t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n    \t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n    \t\t\t\tif ( data.wrap !== undefined ) {\n\n    \t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n    \t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n    \t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n    \t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n    \t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n    \t\t\t\ttextures[ data.uuid ] = texture;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn textures;\n\n    \t},\n\n    \tparseObject: function () {\n\n    \t\tvar matrix = new Matrix4();\n\n    \t\treturn function parseObject( data, geometries, materials ) {\n\n    \t\t\tvar object;\n\n    \t\t\tfunction getGeometry( name ) {\n\n    \t\t\t\tif ( geometries[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn geometries[ name ];\n\n    \t\t\t}\n\n    \t\t\tfunction getMaterial( name ) {\n\n    \t\t\t\tif ( name === undefined ) return undefined;\n\n    \t\t\t\tif ( materials[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn materials[ name ];\n\n    \t\t\t}\n\n    \t\t\tswitch ( data.type ) {\n\n    \t\t\t\tcase 'Scene':\n\n    \t\t\t\t\tobject = new Scene();\n\n    \t\t\t\t\tif ( data.background !== undefined ) {\n\n    \t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n    \t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( data.fog !== undefined ) {\n\n    \t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n    \t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PerspectiveCamera':\n\n    \t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n    \t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n    \t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n    \t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n    \t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n    \t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'OrthographicCamera':\n\n    \t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'AmbientLight':\n\n    \t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'DirectionalLight':\n\n    \t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n\n    \t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n\n    \t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n\n    \t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Mesh':\n\n    \t\t\t\t\tvar geometry = getGeometry( data.geometry );\n    \t\t\t\t\tvar material = getMaterial( data.material );\n\n    \t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n    \t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LOD':\n\n    \t\t\t\t\tobject = new LOD();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Line':\n\n    \t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LineSegments':\n\n    \t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointCloud':\n    \t\t\t\tcase 'Points':\n\n    \t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Sprite':\n\n    \t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Group':\n\n    \t\t\t\t\tobject = new Group();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tobject = new Object3D();\n\n    \t\t\t}\n\n    \t\t\tobject.uuid = data.uuid;\n\n    \t\t\tif ( data.name !== undefined ) object.name = data.name;\n    \t\t\tif ( data.matrix !== undefined ) {\n\n    \t\t\t\tmatrix.fromArray( data.matrix );\n    \t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n    \t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n    \t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n    \t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n    \t\t\t}\n\n    \t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n    \t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n    \t\t\tif ( data.shadow ) {\n\n    \t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n    \t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n    \t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n    \t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n    \t\t\t}\n\n    \t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n    \t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n    \t\t\tif ( data.children !== undefined ) {\n\n    \t\t\t\tfor ( var child in data.children ) {\n\n    \t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( data.type === 'LOD' ) {\n\n    \t\t\t\tvar levels = data.levels;\n\n    \t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\t\t\tvar level = levels[ l ];\n    \t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n    \t\t\t\t\tif ( child !== undefined ) {\n\n    \t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn object;\n\n    \t\t};\n\n    \t}()\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Extensible curve object\n     *\n     * Some common of Curve methods\n     * .getPoint(t), getTangent(t)\n     * .getPointAt(u), getTangentAt(u)\n     * .getPoints(), .getSpacedPoints()\n     * .getLength()\n     * .updateArcLengths()\n     *\n     * This following classes subclasses THREE.Curve:\n     *\n     * -- 2d classes --\n     * THREE.LineCurve\n     * THREE.QuadraticBezierCurve\n     * THREE.CubicBezierCurve\n     * THREE.SplineCurve\n     * THREE.ArcCurve\n     * THREE.EllipseCurve\n     *\n     * -- 3d classes --\n     * THREE.LineCurve3\n     * THREE.QuadraticBezierCurve3\n     * THREE.CubicBezierCurve3\n     * THREE.SplineCurve3\n     *\n     * A series of curves can be represented as a THREE.CurvePath\n     *\n     **/\n\n    /**************************************************************\n     *\tAbstract Curve base class\n     **************************************************************/\n\n    function Curve() {}\n\n    Curve.prototype = {\n\n    \tconstructor: Curve,\n\n    \t// Virtual base class method to overwrite and implement in subclasses\n    \t//\t- t [0 .. 1]\n\n    \tgetPoint: function ( t ) {\n\n    \t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n    \t\treturn null;\n\n    \t},\n\n    \t// Get point at relative position in curve according to arc length\n    \t// - u [0 .. 1]\n\n    \tgetPointAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getPoint( t );\n\n    \t},\n\n    \t// Get sequence of points using getPoint( t )\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get sequence of points using getPointAt( u )\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get total curve arc length\n\n    \tgetLength: function () {\n\n    \t\tvar lengths = this.getLengths();\n    \t\treturn lengths[ lengths.length - 1 ];\n\n    \t},\n\n    \t// Get list of cumulative segment lengths\n\n    \tgetLengths: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n    \t\tif ( this.cacheArcLengths\n    \t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n    \t\t\t&& ! this.needsUpdate ) {\n\n    \t\t\t//console.log( \"cached\", this.cacheArcLengths );\n    \t\t\treturn this.cacheArcLengths;\n\n    \t\t}\n\n    \t\tthis.needsUpdate = false;\n\n    \t\tvar cache = [];\n    \t\tvar current, last = this.getPoint( 0 );\n    \t\tvar p, sum = 0;\n\n    \t\tcache.push( 0 );\n\n    \t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n    \t\t\tcurrent = this.getPoint ( p / divisions );\n    \t\t\tsum += current.distanceTo( last );\n    \t\t\tcache.push( sum );\n    \t\t\tlast = current;\n\n    \t\t}\n\n    \t\tthis.cacheArcLengths = cache;\n\n    \t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n    \t},\n\n    \tupdateArcLengths: function() {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n    \tgetUtoTmapping: function ( u, distance ) {\n\n    \t\tvar arcLengths = this.getLengths();\n\n    \t\tvar i = 0, il = arcLengths.length;\n\n    \t\tvar targetArcLength; // The targeted u distance value to get\n\n    \t\tif ( distance ) {\n\n    \t\t\ttargetArcLength = distance;\n\n    \t\t} else {\n\n    \t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n    \t\t}\n\n    \t\t//var time = Date.now();\n\n    \t\t// binary search for the index with largest value smaller than target u distance\n\n    \t\tvar low = 0, high = il - 1, comparison;\n\n    \t\twhile ( low <= high ) {\n\n    \t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n    \t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n    \t\t\tif ( comparison < 0 ) {\n\n    \t\t\t\tlow = i + 1;\n\n    \t\t\t} else if ( comparison > 0 ) {\n\n    \t\t\t\thigh = i - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\thigh = i;\n    \t\t\t\tbreak;\n\n    \t\t\t\t// DONE\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\ti = high;\n\n    \t\t//console.log('b' , i, low, high, Date.now()- time);\n\n    \t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n    \t\t\tvar t = i / ( il - 1 );\n    \t\t\treturn t;\n\n    \t\t}\n\n    \t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n    \t\tvar lengthBefore = arcLengths[ i ];\n    \t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n    \t\tvar segmentLength = lengthAfter - lengthBefore;\n\n    \t\t// determine where we are between the 'before' and 'after' points\n\n    \t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n    \t\t// add that fractional amount to t\n\n    \t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n    \t\treturn t;\n\n    \t},\n\n    \t// Returns a unit vector tangent at t\n    \t// In case any sub curve does not implement its tangent derivation,\n    \t// 2 points a small delta apart will be used to find its gradient\n    \t// which seems to give a reasonable approximation\n\n    \tgetTangent: function( t ) {\n\n    \t\tvar delta = 0.0001;\n    \t\tvar t1 = t - delta;\n    \t\tvar t2 = t + delta;\n\n    \t\t// Capping in case of danger\n\n    \t\tif ( t1 < 0 ) t1 = 0;\n    \t\tif ( t2 > 1 ) t2 = 1;\n\n    \t\tvar pt1 = this.getPoint( t1 );\n    \t\tvar pt2 = this.getPoint( t2 );\n\n    \t\tvar vec = pt2.clone().sub( pt1 );\n    \t\treturn vec.normalize();\n\n    \t},\n\n    \tgetTangentAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getTangent( t );\n\n    \t}\n\n    };\n\n    // TODO: Transformation for Curves?\n\n    /**************************************************************\n     *\t3D Curves\n     **************************************************************/\n\n    // A Factory method for creating new curve subclasses\n\n    Curve.create = function ( constructor, getPointFunc ) {\n\n    \tconstructor.prototype = Object.create( Curve.prototype );\n    \tconstructor.prototype.constructor = constructor;\n    \tconstructor.prototype.getPoint = getPointFunc;\n\n    \treturn constructor;\n\n    };\n\n    /**************************************************************\n     *\tLine\n     **************************************************************/\n\n    function LineCurve( v1, v2 ) {\n\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    LineCurve.prototype = Object.create( Curve.prototype );\n    LineCurve.prototype.constructor = LineCurve;\n\n    LineCurve.prototype.isLineCurve = true;\n\n    LineCurve.prototype.getPoint = function ( t ) {\n\n    \tif ( t === 1 ) {\n\n    \t\treturn this.v2.clone();\n\n    \t}\n\n    \tvar point = this.v2.clone().sub( this.v1 );\n    \tpoint.multiplyScalar( t ).add( this.v1 );\n\n    \treturn point;\n\n    };\n\n    // Line curve is linear, so we can overwrite default getPointAt\n\n    LineCurve.prototype.getPointAt = function ( u ) {\n\n    \treturn this.getPoint( u );\n\n    };\n\n    LineCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangent = this.v2.clone().sub( this.v1 );\n\n    \treturn tangent.normalize();\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     **/\n\n    /**************************************************************\n     *\tCurved Path - a curve path is simply a array of connected\n     *  curves, but retains the api of a curve\n     **************************************************************/\n\n    function CurvePath() {\n\n    \tthis.curves = [];\n\n    \tthis.autoClose = false; // Automatically closes the path\n\n    }\n\n    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n    \tconstructor: CurvePath,\n\n    \tadd: function ( curve ) {\n\n    \t\tthis.curves.push( curve );\n\n    \t},\n\n    \tclosePath: function () {\n\n    \t\t// Add a line curve if start and end of lines are not connected\n    \t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n    \t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n    \t\tif ( ! startPoint.equals( endPoint ) ) {\n\n    \t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n    \t\t}\n\n    \t},\n\n    \t// To get accurate point with reference to\n    \t// entire path distance at time t,\n    \t// following has to be done:\n\n    \t// 1. Length of each sub path have to be known\n    \t// 2. Locate and identify type of curve\n    \t// 3. Get t for the curve\n    \t// 4. Return curve.getPointAt(t')\n\n    \tgetPoint: function ( t ) {\n\n    \t\tvar d = t * this.getLength();\n    \t\tvar curveLengths = this.getCurveLengths();\n    \t\tvar i = 0;\n\n    \t\t// To think about boundaries points.\n\n    \t\twhile ( i < curveLengths.length ) {\n\n    \t\t\tif ( curveLengths[ i ] >= d ) {\n\n    \t\t\t\tvar diff = curveLengths[ i ] - d;\n    \t\t\t\tvar curve = this.curves[ i ];\n\n    \t\t\t\tvar segmentLength = curve.getLength();\n    \t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n    \t\t\t\treturn curve.getPointAt( u );\n\n    \t\t\t}\n\n    \t\t\ti ++;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t\t// loop where sum != 0, sum > d , sum+1 <d\n\n    \t},\n\n    \t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n    \t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    \t// getPoint() depends on getLength\n\n    \tgetLength: function () {\n\n    \t\tvar lens = this.getCurveLengths();\n    \t\treturn lens[ lens.length - 1 ];\n\n    \t},\n\n    \t// cacheLengths must be recalculated.\n    \tupdateArcLengths: function () {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.cacheLengths = null;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Compute lengths and cache them\n    \t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n    \tgetCurveLengths: function () {\n\n    \t\t// We use cache values if curves and cache array are same length\n\n    \t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n    \t\t\treturn this.cacheLengths;\n\n    \t\t}\n\n    \t\t// Get length of sub-curve\n    \t\t// Push sums into cached array\n\n    \t\tvar lengths = [], sums = 0;\n\n    \t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n    \t\t\tsums += this.curves[ i ].getLength();\n    \t\t\tlengths.push( sums );\n\n    \t\t}\n\n    \t\tthis.cacheLengths = lengths;\n\n    \t\treturn lengths;\n\n    \t},\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 40;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n    \t\t}\n\n    \t\tif ( this.autoClose ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tdivisions = divisions || 12;\n\n    \t\tvar points = [], last;\n\n    \t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n    \t\t\tvar curve = curves[ i ];\n    \t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n    \t\t\t\t: (curve && curve.isLineCurve) ? 1\n    \t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n    \t\t\t\t: divisions;\n\n    \t\t\tvar pts = curve.getPoints( resolution );\n\n    \t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n    \t\t\t\tvar point = pts[ j ];\n\n    \t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n    \t\t\t\tpoints.push( point );\n    \t\t\t\tlast = point;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t/**************************************************************\n    \t *\tCreate Geometries Helpers\n    \t **************************************************************/\n\n    \t/// Generate geometry from path points (for Line or Points objects)\n\n    \tcreatePointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \t// Generate geometry from equidistant sampling along the path\n\n    \tcreateSpacedPointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getSpacedPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \tcreateGeometry: function ( points ) {\n\n    \t\tvar geometry = new Geometry();\n\n    \t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n    \t\t\tvar point = points[ i ];\n    \t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**************************************************************\n     *\tEllipse curve\n     **************************************************************/\n\n    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \tthis.aX = aX;\n    \tthis.aY = aY;\n\n    \tthis.xRadius = xRadius;\n    \tthis.yRadius = yRadius;\n\n    \tthis.aStartAngle = aStartAngle;\n    \tthis.aEndAngle = aEndAngle;\n\n    \tthis.aClockwise = aClockwise;\n\n    \tthis.aRotation = aRotation || 0;\n\n    }\n\n    EllipseCurve.prototype = Object.create( Curve.prototype );\n    EllipseCurve.prototype.constructor = EllipseCurve;\n\n    EllipseCurve.prototype.isEllipseCurve = true;\n\n    EllipseCurve.prototype.getPoint = function( t ) {\n\n    \tvar twoPi = Math.PI * 2;\n    \tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n    \tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n    \t// ensures that deltaAngle is 0 .. 2 PI\n    \twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n    \twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n    \tif ( deltaAngle < Number.EPSILON ) {\n\n    \t\tif ( samePoints ) {\n\n    \t\t\tdeltaAngle = 0;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tif ( this.aClockwise === true && ! samePoints ) {\n\n    \t\tif ( deltaAngle === twoPi ) {\n\n    \t\t\tdeltaAngle = - twoPi;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = deltaAngle - twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tvar angle = this.aStartAngle + t * deltaAngle;\n    \tvar x = this.aX + this.xRadius * Math.cos( angle );\n    \tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n    \tif ( this.aRotation !== 0 ) {\n\n    \t\tvar cos = Math.cos( this.aRotation );\n    \t\tvar sin = Math.sin( this.aRotation );\n\n    \t\tvar tx = x - this.aX;\n    \t\tvar ty = y - this.aY;\n\n    \t\t// Rotate the point about the center of the ellipse.\n    \t\tx = tx * cos - ty * sin + this.aX;\n    \t\ty = tx * sin + ty * cos + this.aY;\n\n    \t}\n\n    \treturn new Vector2( x, y );\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.CurveUtils = {\n\n    \ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n    \t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n    \t},\n\n    \t// Puay Bing, thanks for helping with this derivative!\n\n    \ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n    \t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n    \t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n    \t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n    \t\t\t3 * t * t * p3;\n\n    \t},\n\n    \ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n    \t\t// To check if my formulas are correct\n\n    \t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n    \t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n    \t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n    \t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n    \t\treturn h00 + h10 + h01 + h11;\n\n    \t},\n\n    \t// Catmull-Rom\n\n    \tinterpolate: function( p0, p1, p2, p3, t ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5;\n    \t\tvar v1 = ( p3 - p1 ) * 0.5;\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t * t2;\n    \t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    };\n\n    /**************************************************************\n     *\tSpline curve\n     **************************************************************/\n\n    function SplineCurve( points /* array of Vector2 */ ) {\n\n    \tthis.points = ( points === undefined ) ? [] : points;\n\n    }\n\n    SplineCurve.prototype = Object.create( Curve.prototype );\n    SplineCurve.prototype.constructor = SplineCurve;\n\n    SplineCurve.prototype.isSplineCurve = true;\n\n    SplineCurve.prototype.getPoint = function ( t ) {\n\n    \tvar points = this.points;\n    \tvar point = ( points.length - 1 ) * t;\n\n    \tvar intPoint = Math.floor( point );\n    \tvar weight = point - intPoint;\n\n    \tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n    \tvar point1 = points[ intPoint ];\n    \tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \tvar interpolate = exports.CurveUtils.interpolate;\n\n    \treturn new Vector2(\n    \t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n    \t);\n\n    };\n\n    /**************************************************************\n     *\tCubic Bezier curve\n     **************************************************************/\n\n    function CubicBezierCurve( v0, v1, v2, v3 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n    \tthis.v3 = v3;\n\n    }\n\n    CubicBezierCurve.prototype = Object.create( Curve.prototype );\n    CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n    CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b3 = exports.ShapeUtils.b3;\n\n    \treturn new Vector2(\n    \t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t);\n\n    };\n\n    CubicBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;\n\n    \treturn new Vector2(\n    \t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t).normalize();\n\n    };\n\n    /**************************************************************\n     *\tQuadratic Bezier curve\n     **************************************************************/\n\n\n    function QuadraticBezierCurve( v0, v1, v2 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\n    QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b2 = exports.ShapeUtils.b2;\n\n    \treturn new Vector2(\n    \t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n    \t);\n\n    };\n\n\n    QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;\n\n    \treturn new Vector2(\n    \t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n    \t).normalize();\n\n    };\n\n    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n    \tfromPoints: function ( vectors ) {\n\n    \t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n    \t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n    \t\t}\n\n    \t},\n\n    \tmoveTo: function ( x, y ) {\n\n    \t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n    \t},\n\n    \tlineTo: function ( x, y ) {\n\n    \t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( x, y );\n\n    \t},\n\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n    \t\tvar curve = new QuadraticBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCPx, aCPy ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n    \t\tvar curve = new CubicBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCP1x, aCP1y ),\n    \t\t\tnew Vector2( aCP2x, aCP2y ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n    \t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n    \t\tvar curve = new SplineCurve( npts );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n    \t},\n\n    \tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absarc( aX + x0, aY + y0, aRadius,\n    \t\t\taStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t},\n\n    \tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t\tif ( this.curves.length > 0 ) {\n\n    \t\t\t// if a previous curve is present, attempt to join\n    \t\t\tvar firstPoint = curve.getPoint( 0 );\n\n    \t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n    \t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.curves.push( curve );\n\n    \t\tvar lastPoint = curve.getPoint( 1 );\n    \t\tthis.currentPoint.copy( lastPoint );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Defines a 2d shape plane using paths.\n     **/\n\n    // STEP 1 Create a path.\n    // STEP 2 Turn path into shape.\n    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n    // STEP 3a - Extract points from each shape, turn to vertices\n    // STEP 3b - Triangulate each shape, add faces.\n\n    function Shape() {\n\n    \tPath.apply( this, arguments );\n\n    \tthis.holes = [];\n\n    }\n\n    Shape.prototype = Object.assign( Object.create( PathPrototype ), {\n\n    \tconstructor: Shape,\n\n    \tgetPointsHoles: function ( divisions ) {\n\n    \t\tvar holesPts = [];\n\n    \t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n    \t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n    \t\t}\n\n    \t\treturn holesPts;\n\n    \t},\n\n    \t// Get points of shape and holes (keypoints based on segments parameter)\n\n    \textractAllPoints: function ( divisions ) {\n\n    \t\treturn {\n\n    \t\t\tshape: this.getPoints( divisions ),\n    \t\t\tholes: this.getPointsHoles( divisions )\n\n    \t\t};\n\n    \t},\n\n    \textractPoints: function ( divisions ) {\n\n    \t\treturn this.extractAllPoints( divisions );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Creates free form 2d path using series of points, lines or curves.\n     *\n     **/\n\n    function Path( points ) {\n\n    \tCurvePath.call( this );\n    \tthis.currentPoint = new Vector2();\n\n    \tif ( points ) {\n\n    \t\tthis.fromPoints( points );\n\n    \t}\n\n    }\n\n    Path.prototype = PathPrototype;\n    PathPrototype.constructor = Path;\n\n\n    // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n    function ShapePath() {\n    \tthis.subPaths = [];\n    \tthis.currentPath = null;\n    }\n\n    ShapePath.prototype = {\n    \tmoveTo: function ( x, y ) {\n    \t\tthis.currentPath = new Path();\n    \t\tthis.subPaths.push(this.currentPath);\n    \t\tthis.currentPath.moveTo( x, y );\n    \t},\n    \tlineTo: function ( x, y ) {\n    \t\tthis.currentPath.lineTo( x, y );\n    \t},\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n    \t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n    \t},\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n    \t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n    \t},\n    \tsplineThru: function ( pts ) {\n    \t\tthis.currentPath.splineThru( pts );\n    \t},\n\n    \ttoShapes: function ( isCCW, noHoles ) {\n\n    \t\tfunction toShapesNoHoles( inSubpaths ) {\n\n    \t\t\tvar shapes = [];\n\n    \t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n    \t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n    \t\t\t\tvar tmpShape = new Shape();\n    \t\t\t\ttmpShape.curves = tmpPath.curves;\n\n    \t\t\t\tshapes.push( tmpShape );\n\n    \t\t\t}\n\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n    \t\t\tvar polyLen = inPolygon.length;\n\n    \t\t\t// inPt on polygon contour => immediate success    or\n    \t\t\t// toggling of inside/outside at every single! intersection point of an edge\n    \t\t\t//  with the horizontal line through inPt, left of inPt\n    \t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n    \t\t\tvar inside = false;\n    \t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n    \t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n    \t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n    \t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n    \t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n    \t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n    \t\t\t\t\t// not parallel\n    \t\t\t\t\tif ( edgeDy < 0 ) {\n\n    \t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n    \t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n    \t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n    \t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n    \t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n    \t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// parallel or collinear\n    \t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n    \t\t\t\t\t// edge lies on the same horizontal line as inPt\n    \t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n    \t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n    \t\t\t\t\t// continue;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn\tinside;\n\n    \t\t}\n\n    \t\tvar isClockWise = exports.ShapeUtils.isClockWise;\n\n    \t\tvar subPaths = this.subPaths;\n    \t\tif ( subPaths.length === 0 ) return [];\n\n    \t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n    \t\tif ( subPaths.length === 1 ) {\n\n    \t\t\ttmpPath = subPaths[ 0 ];\n    \t\t\ttmpShape = new Shape();\n    \t\t\ttmpShape.curves = tmpPath.curves;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n    \t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n    \t\t// console.log(\"Holes first\", holesFirst);\n\n    \t\tvar betterShapeHoles = [];\n    \t\tvar newShapes = [];\n    \t\tvar newShapeHoles = [];\n    \t\tvar mainIdx = 0;\n    \t\tvar tmpPoints;\n\n    \t\tnewShapes[ mainIdx ] = undefined;\n    \t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n    \t\t\ttmpPath = subPaths[ i ];\n    \t\t\ttmpPoints = tmpPath.getPoints();\n    \t\t\tsolid = isClockWise( tmpPoints );\n    \t\t\tsolid = isCCW ? ! solid : solid;\n\n    \t\t\tif ( solid ) {\n\n    \t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n    \t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n    \t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n    \t\t\t\tif ( holesFirst )\tmainIdx ++;\n    \t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\t\t\t//console.log('cw', i);\n\n    \t\t\t} else {\n\n    \t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n    \t\t\t\t//console.log('ccw', i);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// only Holes? -> probably all Shapes with wrong orientation\n    \t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tif ( newShapes.length > 1 ) {\n\n    \t\t\tvar ambiguous = false;\n    \t\t\tvar toChange = [];\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n    \t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n    \t\t\t\t\tvar ho = sho[ hIdx ];\n    \t\t\t\t\tvar hole_unassigned = true;\n\n    \t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n    \t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n    \t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n    \t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\t\t\thole_unassigned = false;\n    \t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tambiguous = true;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n    \t\t\t// console.log(\"ambiguous: \", ambiguous);\n    \t\t\tif ( toChange.length > 0 ) {\n\n    \t\t\t\t// console.log(\"to change: \", toChange);\n    \t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar tmpHoles;\n\n    \t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n    \t\t\ttmpShape = newShapes[ i ].s;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\ttmpHoles = newShapeHoles[ i ];\n\n    \t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n    \t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//console.log(\"shape\", shapes);\n\n    \t\treturn shapes;\n\n    \t}\n    }\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Font( data ) {\n\n    \tthis.data = data;\n\n    }\n\n    Object.assign( Font.prototype, {\n\n    \tisFont: true,\n\n    \tgenerateShapes: function ( text, size, divisions ) {\n\n    \t\tfunction createPaths( text ) {\n\n    \t\t\tvar chars = String( text ).split( '' );\n    \t\t\tvar scale = size / data.resolution;\n    \t\t\tvar offset = 0;\n\n    \t\t\tvar paths = [];\n\n    \t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n    \t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n    \t\t\t\toffset += ret.offset;\n\n    \t\t\t\tpaths.push( ret.path );\n\n    \t\t\t}\n\n    \t\t\treturn paths;\n\n    \t\t}\n\n    \t\tfunction createPath( c, scale, offset ) {\n\n    \t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n    \t\t\tif ( ! glyph ) return;\n\n    \t\t\tvar path = new ShapePath();\n\n    \t\t\tvar pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;\n    \t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n    \t\t\tif ( glyph.o ) {\n\n    \t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n    \t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n    \t\t\t\t\tvar action = outline[ i ++ ];\n\n    \t\t\t\t\tswitch ( action ) {\n\n    \t\t\t\t\t\tcase 'm': // moveTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.moveTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'l': // lineTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.lineTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n    \t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n    \t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn { offset: glyph.ha * scale, path: path };\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( size === undefined ) size = 100;\n    \t\tif ( divisions === undefined ) divisions = 4;\n\n    \t\tvar data = this.data;\n\n    \t\tvar paths = createPaths( text );\n    \t\tvar shapes = [];\n\n    \t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n    \t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n    \t\t}\n\n    \t\treturn shapes;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function FontLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( FontLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json;\n\n    \t\t\ttry {\n\n    \t\t\t\tjson = JSON.parse( text );\n\n    \t\t\t} catch ( e ) {\n\n    \t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n    \t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n    \t\t\t}\n\n    \t\t\tvar font = scope.parse( json );\n\n    \t\t\tif ( onLoad ) onLoad( font );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\treturn new Font( json );\n\n    \t}\n\n    } );\n\n    var context;\n\n    function getAudioContext() {\n\n    \tif ( context === undefined ) {\n\n    \t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n    \t}\n\n    \treturn context;\n\n    }\n\n    /**\n     * @author Reece Aaron Lecrivain / http://reecenotes.com/\n     */\n\n    function AudioLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( AudioLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar context = getAudioContext();\n\n    \t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n    \t\t\t\tonLoad( audioBuffer );\n\n    \t\t\t} );\n\n    \t\t}, onProgress, onError );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function StereoCamera() {\n\n    \tthis.type = 'StereoCamera';\n\n    \tthis.aspect = 1;\n\n    \tthis.eyeSep = 0.064;\n\n    \tthis.cameraL = new PerspectiveCamera();\n    \tthis.cameraL.layers.enable( 1 );\n    \tthis.cameraL.matrixAutoUpdate = false;\n\n    \tthis.cameraR = new PerspectiveCamera();\n    \tthis.cameraR.layers.enable( 2 );\n    \tthis.cameraR.matrixAutoUpdate = false;\n\n    }\n\n    Object.assign( StereoCamera.prototype, {\n\n    \tupdate: ( function () {\n\n    \t\tvar instance, focus, fov, aspect, near, far, zoom;\n\n    \t\tvar eyeRight = new Matrix4();\n    \t\tvar eyeLeft = new Matrix4();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n    \t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n    \t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\n    \t\t\tif ( needsUpdate ) {\n\n    \t\t\t\tinstance = this;\n    \t\t\t\tfocus = camera.focus;\n    \t\t\t\tfov = camera.fov;\n    \t\t\t\taspect = camera.aspect * this.aspect;\n    \t\t\t\tnear = camera.near;\n    \t\t\t\tfar = camera.far;\n    \t\t\t\tzoom = camera.zoom;\n\n    \t\t\t\t// Off-axis stereoscopic effect based on\n    \t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n    \t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n    \t\t\t\tvar eyeSep = this.eyeSep / 2;\n    \t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n    \t\t\t\tvar ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n    \t\t\t\tvar xmin, xmax;\n\n    \t\t\t\t// translate xOffset\n\n    \t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n    \t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n    \t\t\t\t// for left eye\n\n    \t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t\t// for right eye\n\n    \t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t}\n\n    \t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n    \t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    /**\n     * Camera for rendering cube maps\n     *\t- renders scene into axis-aligned cube\n     *\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CubeCamera( near, far, cubeResolution ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'CubeCamera';\n\n    \tvar fov = 90, aspect = 1;\n\n    \tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPX.up.set( 0, - 1, 0 );\n    \tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n    \tthis.add( cameraPX );\n\n    \tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNX.up.set( 0, - 1, 0 );\n    \tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n    \tthis.add( cameraNX );\n\n    \tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPY.up.set( 0, 0, 1 );\n    \tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n    \tthis.add( cameraPY );\n\n    \tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNY.up.set( 0, 0, - 1 );\n    \tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n    \tthis.add( cameraNY );\n\n    \tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPZ.up.set( 0, - 1, 0 );\n    \tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n    \tthis.add( cameraPZ );\n\n    \tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNZ.up.set( 0, - 1, 0 );\n    \tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n    \tthis.add( cameraNZ );\n\n    \tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n    \tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n    \tthis.updateCubeMap = function ( renderer, scene ) {\n\n    \t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n    \t\tvar renderTarget = this.renderTarget;\n    \t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n    \t\trenderTarget.texture.generateMipmaps = false;\n\n    \t\trenderTarget.activeCubeFace = 0;\n    \t\trenderer.render( scene, cameraPX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 1;\n    \t\trenderer.render( scene, cameraNX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 2;\n    \t\trenderer.render( scene, cameraPY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 3;\n    \t\trenderer.render( scene, cameraNY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 4;\n    \t\trenderer.render( scene, cameraPZ, renderTarget );\n\n    \t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n    \t\trenderTarget.activeCubeFace = 5;\n    \t\trenderer.render( scene, cameraNZ, renderTarget );\n\n    \t\trenderer.setRenderTarget( null );\n\n    \t};\n\n    }\n\n    CubeCamera.prototype = Object.create( Object3D.prototype );\n    CubeCamera.prototype.constructor = CubeCamera;\n\n    function AudioListener() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'AudioListener';\n\n    \tthis.context = getAudioContext();\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( this.context.destination );\n\n    \tthis.filter = null;\n\n    }\n\n    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: AudioListener,\n\n    \tgetInput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tremoveFilter: function ( ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n    \t\t\tthis.gain.connect( this.context.destination );\n    \t\t\tthis.filter = null;\n\n    \t\t}\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.filter;\n\n    \t},\n\n    \tsetFilter: function ( value ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n\n    \t\t} else {\n\n    \t\t\tthis.gain.disconnect( this.context.destination );\n\n    \t\t}\n\n    \t\tthis.filter = value;\n    \t\tthis.gain.connect( this.filter );\n    \t\tthis.filter.connect( this.context.destination );\n\n    \t},\n\n    \tgetMasterVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n    \tsetMasterVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n    \t\tvar scale = new Vector3();\n\n    \t\tvar orientation = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tvar listener = this.context.listener;\n    \t\t\tvar up = this.up;\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n    \t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t\t\tlistener.setPosition( position.x, position.y, position.z );\n    \t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    function Audio( listener ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Audio';\n\n    \tthis.context = listener.context;\n    \tthis.source = this.context.createBufferSource();\n    \tthis.source.onended = this.onEnded.bind( this );\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( listener.getInput() );\n\n    \tthis.autoplay = false;\n\n    \tthis.startTime = 0;\n    \tthis.playbackRate = 1;\n    \tthis.isPlaying = false;\n    \tthis.hasPlaybackControl = true;\n    \tthis.sourceType = 'empty';\n\n    \tthis.filters = [];\n\n    }\n\n    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Audio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tsetNodeSource: function ( audioNode ) {\n\n    \t\tthis.hasPlaybackControl = false;\n    \t\tthis.sourceType = 'audioNode';\n    \t\tthis.source = audioNode;\n    \t\tthis.connect();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetBuffer: function ( audioBuffer ) {\n\n    \t\tthis.source.buffer = audioBuffer;\n    \t\tthis.sourceType = 'buffer';\n\n    \t\tif ( this.autoplay ) this.play();\n\n    \t\treturn this;\n\n    \t},\n\n    \tplay: function () {\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar source = this.context.createBufferSource();\n\n    \t\tsource.buffer = this.source.buffer;\n    \t\tsource.loop = this.source.loop;\n    \t\tsource.onended = this.source.onended;\n    \t\tsource.start( 0, this.startTime );\n    \t\tsource.playbackRate.value = this.playbackRate;\n\n    \t\tthis.isPlaying = true;\n\n    \t\tthis.source = source;\n\n    \t\treturn this.connect();\n\n    \t},\n\n    \tpause: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = this.context.currentTime;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = 0;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.connect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.connect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdisconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.disconnect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilters: function () {\n\n    \t\treturn this.filters;\n\n    \t},\n\n    \tsetFilters: function ( value ) {\n\n    \t\tif ( ! value ) value = [];\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.disconnect();\n    \t\t\tthis.filters = value;\n    \t\t\tthis.connect();\n\n    \t\t} else {\n\n    \t\t\tthis.filters = value;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.getFilters()[ 0 ];\n\n    \t},\n\n    \tsetFilter: function ( filter ) {\n\n    \t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n    \t},\n\n    \tsetPlaybackRate: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.playbackRate = value;\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetPlaybackRate: function () {\n\n    \t\treturn this.playbackRate;\n\n    \t},\n\n    \tonEnded: function () {\n\n    \t\tthis.isPlaying = false;\n\n    \t},\n\n    \tgetLoop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn this.source.loop;\n\n    \t},\n\n    \tsetLoop: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.loop = value;\n\n    \t},\n\n    \tgetVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n\n    \tsetVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    function PositionalAudio( listener ) {\n\n    \tAudio.call( this, listener );\n\n    \tthis.panner = this.context.createPanner();\n    \tthis.panner.connect( this.gain );\n\n    }\n\n    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n    \tconstructor: PositionalAudio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.panner;\n\n    \t},\n\n    \tgetRefDistance: function () {\n\n    \t\treturn this.panner.refDistance;\n\n    \t},\n\n    \tsetRefDistance: function ( value ) {\n\n    \t\tthis.panner.refDistance = value;\n\n    \t},\n\n    \tgetRolloffFactor: function () {\n\n    \t\treturn this.panner.rolloffFactor;\n\n    \t},\n\n    \tsetRolloffFactor: function ( value ) {\n\n    \t\tthis.panner.rolloffFactor = value;\n\n    \t},\n\n    \tgetDistanceModel: function () {\n\n    \t\treturn this.panner.distanceModel;\n\n    \t},\n\n    \tsetDistanceModel: function ( value ) {\n\n    \t\tthis.panner.distanceModel = value;\n\n    \t},\n\n    \tgetMaxDistance: function () {\n\n    \t\treturn this.panner.maxDistance;\n\n    \t},\n\n    \tsetMaxDistance: function ( value ) {\n\n    \t\tthis.panner.maxDistance = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n    \t\t};\n\n    \t} )()\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AudioAnalyser( audio, fftSize ) {\n\n    \tthis.analyser = audio.context.createAnalyser();\n    \tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n    \tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n    \taudio.getOutput().connect( this.analyser );\n\n    }\n\n    Object.assign( AudioAnalyser.prototype, {\n\n    \tgetFrequencyData: function () {\n\n    \t\tthis.analyser.getByteFrequencyData( this.data );\n\n    \t\treturn this.data;\n\n    \t},\n\n    \tgetAverageFrequency: function () {\n\n    \t\tvar value = 0, data = this.getFrequencyData();\n\n    \t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n    \t\t\tvalue += data[ i ];\n\n    \t\t}\n\n    \t\treturn value / data.length;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Buffered scene graph property that allows weighted accumulation.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyMixer( binding, typeName, valueSize ) {\n\n    \tthis.binding = binding;\n    \tthis.valueSize = valueSize;\n\n    \tvar bufferType = Float64Array,\n    \t\tmixFunction;\n\n    \tswitch ( typeName ) {\n\n    \t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n    \t\tcase 'string':\n    \t\tcase 'bool':\n\n    \t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n    \t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n    \t}\n\n    \tthis.buffer = new bufferType( valueSize * 4 );\n    \t// layout: [ incoming | accu0 | accu1 | orig ]\n    \t//\n    \t// interpolators can use .buffer as their .result\n    \t// the data then goes to 'incoming'\n    \t//\n    \t// 'accu0' and 'accu1' are used frame-interleaved for\n    \t// the cumulative result and are compared to detect\n    \t// changes\n    \t//\n    \t// 'orig' stores the original state of the property\n\n    \tthis._mixBufferRegion = mixFunction;\n\n    \tthis.cumulativeWeight = 0;\n\n    \tthis.useCount = 0;\n    \tthis.referenceCount = 0;\n\n    }\n\n    PropertyMixer.prototype = {\n\n    \tconstructor: PropertyMixer,\n\n    \t// accumulate data in the 'incoming' region into 'accu<i>'\n    \taccumulate: function( accuIndex, weight ) {\n\n    \t\t// note: happily accumulating nothing when weight = 0, the caller knows\n    \t\t// the weight and shouldn't have made the call in the first place\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tcurrentWeight = this.cumulativeWeight;\n\n    \t\tif ( currentWeight === 0 ) {\n\n    \t\t\t// accuN := incoming * weight\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n    \t\t\t}\n\n    \t\t\tcurrentWeight = weight;\n\n    \t\t} else {\n\n    \t\t\t// accuN := accuN + incoming * weight\n\n    \t\t\tcurrentWeight += weight;\n    \t\t\tvar mix = weight / currentWeight;\n    \t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = currentWeight;\n\n    \t},\n\n    \t// apply the state of 'accu<i>' to the binding when accus differ\n    \tapply: function( accuIndex ) {\n\n    \t\tvar stride = this.valueSize,\n    \t\t\tbuffer = this.buffer,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tweight = this.cumulativeWeight,\n\n    \t\t\tbinding = this.binding;\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t\tif ( weight < 1 ) {\n\n    \t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n    \t\t\tvar originalValueOffset = stride * 3;\n\n    \t\t\tthis._mixBufferRegion(\n    \t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n    \t\t}\n\n    \t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n    \t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n    \t\t\t\t// value has changed -> update scene graph\n\n    \t\t\t\tbinding.setValue( buffer, offset );\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remember the state of the bound property and copy it to both accus\n    \tsaveOriginalState: function() {\n\n    \t\tvar binding = this.binding;\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toriginalValueOffset = stride * 3;\n\n    \t\tbinding.getValue( buffer, originalValueOffset );\n\n    \t\t// accu[0..1] := orig -- initially detect changes against the original\n    \t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n    \t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t},\n\n    \t// apply the state previously taken via 'saveOriginalState' to the binding\n    \trestoreOriginalState: function() {\n\n    \t\tvar originalValueOffset = this.valueSize * 3;\n    \t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n    \t},\n\n\n    \t// mix functions\n\n    \t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tif ( t >= 0.5 ) {\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tQuaternion.slerpFlat( buffer, dstOffset,\n    \t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n    \t},\n\n    \t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tvar s = 1 - t;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tvar j = dstOffset + i;\n\n    \t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * A reference to a real property in the scene graph.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyBinding( rootNode, path, parsedPath ) {\n\n    \tthis.path = path;\n    \tthis.parsedPath = parsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis.node = PropertyBinding.findNode(\n    \t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n    \tthis.rootNode = rootNode;\n\n    }\n\n    PropertyBinding.prototype = {\n\n    \tconstructor: PropertyBinding,\n\n    \tgetValue: function getValue_unbound( targetArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.getValue( targetArray, offset );\n\n    \t\t// Note: This class uses a State pattern on a per-method basis:\n    \t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n    \t\t// prototype version of these methods with one that represents\n    \t\t// the bound state. When the property is not found, the methods\n    \t\t// become no-ops.\n\n    \t},\n\n    \tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.setValue( sourceArray, offset );\n\n    \t},\n\n    \t// create getter / setter pair for a property in the scene graph\n    \tbind: function() {\n\n    \t\tvar targetObject = this.node,\n    \t\t\tparsedPath = this.parsedPath,\n\n    \t\t\tobjectName = parsedPath.objectName,\n    \t\t\tpropertyName = parsedPath.propertyName,\n    \t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n    \t\tif ( ! targetObject ) {\n\n    \t\t\ttargetObject = PropertyBinding.findNode(\n    \t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n    \t\t\tthis.node = targetObject;\n\n    \t\t}\n\n    \t\t// set fail state so we can just 'return' on error\n    \t\tthis.getValue = this._getValue_unavailable;\n    \t\tthis.setValue = this._setValue_unavailable;\n\n     \t\t// ensure there is a value node\n    \t\tif ( ! targetObject ) {\n\n    \t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( objectName ) {\n\n    \t\t\tvar objectIndex = parsedPath.objectIndex;\n\n    \t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n    \t\t\tswitch ( objectName ) {\n\n    \t\t\t\tcase 'materials':\n\n    \t\t\t\t\tif ( ! targetObject.material ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject.material.materials;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'bones':\n\n    \t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n    \t\t\t\t\t// and convert the integer string to a true integer.\n\n    \t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n    \t\t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n    \t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n    \t\t\t\t\t\t\tobjectIndex = i;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n    \t\t\t}\n\n\n    \t\t\tif ( objectIndex !== undefined ) {\n\n    \t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n    \t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// resolve property\n    \t\tvar nodeProperty = targetObject[ propertyName ];\n\n    \t\tif ( nodeProperty === undefined ) {\n\n    \t\t\tvar nodeName = parsedPath.nodeName;\n\n    \t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n    \t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\t// determine versioning scheme\n    \t\tvar versioning = this.Versioning.None;\n\n    \t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n    \t\t\tversioning = this.Versioning.NeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n    \t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t}\n\n    \t\t// determine how the property gets bound\n    \t\tvar bindingType = this.BindingType.Direct;\n\n    \t\tif ( propertyIndex !== undefined ) {\n    \t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n    \t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n    \t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n    \t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\tif ( ! targetObject.geometry ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n    \t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n    \t\t\t\t\t\tpropertyIndex = i;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tbindingType = this.BindingType.ArrayElement;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n    \t\t\tthis.propertyIndex = propertyIndex;\n\n    \t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n    \t\t\t// must use copy for Object3D.Euler/Quaternion\n\n    \t\t\tbindingType = this.BindingType.HasFromToArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else if ( nodeProperty.length !== undefined ) {\n\n    \t\t\tbindingType = this.BindingType.EntireArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else {\n\n    \t\t\tthis.propertyName = propertyName;\n\n    \t\t}\n\n    \t\t// select getter / setter\n    \t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n    \t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tthis.node = null;\n\n    \t\t// back to the prototype version of getValue / setValue\n    \t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n    \t\tthis.getValue = this._getValue_unbound;\n    \t\tthis.setValue = this._setValue_unbound;\n\n    \t}\n\n    };\n\n    Object.assign( PropertyBinding.prototype, { // prototype, continued\n\n    \t// these are used to \"bind\" a nonexistent property\n    \t_getValue_unavailable: function() {},\n    \t_setValue_unavailable: function() {},\n\n    \t// initial state of these methods that calls 'bind'\n    \t_getValue_unbound: PropertyBinding.prototype.getValue,\n    \t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n    \tBindingType: {\n    \t\tDirect: 0,\n    \t\tEntireArray: 1,\n    \t\tArrayElement: 2,\n    \t\tHasFromToArray: 3\n    \t},\n\n    \tVersioning: {\n    \t\tNone: 0,\n    \t\tNeedsUpdate: 1,\n    \t\tMatrixWorldNeedsUpdate: 2\n    \t},\n\n    \tGetterByBindingType: [\n\n    \t\tfunction getValue_direct( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n    \t\t},\n\n    \t\tfunction getValue_array( buffer, offset ) {\n\n    \t\t\tvar source = this.resolvedProperty;\n\n    \t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n    \t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n    \t\t\t}\n\n    \t\t},\n\n    \t\tfunction getValue_arrayElement( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n    \t\t},\n\n    \t\tfunction getValue_toArray( buffer, offset ) {\n\n    \t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n    \t\t}\n\n    \t],\n\n    \tSetterByBindingTypeAndVersioning: [\n\n    \t\t[\n    \t\t\t// Direct\n\n    \t\t\tfunction setValue_direct( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// EntireArray\n\n    \t\t\tfunction setValue_array( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// ArrayElement\n\n    \t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// HasToFromArray\n\n    \t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t]\n\n    \t]\n\n    } );\n\n    PropertyBinding.Composite =\n    \t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n    \tvar parsedPath = optionalParsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis._targetGroup = targetGroup;\n    \tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n    };\n\n    PropertyBinding.Composite.prototype = {\n\n    \tconstructor: PropertyBinding.Composite,\n\n    \tgetValue: function( array, offset ) {\n\n    \t\tthis.bind(); // bind all binding\n\n    \t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n    \t\t\tbinding = this._bindings[ firstValidIndex ];\n\n    \t\t// and only call .getValue on the first\n    \t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n    \t},\n\n    \tsetValue: function( array, offset ) {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].setValue( array, offset );\n\n    \t\t}\n\n    \t},\n\n    \tbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].bind();\n\n    \t\t}\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].unbind();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    PropertyBinding.create = function( root, path, parsedPath ) {\n\n    \tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\n    \t\treturn new PropertyBinding( root, path, parsedPath );\n\n    \t} else {\n\n    \t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n    \t}\n\n    };\n\n    PropertyBinding.parseTrackName = function( trackName ) {\n\n    \t// matches strings in the form of:\n    \t//    nodeName.property\n    \t//    nodeName.property[accessor]\n    \t//    nodeName.material.property[accessor]\n    \t//    uuid.property[accessor]\n    \t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n    \t//    parentName/nodeName.property\n    \t//    parentName/parentName/nodeName.property[index]\n    \t//    .bone[Armature.DEF_cog].position\n    \t//    scene:helium_balloon_model:helium_balloon_model.position\n    \t// created and tested via https://regex101.com/#javascript\n\n    \tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n    \tvar matches = re.exec( trackName );\n\n    \tif ( ! matches ) {\n\n    \t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n    \t}\n\n    \tvar results = {\n    \t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n    \t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n    \t\tobjectName: matches[ 3 ],\n    \t\tobjectIndex: matches[ 4 ],\n    \t\tpropertyName: matches[ 5 ],\n    \t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n    \t};\n\n    \tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n    \t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n    \t}\n\n    \treturn results;\n\n    };\n\n    PropertyBinding.findNode = function( root, nodeName ) {\n\n    \tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n    \t\treturn root;\n\n    \t}\n\n    \t// search into skeleton bones.\n    \tif ( root.skeleton ) {\n\n    \t\tvar searchSkeleton = function( skeleton ) {\n\n    \t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n    \t\t\t\tvar bone = skeleton.bones[ i ];\n\n    \t\t\t\tif ( bone.name === nodeName ) {\n\n    \t\t\t\t\treturn bone;\n\n    \t\t\t\t}\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar bone = searchSkeleton( root.skeleton );\n\n    \t\tif ( bone ) {\n\n    \t\t\treturn bone;\n\n    \t\t}\n    \t}\n\n    \t// search into node subtree.\n    \tif ( root.children ) {\n\n    \t\tvar searchNodeSubtree = function( children ) {\n\n    \t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n    \t\t\t\tvar childNode = children[ i ];\n\n    \t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n    \t\t\t\t\treturn childNode;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n    \t\t\t\tif ( result ) return result;\n\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n    \t\tif ( subTreeNode ) {\n\n    \t\t\treturn subTreeNode;\n\n    \t\t}\n\n    \t}\n\n    \treturn null;\n\n    };\n\n    /**\n     *\n     * A group of objects that receives a shared animation state.\n     *\n     * Usage:\n     *\n     * \t-\tAdd objects you would otherwise pass as 'root' to the\n     * \t\tconstructor or the .clipAction method of AnimationMixer.\n     *\n     * \t-\tInstead pass this object as 'root'.\n     *\n     * \t-\tYou can also add and remove objects later when the mixer\n     * \t\tis running.\n     *\n     * Note:\n     *\n     *  \tObjects of this class appear as one object to the mixer,\n     *  \tso cache control of the individual objects must be done\n     *  \ton the group.\n     *\n     * Limitation:\n     *\n     * \t- \tThe animated properties must be compatible among the\n     * \t\tall objects in the group.\n     *\n     *  -\tA single property can either be controlled through a\n     *  \ttarget group or directly, but not both.\n     *\n     * @author tschw\n     */\n\n    function AnimationObjectGroup( var_args ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// cached objects followed by the active ones\n    \tthis._objects = Array.prototype.slice.call( arguments );\n\n    \tthis.nCachedObjects_ = 0;\t\t\t// threshold\n    \t// note: read by PropertyBinding.Composite\n\n    \tvar indices = {};\n    \tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n    \tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\tindices[ arguments[ i ].uuid ] = i;\n\n    \t}\n\n    \tthis._paths = [];\t\t\t\t\t// inside: string\n    \tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n    \tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n    \tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n    \tvar scope = this;\n\n    \tthis.stats = {\n\n    \t\tobjects: {\n    \t\t\tget total() { return scope._objects.length; },\n    \t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n    \t\t},\n\n    \t\tget bindingsPerObject() { return scope._bindings.length; }\n\n    \t};\n\n    }\n\n    AnimationObjectGroup.prototype = {\n\n    \tconstructor: AnimationObjectGroup,\n\n    \tisAnimationObjectGroup: true,\n\n    \tadd: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tpaths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index === undefined ) {\n\n    \t\t\t\t// unknown object -> add it to the ACTIVE region\n\n    \t\t\t\tindex = nObjects ++;\n    \t\t\t\tindicesByUUID[ uuid ] = index;\n    \t\t\t\tobjects.push( object );\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tbindings[ j ].push(\n    \t\t\t\t\t\t\tnew PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( index < nCachedObjects ) {\n\n    \t\t\t\tvar knownObject = objects[ index ];\n\n    \t\t\t\t// move existing object to the ACTIVE region\n\n    \t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n    \t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n    \t\t\t\tobjects[ firstActiveIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n    \t\t\t\t\tif ( binding === undefined ) {\n\n    \t\t\t\t\t\t// since we do not bother to create new bindings\n    \t\t\t\t\t\t// for objects that are cached, the binding may\n    \t\t\t\t\t\t// or may not exist\n\n    \t\t\t\t\t\tbinding = new PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( objects[ index ] !== knownObject) {\n\n    \t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n    \t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n    \t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n    \t\t\t} // else the object is already where we want it to be\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \tremove: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n    \t\t\t\t// move existing object into the CACHED region\n\n    \t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n    \t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n    \t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = firstActiveObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n    \t\t\t\tobjects[ lastCachedIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = firstActive;\n    \t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// remove & forget\n    \tuncache: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined ) {\n\n    \t\t\t\tdelete indicesByUUID[ uuid ];\n\n    \t\t\t\tif ( index < nCachedObjects ) {\n\n    \t\t\t\t\t// object is cached, shrink the CACHED region\n\n    \t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n    \t\t\t\t\t\tlastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\t// last cached object takes this object's place\n    \t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\t\t// last object goes to the activated slot and pop\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n    \t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n    \t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// object is active, just swap with the last and pop\n\n    \t\t\t\t\tvar lastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} // cached or active\n\n    \t\t\t} // if object is known\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// Internal interface used by befriended PropertyBinding.Composite:\n\n    \tsubscribe_: function( path, parsedPath ) {\n    \t\t// returns an array of bindings for the given path that is changed\n    \t\t// according to the contained objects in the group\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ],\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( index !== undefined ) return bindings[ index ];\n\n    \t\tvar paths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tobjects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tbindingsForPath = new Array( nObjects );\n\n    \t\tindex = bindings.length;\n\n    \t\tindicesByPath[ path ] = index;\n\n    \t\tpaths.push( path );\n    \t\tparsedPaths.push( parsedPath );\n    \t\tbindings.push( bindingsForPath );\n\n    \t\tfor ( var i = nCachedObjects,\n    \t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = objects[ i ];\n\n    \t\t\tbindingsForPath[ i ] =\n    \t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\n    \t\t}\n\n    \t\treturn bindingsForPath;\n\n    \t},\n\n    \tunsubscribe_: function( path ) {\n    \t\t// tells the group to forget about a property path and no longer\n    \t\t// update the array previously obtained with 'subscribe_'\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ];\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar paths = this._paths,\n    \t\t\t\tparsedPaths = this._parsedPaths,\n    \t\t\t\tbindings = this._bindings,\n    \t\t\t\tlastBindingsIndex = bindings.length - 1,\n    \t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n    \t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n    \t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n    \t\t\tbindings[ index ] = lastBindings;\n    \t\t\tbindings.pop();\n\n    \t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n    \t\t\tparsedPaths.pop();\n\n    \t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n    \t\t\tpaths.pop();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Action provided by AnimationMixer for scheduling clip playback on specific\n     * objects.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     *\n     */\n\n    function AnimationAction( mixer, clip, localRoot ) {\n\n    \tthis._mixer = mixer;\n    \tthis._clip = clip;\n    \tthis._localRoot = localRoot || null;\n\n    \tvar tracks = clip.tracks,\n    \t\tnTracks = tracks.length,\n    \t\tinterpolants = new Array( nTracks );\n\n    \tvar interpolantSettings = {\n    \t\t\tendingStart: \tZeroCurvatureEnding,\n    \t\t\tendingEnd:\t\tZeroCurvatureEnding\n    \t};\n\n    \tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\tvar interpolant = tracks[ i ].createInterpolant( null );\n    \t\tinterpolants[ i ] = interpolant;\n    \t\tinterpolant.settings = interpolantSettings;\n\n    \t}\n\n    \tthis._interpolantSettings = interpolantSettings;\n\n    \tthis._interpolants = interpolants;\t// bound by the mixer\n\n    \t// inside: PropertyMixer (managed by the mixer)\n    \tthis._propertyBindings = new Array( nTracks );\n\n    \tthis._cacheIndex = null;\t\t\t// for the memory manager\n    \tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n    \tthis._timeScaleInterpolant = null;\n    \tthis._weightInterpolant = null;\n\n    \tthis.loop = LoopRepeat;\n    \tthis._loopCount = -1;\n\n    \t// global mixer time when the action is to be started\n    \t// it's set back to 'null' upon start of the action\n    \tthis._startTime = null;\n\n    \t// scaled local time of the action\n    \t// gets clamped or wrapped to 0..clip.duration according to loop\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1;\n    \tthis._effectiveTimeScale = 1;\n\n    \tthis.weight = 1;\n    \tthis._effectiveWeight = 1;\n\n    \tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n    \tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n    \tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n    \tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n    \tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n    \tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n    };\n\n    AnimationAction.prototype = {\n\n    \tconstructor: AnimationAction,\n\n    \t// State & Scheduling\n\n    \tplay: function() {\n\n    \t\tthis._mixer._activateAction( this );\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function() {\n\n    \t\tthis._mixer._deactivateAction( this );\n\n    \t\treturn this.reset();\n\n    \t},\n\n    \treset: function() {\n\n    \t\tthis.paused = false;\n    \t\tthis.enabled = true;\n\n    \t\tthis.time = 0;\t\t\t// restart clip\n    \t\tthis._loopCount = -1;\t// forget previous loops\n    \t\tthis._startTime = null;\t// forget scheduling\n\n    \t\treturn this.stopFading().stopWarping();\n\n    \t},\n\n    \tisRunning: function() {\n\n    \t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n    \t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n    \t},\n\n    \t// return true when play has been called\n    \tisScheduled: function() {\n\n    \t\treturn this._mixer._isActiveAction( this );\n\n    \t},\n\n    \tstartAt: function( time ) {\n\n    \t\tthis._startTime = time;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetLoop: function( mode, repetitions ) {\n\n    \t\tthis.loop = mode;\n    \t\tthis.repetitions = repetitions;\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Weight\n\n    \t// set the weight stopping any scheduled fading\n    \t// although .enabled = false yields an effective weight of zero, this\n    \t// method does *not* change .enabled, because it would be confusing\n    \tsetEffectiveWeight: function( weight ) {\n\n    \t\tthis.weight = weight;\n\n    \t\t// note: same logic as when updated at runtime\n    \t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n    \t\treturn this.stopFading();\n\n    \t},\n\n    \t// return the weight considering fading and .enabled\n    \tgetEffectiveWeight: function() {\n\n    \t\treturn this._effectiveWeight;\n\n    \t},\n\n    \tfadeIn: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 0, 1 );\n\n    \t},\n\n    \tfadeOut: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 1, 0 );\n\n    \t},\n\n    \tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n    \t\tfadeOutAction.fadeOut( duration );\n    \t\tthis.fadeIn( duration );\n\n    \t\tif( warp ) {\n\n    \t\t\tvar fadeInDuration = this._clip.duration,\n    \t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n    \t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n    \t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n    \t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n    \t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n    \t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n    \t},\n\n    \tstopFading: function() {\n\n    \t\tvar weightInterpolant = this._weightInterpolant;\n\n    \t\tif ( weightInterpolant !== null ) {\n\n    \t\t\tthis._weightInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Time Scale Control\n\n    \t// set the weight stopping any scheduled warping\n    \t// although .paused = true yields an effective time scale of zero, this\n    \t// method does *not* change .paused, because it would be confusing\n    \tsetEffectiveTimeScale: function( timeScale ) {\n\n    \t\tthis.timeScale = timeScale;\n    \t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \t// return the time scale considering warping and .paused\n    \tgetEffectiveTimeScale: function() {\n\n    \t\treturn this._effectiveTimeScale;\n\n    \t},\n\n    \tsetDuration: function( duration ) {\n\n    \t\tthis.timeScale = this._clip.duration / duration;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \tsyncWith: function( action ) {\n\n    \t\tthis.time = action.time;\n    \t\tthis.timeScale = action.timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \thalt: function( duration ) {\n\n    \t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n    \t},\n\n    \twarp: function( startTimeScale, endTimeScale, duration ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._timeScaleInterpolant,\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._timeScaleInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now;\n    \t\ttimes[ 1 ] = now + duration;\n\n    \t\tvalues[ 0 ] = startTimeScale / timeScale;\n    \t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstopWarping: function() {\n\n    \t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n    \t\tif ( timeScaleInterpolant !== null ) {\n\n    \t\t\tthis._timeScaleInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Object Accessors\n\n    \tgetMixer: function() {\n\n    \t\treturn this._mixer;\n\n    \t},\n\n    \tgetClip: function() {\n\n    \t\treturn this._clip;\n\n    \t},\n\n    \tgetRoot: function() {\n\n    \t\treturn this._localRoot || this._mixer._root;\n\n    \t},\n\n    \t// Interna\n\n    \t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n    \t\t// called by the mixer\n\n    \t\tvar startTime = this._startTime;\n\n    \t\tif ( startTime !== null ) {\n\n    \t\t\t// check for scheduled start of action\n\n    \t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n    \t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n    \t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n    \t\t\t}\n\n    \t\t\t// start\n\n    \t\t\tthis._startTime = null; // unschedule\n    \t\t\tdeltaTime = timeDirection * timeRunning;\n\n    \t\t}\n\n    \t\t// apply time scale and advance time\n\n    \t\tdeltaTime *= this._updateTimeScale( time );\n    \t\tvar clipTime = this._updateTime( deltaTime );\n\n    \t\t// note: _updateTime may disable the action resulting in\n    \t\t// an effective weight of 0\n\n    \t\tvar weight = this._updateWeight( time );\n\n    \t\tif ( weight > 0 ) {\n\n    \t\t\tvar interpolants = this._interpolants;\n    \t\t\tvar propertyMixers = this._propertyBindings;\n\n    \t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n    \t\t\t\tinterpolants[ j ].evaluate( clipTime );\n    \t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_updateWeight: function( time ) {\n\n    \t\tvar weight = 0;\n\n    \t\tif ( this.enabled ) {\n\n    \t\t\tweight = this.weight;\n    \t\t\tvar interpolant = this._weightInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\tweight *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopFading();\n\n    \t\t\t\t\tif ( interpolantValue === 0 ) {\n\n    \t\t\t\t\t\t// faded out, disable\n    \t\t\t\t\t\tthis.enabled = false;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveWeight = weight;\n    \t\treturn weight;\n\n    \t},\n\n    \t_updateTimeScale: function( time ) {\n\n    \t\tvar timeScale = 0;\n\n    \t\tif ( ! this.paused ) {\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\t\tvar interpolant = this._timeScaleInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\ttimeScale *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopWarping();\n\n    \t\t\t\t\tif ( timeScale === 0 ) {\n\n    \t\t\t\t\t\t// motion has halted, pause\n    \t\t\t\t\t\tthis.paused = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// warp done - apply final time scale\n    \t\t\t\t\t\tthis.timeScale = timeScale;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveTimeScale = timeScale;\n    \t\treturn timeScale;\n\n    \t},\n\n    \t_updateTime: function( deltaTime ) {\n\n    \t\tvar time = this.time + deltaTime;\n\n    \t\tif ( deltaTime === 0 ) return time;\n\n    \t\tvar duration = this._clip.duration,\n\n    \t\t\tloop = this.loop,\n    \t\t\tloopCount = this._loopCount;\n\n    \t\tif ( loop === LoopOnce ) {\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tthis.loopCount = 0;\n    \t\t\t\tthis._setEndings( true, true, false );\n\n    \t\t\t}\n\n    \t\t\thandle_stop: {\n\n    \t\t\t\tif ( time >= duration ) {\n\n    \t\t\t\t\ttime = duration;\n\n    \t\t\t\t} else if ( time < 0 ) {\n\n    \t\t\t\t\ttime = 0;\n\n    \t\t\t\t} else break handle_stop;\n\n    \t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\telse this.enabled = false;\n\n    \t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n    \t\t\t\t} );\n\n    \t\t\t}\n\n    \t\t} else { // repetitive Repeat or PingPong\n\n    \t\t\tvar pingPong = ( loop === LoopPingPong );\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tif ( deltaTime >= 0 ) {\n\n    \t\t\t\t\tloopCount = 0;\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// when looping in reverse direction, the initial\n    \t\t\t\t\t// transition through zero counts as a repetition,\n    \t\t\t\t\t// so leave loopCount at -1\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( time >= duration || time < 0 ) {\n    \t\t\t\t// wrap around\n\n    \t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n    \t\t\t\ttime -= duration * loopDelta;\n\n    \t\t\t\tloopCount += Math.abs( loopDelta );\n\n    \t\t\t\tvar pending = this.repetitions - loopCount;\n\n    \t\t\t\tif ( pending < 0 ) {\n    \t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n    \t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\t\telse this.enabled = false;\n\n    \t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n    \t\t\t\t\t} );\n\n    \t\t\t\t} else {\n    \t\t\t\t\t// keep running\n\n    \t\t\t\t\tif ( pending === 0 ) {\n    \t\t\t\t\t\t// entering the last round\n\n    \t\t\t\t\t\tvar atStart = deltaTime < 0;\n    \t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tthis._loopCount = loopCount;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n    \t\t\t\t// invert time for the \"pong round\"\n\n    \t\t\t\tthis.time = time;\n    \t\t\t\treturn duration - time;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.time = time;\n    \t\treturn time;\n\n    \t},\n\n    \t_setEndings: function( atStart, atEnd, pingPong ) {\n\n    \t\tvar settings = this._interpolantSettings;\n\n    \t\tif ( pingPong ) {\n\n    \t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n    \t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n    \t\t} else {\n\n    \t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n    \t\t\tif ( atStart ) {\n\n    \t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t\tif ( atEnd ) {\n\n    \t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._weightInterpolant;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._weightInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n    \t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Player for AnimationClips.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function AnimationMixer( root ) {\n\n    \tthis._root = root;\n    \tthis._initMemoryManager();\n    \tthis._accuIndex = 0;\n\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1.0;\n\n    }\n\n    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\n    \t// return an action for a clip optionally using a custom root target\n    \t// object (this method allocates a lot of dynamic memory in case a\n    \t// previously unknown clip/root combination is specified)\n    \tclipAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n    \t\t\tprototypeAction = null;\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\tvar existingAction =\n    \t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n    \t\t\tif ( existingAction !== undefined ) {\n\n    \t\t\t\treturn existingAction;\n\n    \t\t\t}\n\n    \t\t\t// we know the clip, so we don't have to parse all\n    \t\t\t// the bindings again but can just copy\n    \t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n    \t\t\t// also, take the clip from the prototype action\n    \t\t\tif ( clipObject === null )\n    \t\t\t\tclipObject = prototypeAction._clip;\n\n    \t\t}\n\n    \t\t// clip must be known when specified via string\n    \t\tif ( clipObject === null ) return null;\n\n    \t\t// allocate all resources required to run it\n    \t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n    \t\tthis._bindAction( newAction, prototypeAction );\n\n    \t\t// and make the action known to the memory manager\n    \t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n    \t\treturn newAction;\n\n    \t},\n\n    \t// get an existing action\n    \texistingAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \t// deactivates all previously scheduled actions\n    \tstopAllAction: function() {\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tthis._nActiveActions = 0;\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tactions[ i ].reset();\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].useCount = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// advance the time and update apply the animation\n    \tupdate: function( deltaTime ) {\n\n    \t\tdeltaTime *= this.timeScale;\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n\n    \t\t\ttime = this.time += deltaTime,\n    \t\t\ttimeDirection = Math.sign( deltaTime ),\n\n    \t\t\taccuIndex = this._accuIndex ^= 1;\n\n    \t\t// run active actions\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tvar action = actions[ i ];\n\n    \t\t\tif ( action.enabled ) {\n\n    \t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// update scene graph\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].apply( accuIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// return this mixer's root target object\n    \tgetRoot: function() {\n\n    \t\treturn this._root;\n\n    \t},\n\n    \t// free all resources specific to a particular clip\n    \tuncacheClip: function( clip ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tclipUuid = clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\t// note: just calling _removeInactiveAction would mess up the\n    \t\t\t// iteration state and also require updating the state we can\n    \t\t\t// just throw away\n\n    \t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n    \t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar action = actionsToRemove[ i ];\n\n    \t\t\t\tthis._deactivateAction( action );\n\n    \t\t\t\tvar cacheIndex = action._cacheIndex,\n    \t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n    \t\t\t\taction._cacheIndex = null;\n    \t\t\t\taction._byClipCacheIndex = null;\n\n    \t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\t\t\tactions.pop();\n\n    \t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n    \t\t\t}\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t// free all resources specific to a particular root target object\n    \tuncacheRoot: function( root ) {\n\n    \t\tvar rootUuid = root.uuid,\n    \t\t\tactionsByClip = this._actionsByClip;\n\n    \t\tfor ( var clipUuid in actionsByClip ) {\n\n    \t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n    \t\t\t\taction = actionByRoot[ rootUuid ];\n\n    \t\t\tif ( action !== undefined ) {\n\n    \t\t\t\tthis._deactivateAction( action );\n    \t\t\t\tthis._removeInactiveAction( action );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingByName !== undefined ) {\n\n    \t\t\tfor ( var trackName in bindingByName ) {\n\n    \t\t\t\tvar binding = bindingByName[ trackName ];\n    \t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remove a targeted clip from the cache\n    \tuncacheAction: function( clip, optionalRoot ) {\n\n    \t\tvar action = this.existingAction( clip, optionalRoot );\n\n    \t\tif ( action !== null ) {\n\n    \t\t\tthis._deactivateAction( action );\n    \t\t\tthis._removeInactiveAction( action );\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    // Implementation details:\n\n    Object.assign( AnimationMixer.prototype, {\n\n    \t_bindAction: function( action, prototypeAction ) {\n\n    \t\tvar root = action._localRoot || this._root,\n    \t\t\ttracks = action._clip.tracks,\n    \t\t\tnTracks = tracks.length,\n    \t\t\tbindings = action._propertyBindings,\n    \t\t\tinterpolants = action._interpolants,\n    \t\t\trootUuid = root.uuid,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingsByName === undefined ) {\n\n    \t\t\tbindingsByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\t\tvar track = tracks[ i ],\n    \t\t\t\ttrackName = track.name,\n    \t\t\t\tbinding = bindingsByName[ trackName ];\n\n    \t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t} else {\n\n    \t\t\t\tbinding = bindings[ i ];\n\n    \t\t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\t\t// existing binding, make sure the cache knows\n\n    \t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n    \t\t\t\t\t\t++ binding.referenceCount;\n    \t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar path = prototypeAction && prototypeAction.\n    \t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n    \t\t\t\tbinding = new PropertyMixer(\n    \t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n    \t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n    \t\t\t\t++ binding.referenceCount;\n    \t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t}\n\n    \t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n    \t\t}\n\n    \t},\n\n    \t_activateAction: function( action ) {\n\n    \t\tif ( ! this._isActiveAction( action ) ) {\n\n    \t\t\tif ( action._cacheIndex === null ) {\n\n    \t\t\t\t// this action has been forgotten by the cache, but the user\n    \t\t\t\t// appears to be still using it -> rebind\n\n    \t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n    \t\t\t\t\tclipUuid = action._clip.uuid,\n    \t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\t\t\tthis._bindAction( action,\n    \t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n    \t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n    \t\t\t}\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// increment reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n    \t\t\t\t\tthis._lendBinding( binding );\n    \t\t\t\t\tbinding.saveOriginalState();\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._lendAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t_deactivateAction: function( action ) {\n\n    \t\tif ( this._isActiveAction( action ) ) {\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// decrement reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( -- binding.useCount === 0 ) {\n\n    \t\t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\t\tthis._takeBackBinding( binding );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._takeBackAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t// Memory manager\n\n    \t_initMemoryManager: function() {\n\n    \t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n    \t\tthis._nActiveActions = 0;\n\n    \t\tthis._actionsByClip = {};\n    \t\t// inside:\n    \t\t// {\n    \t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n    \t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n    \t\t// }\n\n\n    \t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n    \t\tthis._controlInterpolants = []; // same game as above\n    \t\tthis._nActiveControlInterpolants = 0;\n\n    \t\tvar scope = this;\n\n    \t\tthis.stats = {\n\n    \t\t\tactions: {\n    \t\t\t\tget total() { return scope._actions.length; },\n    \t\t\t\tget inUse() { return scope._nActiveActions; }\n    \t\t\t},\n    \t\t\tbindings: {\n    \t\t\t\tget total() { return scope._bindings.length; },\n    \t\t\t\tget inUse() { return scope._nActiveBindings; }\n    \t\t\t},\n    \t\t\tcontrolInterpolants: {\n    \t\t\t\tget total() { return scope._controlInterpolants.length; },\n    \t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n    \t\t\t}\n\n    \t\t};\n\n    \t},\n\n    \t// Memory management for AnimationAction objects\n\n    \t_isActiveAction: function( action ) {\n\n    \t\tvar index = action._cacheIndex;\n    \t\treturn index !== null && index < this._nActiveActions;\n\n    \t},\n\n    \t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip === undefined ) {\n\n    \t\t\tactionsForClip = {\n\n    \t\t\t\tknownActions: [ action ],\n    \t\t\t\tactionByRoot: {}\n\n    \t\t\t};\n\n    \t\t\taction._byClipCacheIndex = 0;\n\n    \t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n    \t\t} else {\n\n    \t\t\tvar knownActions = actionsForClip.knownActions;\n\n    \t\t\taction._byClipCacheIndex = knownActions.length;\n    \t\t\tknownActions.push( action );\n\n    \t\t}\n\n    \t\taction._cacheIndex = actions.length;\n    \t\tactions.push( action );\n\n    \t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n    \t},\n\n    \t_removeInactiveAction: function( action ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n    \t\t\tcacheIndex = action._cacheIndex;\n\n    \t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\tactions.pop();\n\n    \t\taction._cacheIndex = null;\n\n\n    \t\tvar clipUuid = action._clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ],\n    \t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n    \t\t\tlastKnownAction =\n    \t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n    \t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n    \t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n    \t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n    \t\tknownActionsForClip.pop();\n\n    \t\taction._byClipCacheIndex = null;\n\n\n    \t\tvar actionByRoot = actionsForClip.actionByRoot,\n    \t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n    \t\tdelete actionByRoot[ rootUuid ];\n\n    \t\tif ( knownActionsForClip.length === 0 ) {\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t\tthis._removeInactiveBindingsForAction( action );\n\n    \t},\n\n    \t_removeInactiveBindingsForAction: function( action ) {\n\n    \t\tvar bindings = action._propertyBindings;\n    \t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tvar binding = bindings[ i ];\n\n    \t\t\tif ( -- binding.referenceCount === 0 ) {\n\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_lendAction: function( action ) {\n\n    \t\t// [ active actions |  inactive actions  ]\n    \t\t// [  active actions >| inactive actions ]\n    \t\t//                 s        a\n    \t\t//                  <-swap->\n    \t\t//                 a        s\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveActions ++,\n\n    \t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n    \t\taction._cacheIndex = lastActiveIndex;\n    \t\tactions[ lastActiveIndex ] = action;\n\n    \t\tfirstInactiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = firstInactiveAction;\n\n    \t},\n\n    \t_takeBackAction: function( action ) {\n\n    \t\t// [  active actions  | inactive actions ]\n    \t\t// [ active actions |< inactive actions  ]\n    \t\t//        a        s\n    \t\t//         <-swap->\n    \t\t//        s        a\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n    \t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n    \t\taction._cacheIndex = firstInactiveIndex;\n    \t\tactions[ firstInactiveIndex ] = action;\n\n    \t\tlastActiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = lastActiveAction;\n\n    \t},\n\n    \t// Memory management for PropertyMixer objects\n\n    \t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( bindingByName === undefined ) {\n\n    \t\t\tbindingByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n    \t\t}\n\n    \t\tbindingByName[ trackName ] = binding;\n\n    \t\tbinding._cacheIndex = bindings.length;\n    \t\tbindings.push( binding );\n\n    \t},\n\n    \t_removeInactiveBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tpropBinding = binding.binding,\n    \t\t\trootUuid = propBinding.rootNode.uuid,\n    \t\t\ttrackName = propBinding.path,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n    \t\t\tcacheIndex = binding._cacheIndex;\n\n    \t\tlastInactiveBinding._cacheIndex = cacheIndex;\n    \t\tbindings[ cacheIndex ] = lastInactiveBinding;\n    \t\tbindings.pop();\n\n    \t\tdelete bindingByName[ trackName ];\n\n    \t\tremove_empty_map: {\n\n    \t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n    \t\t\tdelete bindingsByRoot[ rootUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t_lendBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n    \t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n    \t\tbinding._cacheIndex = lastActiveIndex;\n    \t\tbindings[ lastActiveIndex ] = binding;\n\n    \t\tfirstInactiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n    \t},\n\n    \t_takeBackBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n    \t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n    \t\tbinding._cacheIndex = firstInactiveIndex;\n    \t\tbindings[ firstInactiveIndex ] = binding;\n\n    \t\tlastActiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = lastActiveBinding;\n\n    \t},\n\n\n    \t// Memory management of Interpolants for weight and time scale\n\n    \t_lendControlInterpolant: function() {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n    \t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n    \t\tif ( interpolant === undefined ) {\n\n    \t\t\tinterpolant = new LinearInterpolant(\n    \t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n    \t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n    \t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n    \t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n    \t\t}\n\n    \t\treturn interpolant;\n\n    \t},\n\n    \t_takeBackControlInterpolant: function( interpolant ) {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tprevIndex = interpolant.__cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n    \t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n    \t\tinterpolant.__cacheIndex = firstInactiveIndex;\n    \t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n    \t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n    \t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n    \t},\n\n    \t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Uniform( value ) {\n\n    \tif ( typeof value === 'string' ) {\n\n    \t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n    \t\tvalue = arguments[ 1 ];\n\n    \t}\n\n    \tthis.value = value;\n\n    \tthis.dynamic = false;\n\n    }\n\n    Uniform.prototype = {\n\n    \tconstructor: Uniform,\n\n    \tonUpdate: function ( callback ) {\n\n    \t\tthis.dynamic = true;\n    \t\tthis.onUpdateCallback = callback;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferGeometry() {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'InstancedBufferGeometry';\n    \tthis.maxInstancedCount = undefined;\n\n    }\n\n    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\n    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n    \tthis.groups.push( {\n\n    \t\tstart: start,\n    \t\tcount: count,\n    \t\tinstances: instances\n\n    \t} );\n\n    };\n\n    InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n    \tvar index = source.index;\n\n    \tif ( index !== null ) {\n\n    \t\tthis.setIndex( index.clone() );\n\n    \t}\n\n    \tvar attributes = source.attributes;\n\n    \tfor ( var name in attributes ) {\n\n    \t\tvar attribute = attributes[ name ];\n    \t\tthis.addAttribute( name, attribute.clone() );\n\n    \t}\n\n    \tvar groups = source.groups;\n\n    \tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\tvar group = groups[ i ];\n    \t\tthis.addGroup( group.start, group.count, group.instances );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.data = interleavedBuffer;\n    \tthis.itemSize = itemSize;\n    \tthis.offset = offset;\n\n    \tthis.normalized = normalized === true;\n\n    }\n\n\n    InterleavedBufferAttribute.prototype = {\n\n    \tconstructor: InterleavedBufferAttribute,\n\n    \tisInterleavedBufferAttribute: true,\n\n    \tget count() {\n\n    \t\treturn this.data.count;\n\n    \t},\n\n    \tget array() {\n\n    \t\treturn this.data.array;\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n    \t\tthis.data.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBuffer( array, stride ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.stride = stride;\n    \tthis.count = array !== undefined ? array.length / stride : 0;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    InterleavedBuffer.prototype = {\n\n    \tconstructor: InterleavedBuffer,\n\n    \tisInterleavedBuffer: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.count = source.count;\n    \t\tthis.stride = source.stride;\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.stride;\n    \t\tindex2 *= attribute.stride;\n\n    \t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n    \tInterleavedBuffer.call( this, array, stride );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\n    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n    InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n    \tInterleavedBuffer.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n    \tBufferAttribute.call( this, array, itemSize );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\n    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n    InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n    \tBufferAttribute.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author bhouston / http://clara.io/\n     * @author stephomi / http://stephaneginier.com/\n     */\n\n    function Raycaster( origin, direction, near, far ) {\n\n    \tthis.ray = new Ray( origin, direction );\n    \t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \tthis.near = near || 0;\n    \tthis.far = far || Infinity;\n\n    \tthis.params = {\n    \t\tMesh: {},\n    \t\tLine: {},\n    \t\tLOD: {},\n    \t\tPoints: { threshold: 1 },\n    \t\tSprite: {}\n    \t};\n\n    \tObject.defineProperties( this.params, {\n    \t\tPointCloud: {\n    \t\t\tget: function () {\n    \t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n    \t\t\t\treturn this.Points;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    function ascSort( a, b ) {\n\n    \treturn a.distance - b.distance;\n\n    }\n\n    function intersectObject( object, raycaster, intersects, recursive ) {\n\n    \tif ( object.visible === false ) return;\n\n    \tobject.raycast( raycaster, intersects );\n\n    \tif ( recursive === true ) {\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    //\n\n    Raycaster.prototype = {\n\n    \tconstructor: Raycaster,\n\n    \tlinePrecision: 1,\n\n    \tset: function ( origin, direction ) {\n\n    \t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \t\tthis.ray.set( origin, direction );\n\n    \t},\n\n    \tsetFromCamera: function ( coords, camera ) {\n\n    \t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\n    \t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n    \t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\n    \t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n    \t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n    \t\t}\n\n    \t},\n\n    \tintersectObject: function ( object, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tintersectObject( object, this, intersects, recursive );\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t},\n\n    \tintersectObjects: function ( objects, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tif ( Array.isArray( objects ) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n    \t\t\treturn intersects;\n\n    \t\t}\n\n    \t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n    \t\t}\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Clock( autoStart ) {\n\n    \tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n    \tthis.startTime = 0;\n    \tthis.oldTime = 0;\n    \tthis.elapsedTime = 0;\n\n    \tthis.running = false;\n\n    }\n\n    Clock.prototype = {\n\n    \tconstructor: Clock,\n\n    \tstart: function () {\n\n    \t\tthis.startTime = ( performance || Date ).now();\n\n    \t\tthis.oldTime = this.startTime;\n    \t\tthis.running = true;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tthis.getElapsedTime();\n    \t\tthis.running = false;\n\n    \t},\n\n    \tgetElapsedTime: function () {\n\n    \t\tthis.getDelta();\n    \t\treturn this.elapsedTime;\n\n    \t},\n\n    \tgetDelta: function () {\n\n    \t\tvar diff = 0;\n\n    \t\tif ( this.autoStart && ! this.running ) {\n\n    \t\t\tthis.start();\n\n    \t\t}\n\n    \t\tif ( this.running ) {\n\n    \t\t\tvar newTime = ( performance || Date ).now();\n\n    \t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n    \t\t\tthis.oldTime = newTime;\n\n    \t\t\tthis.elapsedTime += diff;\n\n    \t\t}\n\n    \t\treturn diff;\n\n    \t}\n\n    };\n\n    /**\n     * Spline from Tween.js, slightly optimized (and trashed)\n     * http://sole.github.com/tween.js/examples/05_spline.html\n     *\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Spline( points ) {\n\n    \tthis.points = points;\n\n    \tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n    \tpoint, intPoint, weight, w2, w3,\n    \tpa, pb, pc, pd;\n\n    \tthis.initFromArray = function ( a ) {\n\n    \t\tthis.points = [];\n\n    \t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n    \t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n    \t\t}\n\n    \t};\n\n    \tthis.getPoint = function ( k ) {\n\n    \t\tpoint = ( this.points.length - 1 ) * k;\n    \t\tintPoint = Math.floor( point );\n    \t\tweight = point - intPoint;\n\n    \t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n    \t\tc[ 1 ] = intPoint;\n    \t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n    \t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n    \t\tpa = this.points[ c[ 0 ] ];\n    \t\tpb = this.points[ c[ 1 ] ];\n    \t\tpc = this.points[ c[ 2 ] ];\n    \t\tpd = this.points[ c[ 3 ] ];\n\n    \t\tw2 = weight * weight;\n    \t\tw3 = weight * w2;\n\n    \t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n    \t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n    \t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n    \t\treturn v3;\n\n    \t};\n\n    \tthis.getControlPointsArray = function () {\n\n    \t\tvar i, p, l = this.points.length,\n    \t\t\tcoords = [];\n\n    \t\tfor ( i = 0; i < l; i ++ ) {\n\n    \t\t\tp = this.points[ i ];\n    \t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n    \t\t}\n\n    \t\treturn coords;\n\n    \t};\n\n    \t// approximate length by summing linear segments\n\n    \tthis.getLength = function ( nSubDivisions ) {\n\n    \t\tvar i, index, nSamples, position,\n    \t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n    \t\t\toldPosition = new Vector3(),\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tchunkLengths = [],\n    \t\t\ttotalLength = 0;\n\n    \t\t// first point has 0 length\n\n    \t\tchunkLengths[ 0 ] = 0;\n\n    \t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n    \t\tnSamples = this.points.length * nSubDivisions;\n\n    \t\toldPosition.copy( this.points[ 0 ] );\n\n    \t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n    \t\t\tindex = i / nSamples;\n\n    \t\t\tposition = this.getPoint( index );\n    \t\t\ttmpVec.copy( position );\n\n    \t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n    \t\t\toldPosition.copy( position );\n\n    \t\t\tpoint = ( this.points.length - 1 ) * index;\n    \t\t\tintPoint = Math.floor( point );\n\n    \t\t\tif ( intPoint !== oldIntPoint ) {\n\n    \t\t\t\tchunkLengths[ intPoint ] = totalLength;\n    \t\t\t\toldIntPoint = intPoint;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// last point ends with total length\n\n    \t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n    \t\treturn { chunks: chunkLengths, total: totalLength };\n\n    \t};\n\n    \tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n    \t\tvar i, j,\n    \t\t\tindex, indexCurrent, indexNext,\n    \t\t\trealDistance,\n    \t\t\tsampling, position,\n    \t\t\tnewpoints = [],\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tsl = this.getLength();\n\n    \t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n    \t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n    \t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n    \t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n    \t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n    \t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n    \t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n    \t\t\tindexNext = i / ( this.points.length - 1 );\n\n    \t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n    \t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n    \t\t\t\tposition = this.getPoint( index );\n    \t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n    \t\t\t}\n\n    \t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n    \t\t}\n\n    \t\tthis.points = newpoints;\n\n    \t};\n\n    \t// Catmull-Rom\n\n    \tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5,\n    \t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n    \t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n     *\n     * The poles (phi) are at the positive and negative y axis.\n     * The equator starts at positive z.\n     */\n\n    function Spherical( radius, phi, theta ) {\n\n    \tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n    \tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n    \tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n    \treturn this;\n\n    }\n\n    Spherical.prototype = {\n\n    \tconstructor: Spherical,\n\n    \tset: function ( radius, phi, theta ) {\n\n    \t\tthis.radius = radius;\n    \t\tthis.phi = phi;\n    \t\tthis.theta = theta;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( other ) {\n\n    \t\tthis.radius.copy( other.radius );\n    \t\tthis.phi.copy( other.phi );\n    \t\tthis.theta.copy( other.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \t// restrict phi to be betwee EPS and PI-EPS\n    \tmakeSafe: function() {\n\n    \t\tvar EPS = 0.000001;\n    \t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromVector3: function( vec3 ) {\n\n    \t\tthis.radius = vec3.length();\n\n    \t\tif ( this.radius === 0 ) {\n\n    \t\t\tthis.theta = 0;\n    \t\t\tthis.phi = 0;\n\n    \t\t} else {\n\n    \t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n    \t\t\tthis.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    };\n\n    /**\r\n     * @author alteredq / http://alteredqualia.com/\r\n     */\r\n\r\n    function MorphBlendMesh( geometry, material ) {\n\r\n    \tMesh.call( this, geometry, material );\r\n\r\n    \tthis.animationsMap = {};\r\n    \tthis.animationsList = [];\r\n\r\n    \t// prepare default animation\r\n    \t// (all frames played together in 1 second)\r\n\r\n    \tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n    \tvar name = \"__default\";\r\n\r\n    \tvar startFrame = 0;\r\n    \tvar endFrame = numFrames - 1;\r\n\r\n    \tvar fps = numFrames / 1;\r\n\r\n    \tthis.createAnimation( name, startFrame, endFrame, fps );\r\n    \tthis.setAnimationWeight( name, 1 );\r\n\r\n    }\r\n\r\n    MorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n    MorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\r\n    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n    \tvar animation = {\r\n\r\n    \t\tstart: start,\r\n    \t\tend: end,\r\n\r\n    \t\tlength: end - start + 1,\r\n\r\n    \t\tfps: fps,\r\n    \t\tduration: ( end - start ) / fps,\r\n\r\n    \t\tlastFrame: 0,\r\n    \t\tcurrentFrame: 0,\r\n\r\n    \t\tactive: false,\r\n\r\n    \t\ttime: 0,\r\n    \t\tdirection: 1,\r\n    \t\tweight: 1,\r\n\r\n    \t\tdirectionBackwards: false,\r\n    \t\tmirroredLoop: false\r\n\r\n    \t};\r\n\r\n    \tthis.animationsMap[ name ] = animation;\r\n    \tthis.animationsList.push( animation );\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n    \tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n    \tvar firstAnimation, frameRanges = {};\r\n\r\n    \tvar geometry = this.geometry;\r\n\r\n    \tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n    \t\tvar morph = geometry.morphTargets[ i ];\r\n    \t\tvar chunks = morph.name.match( pattern );\r\n\r\n    \t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n    \t\t\tvar name = chunks[ 1 ];\r\n\r\n    \t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n    \t\t\tvar range = frameRanges[ name ];\r\n\r\n    \t\t\tif ( i < range.start ) range.start = i;\r\n    \t\t\tif ( i > range.end ) range.end = i;\r\n\r\n    \t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    \tfor ( var name in frameRanges ) {\r\n\r\n    \t\tvar range = frameRanges[ name ];\r\n    \t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n    \t}\r\n\r\n    \tthis.firstAnimation = firstAnimation;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = 1;\r\n    \t\tanimation.directionBackwards = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = - 1;\r\n    \t\tanimation.directionBackwards = true;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.fps = fps;\r\n    \t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.duration = duration;\r\n    \t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.weight = weight;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = time;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n    \tvar time = 0;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\ttime = animation.time;\r\n\r\n    \t}\r\n\r\n    \treturn time;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n    \tvar duration = - 1;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tduration = animation.duration;\r\n\r\n    \t}\r\n\r\n    \treturn duration;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = 0;\r\n    \t\tanimation.active = true;\r\n\r\n    \t} else {\r\n\r\n    \t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.active = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n    \tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n    \t\tvar animation = this.animationsList[ i ];\r\n\r\n    \t\tif ( ! animation.active ) continue;\r\n\r\n    \t\tvar frameTime = animation.duration / animation.length;\r\n\r\n    \t\tanimation.time += animation.direction * delta;\r\n\r\n    \t\tif ( animation.mirroredLoop ) {\r\n\r\n    \t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n    \t\t\t\tanimation.direction *= - 1;\r\n\r\n    \t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n    \t\t\t\t\tanimation.time = animation.duration;\r\n    \t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t\tif ( animation.time < 0 ) {\r\n\r\n    \t\t\t\t\tanimation.time = 0;\r\n    \t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t}\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n    \t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n    \t\tvar weight = animation.weight;\r\n\r\n    \t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n    \t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n    \t\t\tanimation.lastFrame = animation.currentFrame;\r\n    \t\t\tanimation.currentFrame = keyframe;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n    \t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n    \t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function ImmediateRenderObject( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.material = material;\n    \tthis.render = function ( renderCallback ) {};\n\n    }\n\n    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n    ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function VertexNormalsHelper( object, size, hex, linewidth ) {\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length * 3;\n\n    \t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\tnNormals = objGeometry.attributes.normal.count;\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n    VertexNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tvar keys = [ 'a', 'b', 'c' ];\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\t\tvar vertices = objGeometry.vertices;\n\n    \t\t\tvar faces = objGeometry.faces;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\tvar face = faces[ i ];\n\n    \t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n    \t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n    \t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\t\tvar objPos = objGeometry.attributes.position;\n\n    \t\t\tvar objNorm = objGeometry.attributes.normal;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n    \t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n    \t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n    \t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n    \t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function SpotLightHelper( light ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = [\n    \t\t0, 0, 0,   0,   0,   1,\n    \t\t0, 0, 0,   1,   0,   1,\n    \t\t0, 0, 0, - 1,   0,   1,\n    \t\t0, 0, 0,   0,   1,   1,\n    \t\t0, 0, 0,   0, - 1,   1\n    \t];\n\n    \tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n    \t\tvar p1 = ( i / l ) * Math.PI * 2;\n    \t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n    \t\tpositions.push(\n    \t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n    \t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n    \t\t);\n\n    \t}\n\n    \tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.cone = new LineSegments( geometry, material );\n    \tthis.add( this.cone );\n\n    \tthis.update();\n\n    }\n\n    SpotLightHelper.prototype = Object.create( Object3D.prototype );\n    SpotLightHelper.prototype.constructor = SpotLightHelper;\n\n    SpotLightHelper.prototype.dispose = function () {\n\n    \tthis.cone.geometry.dispose();\n    \tthis.cone.material.dispose();\n\n    };\n\n    SpotLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n    \tvar vector2 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n    \t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n    \t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n    \t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n    \t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n    \t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t};\n\n    }();\n\n    /**\n     * @author Sean Griffin / http://twitter.com/sgrif\n     * @author Michael Guerrero / http://realitymeltdown.com\n     * @author mrdoob / http://mrdoob.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkeletonHelper( object ) {\n\n    \tthis.bones = this.getBoneList( object );\n\n    \tvar geometry = new Geometry();\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n    \t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.dynamic = true;\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.root = object;\n\n    \tthis.matrix = object.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n\n    SkeletonHelper.prototype = Object.create( LineSegments.prototype );\n    SkeletonHelper.prototype.constructor = SkeletonHelper;\n\n    SkeletonHelper.prototype.getBoneList = function( object ) {\n\n    \tvar boneList = [];\n\n    \tif ( (object && object.isBone) ) {\n\n    \t\tboneList.push( object );\n\n    \t}\n\n    \tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n    \t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n    \t}\n\n    \treturn boneList;\n\n    };\n\n    SkeletonHelper.prototype.update = function () {\n\n    \tvar geometry = this.geometry;\n\n    \tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\n    \tvar boneMatrix = new Matrix4();\n\n    \tvar j = 0;\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n    \t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n    \t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tj += 2;\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.verticesNeedUpdate = true;\n\n    \tgeometry.computeBoundingSphere();\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function PointLightHelper( light, sphereSize ) {\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n    \tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n    \tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.matrix = this.light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \t/*\n    \tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    \tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    \tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n    \tvar d = light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n\n    \tthis.add( this.lightDistance );\n    \t*/\n\n    }\n\n    PointLightHelper.prototype = Object.create( Mesh.prototype );\n    PointLightHelper.prototype.constructor = PointLightHelper;\n\n    PointLightHelper.prototype.dispose = function () {\n\n    \tthis.geometry.dispose();\n    \tthis.material.dispose();\n\n    };\n\n    PointLightHelper.prototype.update = function () {\n\n    \tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t/*\n    \tvar d = this.light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.visible = true;\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n    \t*/\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function HemisphereLightHelper( light, sphereSize ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.colors = [ new Color(), new Color() ];\n\n    \tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n    \tgeometry.rotateX( - Math.PI / 2 );\n\n    \tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n    \t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n    \t}\n\n    \tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\n    \tthis.lightSphere = new Mesh( geometry, material );\n    \tthis.add( this.lightSphere );\n\n    \tthis.update();\n\n    }\n\n    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n    HemisphereLightHelper.prototype.dispose = function () {\n\n    \tthis.lightSphere.geometry.dispose();\n    \tthis.lightSphere.material.dispose();\n\n    };\n\n    HemisphereLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n\n    \treturn function update() {\n\n    \t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n    \t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n    \t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n    \t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function GridHelper( size, divisions, color1, color2 ) {\n\n    \tdivisions = divisions || 1;\n    \tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n    \tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n    \tvar center = divisions / 2;\n    \tvar step = ( size * 2 ) / divisions;\n    \tvar vertices = [], colors = [];\n\n    \tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\n    \t\tvertices.push( - size, 0, k, size, 0, k );\n    \t\tvertices.push( k, 0, - size, k, 0, size );\n\n    \t\tvar color = i === center ? color1 : color2;\n\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n\n    \t}\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    GridHelper.prototype = Object.create( LineSegments.prototype );\n    GridHelper.prototype.constructor = GridHelper;\n\n    GridHelper.prototype.setColors = function () {\n\n    \tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function FaceNormalsHelper( object, size, hex, linewidth ) {\n\n    \t// FaceNormalsHelper only supports THREE.Geometry\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length;\n\n    \t} else {\n\n    \t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n    \tthis.update();\n\n    }\n\n    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n    FaceNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tvar vertices = objGeometry.vertices;\n\n    \t\tvar faces = objGeometry.faces;\n\n    \t\tvar idx = 0;\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tvar normal = face.normal;\n\n    \t\t\tv1.copy( vertices[ face.a ] )\n    \t\t\t\t.add( vertices[ face.b ] )\n    \t\t\t\t.add( vertices[ face.c ] )\n    \t\t\t\t.divideScalar( 3 )\n    \t\t\t\t.applyMatrix4( matrixWorld );\n\n    \t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function DirectionalLightHelper( light, size ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tif ( size === undefined ) size = 1;\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [\n    \t\t- size,   size, 0,\n    \t\t  size,   size, 0,\n    \t\t  size, - size, 0,\n    \t\t- size, - size, 0,\n    \t\t- size,   size, 0\n    \t], 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.add( new Line( geometry, material ) );\n\n    \tgeometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n    \tthis.add( new Line( geometry, material ));\n\n    \tthis.update();\n\n    }\n\n    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n    DirectionalLightHelper.prototype.dispose = function () {\n\n    \tvar lightPlane = this.children[ 0 ];\n    \tvar targetLine = this.children[ 1 ];\n\n    \tlightPlane.geometry.dispose();\n    \tlightPlane.material.dispose();\n    \ttargetLine.geometry.dispose();\n    \ttargetLine.material.dispose();\n\n    };\n\n    DirectionalLightHelper.prototype.update = function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar v3 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n    \t\tv3.subVectors( v2, v1 );\n\n    \t\tvar lightPlane = this.children[ 0 ];\n    \t\tvar targetLine = this.children[ 1 ];\n\n    \t\tlightPlane.lookAt( v3 );\n    \t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t\ttargetLine.lookAt( v3 );\n    \t\ttargetLine.scale.z = v3.length();\n\n    \t};\n\n    }();\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     *\t- shows frustum, line of sight and up of the camera\n     *\t- suitable for fast updates\n     * \t- based on frustum visualization in lightgl.js shadowmap example\n     *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n     */\n\n    function CameraHelper( camera ) {\n\n    \tvar geometry = new Geometry();\n    \tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n    \tvar pointMap = {};\n\n    \t// colors\n\n    \tvar hexFrustum = 0xffaa00;\n    \tvar hexCone = 0xff0000;\n    \tvar hexUp = 0x00aaff;\n    \tvar hexTarget = 0xffffff;\n    \tvar hexCross = 0x333333;\n\n    \t// near\n\n    \taddLine( \"n1\", \"n2\", hexFrustum );\n    \taddLine( \"n2\", \"n4\", hexFrustum );\n    \taddLine( \"n4\", \"n3\", hexFrustum );\n    \taddLine( \"n3\", \"n1\", hexFrustum );\n\n    \t// far\n\n    \taddLine( \"f1\", \"f2\", hexFrustum );\n    \taddLine( \"f2\", \"f4\", hexFrustum );\n    \taddLine( \"f4\", \"f3\", hexFrustum );\n    \taddLine( \"f3\", \"f1\", hexFrustum );\n\n    \t// sides\n\n    \taddLine( \"n1\", \"f1\", hexFrustum );\n    \taddLine( \"n2\", \"f2\", hexFrustum );\n    \taddLine( \"n3\", \"f3\", hexFrustum );\n    \taddLine( \"n4\", \"f4\", hexFrustum );\n\n    \t// cone\n\n    \taddLine( \"p\", \"n1\", hexCone );\n    \taddLine( \"p\", \"n2\", hexCone );\n    \taddLine( \"p\", \"n3\", hexCone );\n    \taddLine( \"p\", \"n4\", hexCone );\n\n    \t// up\n\n    \taddLine( \"u1\", \"u2\", hexUp );\n    \taddLine( \"u2\", \"u3\", hexUp );\n    \taddLine( \"u3\", \"u1\", hexUp );\n\n    \t// target\n\n    \taddLine( \"c\", \"t\", hexTarget );\n    \taddLine( \"p\", \"c\", hexCross );\n\n    \t// cross\n\n    \taddLine( \"cn1\", \"cn2\", hexCross );\n    \taddLine( \"cn3\", \"cn4\", hexCross );\n\n    \taddLine( \"cf1\", \"cf2\", hexCross );\n    \taddLine( \"cf3\", \"cf4\", hexCross );\n\n    \tfunction addLine( a, b, hex ) {\n\n    \t\taddPoint( a, hex );\n    \t\taddPoint( b, hex );\n\n    \t}\n\n    \tfunction addPoint( id, hex ) {\n\n    \t\tgeometry.vertices.push( new Vector3() );\n    \t\tgeometry.colors.push( new Color( hex ) );\n\n    \t\tif ( pointMap[ id ] === undefined ) {\n\n    \t\t\tpointMap[ id ] = [];\n\n    \t\t}\n\n    \t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n    \t}\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.camera = camera;\n    \tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n    \tthis.matrix = camera.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.pointMap = pointMap;\n\n    \tthis.update();\n\n    }\n\n    CameraHelper.prototype = Object.create( LineSegments.prototype );\n    CameraHelper.prototype.constructor = CameraHelper;\n\n    CameraHelper.prototype.update = function () {\n\n    \tvar geometry, pointMap;\n\n    \tvar vector = new Vector3();\n    \tvar camera = new Camera();\n\n    \tfunction setPoint( point, x, y, z ) {\n\n    \t\tvector.set( x, y, z ).unproject( camera );\n\n    \t\tvar points = pointMap[ point ];\n\n    \t\tif ( points !== undefined ) {\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \treturn function update() {\n\n    \t\tgeometry = this.geometry;\n    \t\tpointMap = this.pointMap;\n\n    \t\tvar w = 1, h = 1;\n\n    \t\t// we need just camera projection matrix\n    \t\t// world matrix must be identity\n\n    \t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n    \t\t// center / target\n\n    \t\tsetPoint( \"c\", 0, 0, - 1 );\n    \t\tsetPoint( \"t\", 0, 0,  1 );\n\n    \t\t// near\n\n    \t\tsetPoint( \"n1\", - w, - h, - 1 );\n    \t\tsetPoint( \"n2\",   w, - h, - 1 );\n    \t\tsetPoint( \"n3\", - w,   h, - 1 );\n    \t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n    \t\t// far\n\n    \t\tsetPoint( \"f1\", - w, - h, 1 );\n    \t\tsetPoint( \"f2\",   w, - h, 1 );\n    \t\tsetPoint( \"f3\", - w,   h, 1 );\n    \t\tsetPoint( \"f4\",   w,   h, 1 );\n\n    \t\t// up\n\n    \t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n    \t\t// cross\n\n    \t\tsetPoint( \"cf1\", - w,   0, 1 );\n    \t\tsetPoint( \"cf2\",   w,   0, 1 );\n    \t\tsetPoint( \"cf3\",   0, - h, 1 );\n    \t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n    \t\tsetPoint( \"cn1\", - w,   0, - 1 );\n    \t\tsetPoint( \"cn2\",   w,   0, - 1 );\n    \t\tsetPoint( \"cn3\",   0, - h, - 1 );\n    \t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n    \t\tgeometry.verticesNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    // a helper to show the world-axis-aligned bounding box for an object\n\n    function BoundingBoxHelper( object, hex ) {\n\n    \tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n    \tthis.object = object;\n\n    \tthis.box = new Box3();\n\n    \tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n    }\n\n    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\n    BoundingBoxHelper.prototype.update = function () {\n\n    \tthis.box.setFromObject( this.object );\n\n    \tthis.box.size( this.scale );\n\n    \tthis.box.getCenter( this.position );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BoxHelper( object, color ) {\n\n    \tif ( color === undefined ) color = 0xffff00;\n\n    \tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n    \tvar positions = new Float32Array( 8 * 3 );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n    \tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n    \tif ( object !== undefined ) {\n\n    \t\tthis.update( object );\n\n    \t}\n\n    }\n\n    BoxHelper.prototype = Object.create( LineSegments.prototype );\n    BoxHelper.prototype.constructor = BoxHelper;\n\n    BoxHelper.prototype.update = ( function () {\n\n    \tvar box = new Box3();\n\n    \treturn function update( object ) {\n\n    \t\tif ( (object && object.isBox3) ) {\n\n    \t\t\tbox.copy( object );\n\n    \t\t} else {\n\n    \t\t\tbox.setFromObject( object );\n\n    \t\t}\n\n    \t\tif ( box.isEmpty() ) return;\n\n    \t\tvar min = box.min;\n    \t\tvar max = box.max;\n\n    \t\t/*\n    \t\t  5____4\n    \t\t1/___0/|\n    \t\t| 6__|_7\n    \t\t2/___3/\n\n    \t\t0: max.x, max.y, max.z\n    \t\t1: min.x, max.y, max.z\n    \t\t2: min.x, min.y, max.z\n    \t\t3: max.x, min.y, max.z\n    \t\t4: max.x, max.y, min.z\n    \t\t5: min.x, max.y, min.z\n    \t\t6: min.x, min.y, min.z\n    \t\t7: max.x, min.y, min.z\n    \t\t*/\n\n    \t\tvar position = this.geometry.attributes.position;\n    \t\tvar array = position.array;\n\n    \t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n    \t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n    \t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n    \t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n    \t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n    \t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n    \t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n    \t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n    \t\tposition.needsUpdate = true;\n\n    \t\tthis.geometry.computeBoundingSphere();\n\n    \t};\n\n    } )();\n\n    var lineGeometry = new BufferGeometry();\n    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n    coneGeometry.translate( 0, - 0.5, 0 );\n\n    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n    \t// dir is assumed to be normalized\n\n    \tObject3D.call( this );\n\n    \tif ( color === undefined ) color = 0xffff00;\n    \tif ( length === undefined ) length = 1;\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.position.copy( origin );\n\n    \tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n    \tthis.line.matrixAutoUpdate = false;\n    \tthis.add( this.line );\n\n    \tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n    \tthis.cone.matrixAutoUpdate = false;\n    \tthis.add( this.cone );\n\n    \tthis.setDirection( dir );\n    \tthis.setLength( length, headLength, headWidth );\n\n    }\n\n    ArrowHelper.prototype = Object.create( Object3D.prototype );\n    ArrowHelper.prototype.constructor = ArrowHelper;\n\n    ArrowHelper.prototype.setDirection = ( function () {\n\n    \tvar axis = new Vector3();\n    \tvar radians;\n\n    \treturn function setDirection( dir ) {\n\n    \t\t// dir is assumed to be normalized\n\n    \t\tif ( dir.y > 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n    \t\t} else if ( dir.y < - 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n    \t\t} else {\n\n    \t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n    \t\t\tradians = Math.acos( dir.y );\n\n    \t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n    \t\t}\n\n    \t};\n\n    }() );\n\n    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n    \tthis.line.updateMatrix();\n\n    \tthis.cone.scale.set( headWidth, headLength, headWidth );\n    \tthis.cone.position.y = length;\n    \tthis.cone.updateMatrix();\n\n    };\n\n    ArrowHelper.prototype.setColor = function ( color ) {\n\n    \tthis.line.material.color.copy( color );\n    \tthis.cone.material.color.copy( color );\n\n    };\n\n    /**\n     * @author sroucheray / http://sroucheray.org/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AxisHelper( size ) {\n\n    \tsize = size || 1;\n\n    \tvar vertices = new Float32Array( [\n    \t\t0, 0, 0,  size, 0, 0,\n    \t\t0, 0, 0,  0, size, 0,\n    \t\t0, 0, 0,  0, 0, size\n    \t] );\n\n    \tvar colors = new Float32Array( [\n    \t\t1, 0, 0,  1, 0.6, 0,\n    \t\t0, 1, 0,  0.6, 1, 0,\n    \t\t0, 0, 1,  0, 0.6, 1\n    \t] );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    AxisHelper.prototype = Object.create( LineSegments.prototype );\n    AxisHelper.prototype.constructor = AxisHelper;\n\n    /**\n     * @author zz85 https://github.com/zz85\n     *\n     * Centripetal CatmullRom Curve - which is useful for avoiding\n     * cusps and self-intersections in non-uniform catmull rom curves.\n     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n     *\n     * curve.type accepts centripetal(default), chordal and catmullrom\n     * curve.tension is used for catmullrom which defaults to 0.5\n     */\n\n    exports.CatmullRomCurve3 = ( function() {\n\n    \tvar\n    \t\ttmp = new Vector3(),\n    \t\tpx = new CubicPoly(),\n    \t\tpy = new CubicPoly(),\n    \t\tpz = new CubicPoly();\n\n    \t/*\n    \tBased on an optimized c++ solution in\n    \t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n    \t - http://ideone.com/NoEbVM\n\n    \tThis CubicPoly class could be used for reusing some variables and calculations,\n    \tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n    \twhich can be placed in CurveUtils.\n    \t*/\n\n    \tfunction CubicPoly() {\n\n    \t}\n\n    \t/*\n    \t * Compute coefficients for a cubic polynomial\n    \t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n    \t * such that\n    \t *   p(0) = x0, p(1) = x1\n    \t *  and\n    \t *   p'(0) = t0, p'(1) = t1.\n    \t */\n    \tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n    \t\tthis.c0 = x0;\n    \t\tthis.c1 = t0;\n    \t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n    \t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n    \t};\n\n    \tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n    \t\t// compute tangents when parameterized in [t1,t2]\n    \t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n    \t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n    \t\t// rescale tangents for parametrization in [0,1]\n    \t\tt1 *= dt1;\n    \t\tt2 *= dt1;\n\n    \t\t// initCubicPoly\n    \t\tthis.init( x1, x2, t1, t2 );\n\n    \t};\n\n    \t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n    \tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n    \t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n    \t};\n\n    \tCubicPoly.prototype.calc = function( t ) {\n\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t2 * t;\n    \t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n    \t};\n\n    \t// Subclass Three.js curve\n    \treturn Curve.create(\n\n    \t\tfunction ( p /* array of Vector3 */ ) {\n\n    \t\t\tthis.points = p || [];\n    \t\t\tthis.closed = false;\n\n    \t\t},\n\n    \t\tfunction ( t ) {\n\n    \t\t\tvar points = this.points,\n    \t\t\t\tpoint, intPoint, weight, l;\n\n    \t\t\tl = points.length;\n\n    \t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n    \t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n    \t\t\tintPoint = Math.floor( point );\n    \t\t\tweight = point - intPoint;\n\n    \t\t\tif ( this.closed ) {\n\n    \t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n    \t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n    \t\t\t\tintPoint = l - 2;\n    \t\t\t\tweight = 1;\n\n    \t\t\t}\n\n    \t\t\tvar p0, p1, p2, p3; // 4 points\n\n    \t\t\tif ( this.closed || intPoint > 0 ) {\n\n    \t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate first point\n    \t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n    \t\t\t\tp0 = tmp;\n\n    \t\t\t}\n\n    \t\t\tp1 = points[ intPoint % l ];\n    \t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n    \t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n    \t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate last point\n    \t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n    \t\t\t\tp3 = tmp;\n\n    \t\t\t}\n\n    \t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n    \t\t\t\t// init Centripetal / Chordal Catmull-Rom\n    \t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n    \t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n    \t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n    \t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n    \t\t\t\t// safety check for repeated points\n    \t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n    \t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n    \t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n    \t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n    \t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n    \t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n    \t\t\t} else if ( this.type === 'catmullrom' ) {\n\n    \t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n    \t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n    \t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n    \t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n    \t\t\t}\n\n    \t\t\tvar v = new Vector3(\n    \t\t\t\tpx.calc( weight ),\n    \t\t\t\tpy.calc( weight ),\n    \t\t\t\tpz.calc( weight )\n    \t\t\t);\n\n    \t\t\treturn v;\n\n    \t\t}\n\n    \t);\n\n    } )();\n\n    /**************************************************************\n     *\tClosed Spline 3D curve\n     **************************************************************/\n\n\n    function ClosedSplineCurve3( points ) {\n\n    \tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n    \texports.CatmullRomCurve3.call( this, points );\n    \tthis.type = 'catmullrom';\n    \tthis.closed = true;\n\n    }\n\n    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );\n\n    /**************************************************************\n     *\tSpline 3D curve\n     **************************************************************/\n\n\n    var SplineCurve3 = Curve.create(\n\n    \tfunction ( points /* array of Vector3 */ ) {\n\n    \t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n    \t\tthis.points = ( points === undefined ) ? [] : points;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar points = this.points;\n    \t\tvar point = ( points.length - 1 ) * t;\n\n    \t\tvar intPoint = Math.floor( point );\n    \t\tvar weight = point - intPoint;\n\n    \t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n    \t\tvar point1 = points[ intPoint ];\n    \t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \t\tvar interpolate = exports.CurveUtils.interpolate;\n\n    \t\treturn new Vector3(\n    \t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n    \t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tCubic Bezier 3D curve\n     **************************************************************/\n\n    exports.CubicBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2, v3 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n    \t\tthis.v3 = v3;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b3 = exports.ShapeUtils.b3;\n\n    \t\treturn new Vector3(\n    \t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n    \t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tQuadratic Bezier 3D curve\n     **************************************************************/\n\n    exports.QuadraticBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b2 = exports.ShapeUtils.b2;\t\t\n\n    \t\treturn new Vector3(\n    \t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n    \t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tLine3D\n     **************************************************************/\n\n    exports.LineCurve3 = Curve.create(\n\n    \tfunction ( v1, v2 ) {\n\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tif ( t === 1 ) {\n\n    \t\t\treturn this.v2.clone();\n\n    \t\t}\n\n    \t\tvar vector = new Vector3();\n\n    \t\tvector.subVectors( this.v2, this.v1 ); // diff\n    \t\tvector.multiplyScalar( t );\n    \t\tvector.add( this.v1 );\n\n    \t\treturn vector;\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tArc curve\n     **************************************************************/\n\n    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    }\n\n    ArcCurve.prototype = Object.create( EllipseCurve.prototype );\n    ArcCurve.prototype.constructor = ArcCurve;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    exports.SceneUtils = {\n\n    \tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n    \t\tvar group = new Group();\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n    \t\t}\n\n    \t\treturn group;\n\n    \t},\n\n    \tdetach: function ( child, parent, scene ) {\n\n    \t\tchild.applyMatrix( parent.matrixWorld );\n    \t\tparent.remove( child );\n    \t\tscene.add( child );\n\n    \t},\n\n    \tattach: function ( child, scene, parent ) {\n\n    \t\tvar matrixWorldInverse = new Matrix4();\n    \t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n    \t\tchild.applyMatrix( matrixWorldInverse );\n\n    \t\tscene.remove( child );\n    \t\tparent.add( child );\n\n    \t}\n\n    };\n\n    function Face4 ( a, b, c, d, normal, color, materialIndex ) {\n    \tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n    \treturn new Face3( a, b, c, normal, color, materialIndex );\n    }\n\n    var LineStrip = 0;\n\n    var LinePieces = 1;\n\n    function PointCloud ( geometry, material ) {\n    \tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function ParticleSystem ( geometry, material ) {\n    \tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function PointCloudMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleBasicMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleSystemMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function Vertex ( x, y, z ) {\n    \tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n    \treturn new Vector3( x, y, z );\n    }\n\n    //\n\n    function EdgesHelper( object, hex ) {\n    \tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n    \treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    function WireframeHelper( object, hex ) {\n    \tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n    \treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    //\n\n    Object.assign( Box2.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Box3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Line3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Matrix3.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n    \t\treturn vector.applyMatrix3( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t}\n    } );\n\n    Object.assign( Matrix4.prototype, {\n    \textractPosition: function ( m ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n    \t\treturn this.copyPosition( m );\n    \t},\n    \tsetRotationFromQuaternion: function ( q ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n    \t\treturn this.makeRotationFromQuaternion( q );\n    \t},\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n    \t\treturn vector.applyProjection( this );\n    \t},\n    \tmultiplyVector4: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t},\n    \trotateAxis: function ( v ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n    \t\tv.transformDirection( this );\n    \t},\n    \tcrossVector: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \ttranslate: function ( v ) {\n    \t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n    \t},\n    \trotateX: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n    \t},\n    \trotateY: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n    \t},\n    \trotateZ: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n    \t},\n    \trotateByAxis: function ( axis, angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n    \t}\n    } );\n\n    Object.assign( Plane.prototype, {\n    \tisIntersectionLine: function ( line ) {\n    \t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n    \t\treturn this.intersectsLine( line );\n    \t}\n    } );\n\n    Object.assign( Quaternion.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n    \t\treturn vector.applyQuaternion( this );\n    \t}\n    } );\n\n    Object.assign( Ray.prototype, {\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionPlane: function ( plane ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n    \t\treturn this.intersectsPlane( plane );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t}\n    } );\n\n    Object.assign( Shape.prototype, {\n    \textrude: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n    \t\treturn new ExtrudeGeometry( this, options );\n    \t},\n    \tmakeGeometry: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n    \t\treturn new ShapeGeometry( this, options );\n    \t}\n    } );\n\n    Object.assign( Vector3.prototype, {\n    \tsetEulerFromRotationMatrix: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n    \t},\n    \tsetEulerFromQuaternion: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n    \t},\n    \tgetPositionFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n    \t\treturn this.setFromMatrixPosition( m );\n    \t},\n    \tgetScaleFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n    \t\treturn this.setFromMatrixScale( m );\n    \t},\n    \tgetColumnFromMatrix: function ( index, matrix ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n    \t\treturn this.setFromMatrixColumn( matrix, index );\n    \t}\n    } );\n\n    //\n\n    Object.assign( Object3D.prototype, {\n    \tgetChildByName: function ( name ) {\n    \t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n    \t\treturn this.getObjectByName( name );\n    \t},\n    \trenderDepth: function ( value ) {\n    \t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n    \t},\n    \ttranslate: function ( distance, axis ) {\n    \t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n    \t\treturn this.translateOnAxis( axis, distance );\n    \t}\n    } );\n\n    Object.defineProperties( Object3D.prototype, {\n    \teulerOrder: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\treturn this.rotation.order;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\tthis.rotation.order = value;\n    \t\t}\n    \t},\n    \tuseQuaternion: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( LOD.prototype, {\n    \tobjects: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n    \t\t\treturn this.levels;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n    \tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n    \t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n    \tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n    \tthis.setFocalLength( focalLength );\n\n    };\n\n    //\n\n    Object.defineProperties( Light.prototype, {\n    \tonlyShadow: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n    \t\t}\n    \t},\n    \tshadowCameraFov: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n    \t\t\tthis.shadow.camera.fov = value;\n    \t\t}\n    \t},\n    \tshadowCameraLeft: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n    \t\t\tthis.shadow.camera.left = value;\n    \t\t}\n    \t},\n    \tshadowCameraRight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n    \t\t\tthis.shadow.camera.right = value;\n    \t\t}\n    \t},\n    \tshadowCameraTop: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n    \t\t\tthis.shadow.camera.top = value;\n    \t\t}\n    \t},\n    \tshadowCameraBottom: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n    \t\t\tthis.shadow.camera.bottom = value;\n    \t\t}\n    \t},\n    \tshadowCameraNear: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n    \t\t\tthis.shadow.camera.near = value;\n    \t\t}\n    \t},\n    \tshadowCameraFar: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n    \t\t\tthis.shadow.camera.far = value;\n    \t\t}\n    \t},\n    \tshadowCameraVisible: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n    \t\t}\n    \t},\n    \tshadowBias: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n    \t\t\tthis.shadow.bias = value;\n    \t\t}\n    \t},\n    \tshadowDarkness: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n    \t\t}\n    \t},\n    \tshadowMapWidth: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n    \t\t\tthis.shadow.mapSize.width = value;\n    \t\t}\n    \t},\n    \tshadowMapHeight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n    \t\t\tthis.shadow.mapSize.height = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( BufferAttribute.prototype, {\n    \tlength: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n    \t\t\treturn this.array.length;\n    \t\t}\n    \t}\n    } );\n\n    Object.assign( BufferGeometry.prototype, {\n    \taddIndex: function ( index ) {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n    \t\tthis.setIndex( index );\n    \t},\n    \taddDrawCall: function ( start, count, indexOffset ) {\n    \t\tif ( indexOffset !== undefined ) {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n    \t\t}\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n    \t\tthis.addGroup( start, count );\n    \t},\n    \tclearDrawCalls: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n    \t\tthis.clearGroups();\n    \t},\n    \tcomputeTangents: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n    \t},\n    \tcomputeOffsets: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( BufferGeometry.prototype, {\n    \tdrawcalls: {\n    \t\tget: function () {\n    \t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t},\n    \toffsets: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( Material.prototype, {\n    \twrapAround: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t}\n    \t},\n    \twrapRGB: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n    \t\t\treturn new Color();\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( MeshPhongMaterial.prototype, {\n    \tmetal: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n    \t\t\treturn false;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( ShaderMaterial.prototype, {\n    \tderivatives: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\treturn this.extensions.derivatives;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\tthis.extensions.derivatives = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    EventDispatcher.prototype = Object.assign( Object.create( {\n\n    \t// Note: Extra base ensures these properties are not 'assign'ed.\n\n    \tconstructor: EventDispatcher,\n\n    \tapply: function ( target ) {\n\n    \t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n    \t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n    \t\tObject.assign( target, this );\n\n    \t}\n\n    } ), EventDispatcher.prototype );\n\n    //\n\n    Object.assign( WebGLRenderer.prototype, {\n    \tsupportsFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_float' );\n    \t},\n    \tsupportsHalfFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_half_float' );\n    \t},\n    \tsupportsStandardDerivatives: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n    \t\treturn this.extensions.get( 'OES_standard_derivatives' );\n    \t},\n    \tsupportsCompressedTextureS3TC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n    \t},\n    \tsupportsCompressedTexturePVRTC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n    \t},\n    \tsupportsBlendMinMax: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n    \t\treturn this.extensions.get( 'EXT_blend_minmax' );\n    \t},\n    \tsupportsVertexTextures: function () {\n    \t\treturn this.capabilities.vertexTextures;\n    \t},\n    \tsupportsInstancedArrays: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n    \t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n    \t},\n    \tenableScissorTest: function ( boolean ) {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n    \t\tthis.setScissorTest( boolean );\n    \t},\n    \tinitMaterial: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n    \t},\n    \taddPrePlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n    \t},\n    \taddPostPlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n    \t},\n    \tupdateShadowMap: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( WebGLRenderer.prototype, {\n    \tshadowMapEnabled: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.enabled;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n    \t\t\tthis.shadowMap.enabled = value;\n    \t\t}\n    \t},\n    \tshadowMapType: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n    \t\t\tthis.shadowMap.type = value;\n    \t\t}\n    \t},\n    \tshadowMapCullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.cullFace;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n    \t\t\tthis.shadowMap.cullFace = value;\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( WebGLShadowMap.prototype, {\n    \tcullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n    \t\t},\n    \t\tset: function ( cullFace ) {\n    \t\t\tvar value = ( cullFace !== CullFaceBack );\n    \t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n    \t\t\tthis.renderReverseSided = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( WebGLRenderTarget.prototype, {\n    \twrapS: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\treturn this.texture.wrapS;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\tthis.texture.wrapS = value;\n    \t\t}\n    \t},\n    \twrapT: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\treturn this.texture.wrapT;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\tthis.texture.wrapT = value;\n    \t\t}\n    \t},\n    \tmagFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\treturn this.texture.magFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\tthis.texture.magFilter = value;\n    \t\t}\n    \t},\n    \tminFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\treturn this.texture.minFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\tthis.texture.minFilter = value;\n    \t\t}\n    \t},\n    \tanisotropy: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\treturn this.texture.anisotropy;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\tthis.texture.anisotropy = value;\n    \t\t}\n    \t},\n    \toffset: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\treturn this.texture.offset;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\tthis.texture.offset = value;\n    \t\t}\n    \t},\n    \trepeat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\treturn this.texture.repeat;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\tthis.texture.repeat = value;\n    \t\t}\n    \t},\n    \tformat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\treturn this.texture.format;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\tthis.texture.format = value;\n    \t\t}\n    \t},\n    \ttype: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\treturn this.texture.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\tthis.texture.type = value;\n    \t\t}\n    \t},\n    \tgenerateMipmaps: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\treturn this.texture.generateMipmaps;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\tthis.texture.generateMipmaps = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.assign( Audio.prototype, {\n    \tload: function ( file ) {\n    \t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n    \t\tvar scope = this;\n    \t\tvar audioLoader = new AudioLoader();\n    \t\taudioLoader.load( file, function ( buffer ) {\n    \t\t\tscope.setBuffer( buffer );\n    \t\t} );\n    \t\treturn this;\n    \t}\n    } );\n\n    Object.assign( AudioAnalyser.prototype, {\n    \tgetData: function ( file ) {\n    \t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n    \t\treturn this.getFrequencyData();\n    \t}\n    } );\n\n    //\n\n    var GeometryUtils = {\n\n    \tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n    \t\tvar matrix;\n\n    \t\tif ( geometry2.isMesh ) {\n\n    \t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n    \t\t\tmatrix = geometry2.matrix;\n    \t\t\tgeometry2 = geometry2.geometry;\n\n    \t\t}\n\n    \t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n    \t},\n\n    \tcenter: function ( geometry ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n    \t\treturn geometry.center();\n\n    \t}\n\n    };\n\n    var ImageUtils = {\n\n    \tcrossOrigin: undefined,\n\n    \tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n    \t\tvar loader = new TextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n    \t\tvar loader = new CubeTextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadCompressedTexture: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n    \t},\n\n    \tloadCompressedTextureCube: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n    \t}\n\n    };\n\n    //\n\n    function Projector () {\n\n    \tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n    \tthis.projectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n    \t\tvector.project( camera );\n\n    \t};\n\n    \tthis.unprojectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n    \t\tvector.unproject( camera );\n\n    \t};\n\n    \tthis.pickingRay = function ( vector, camera ) {\n\n    \t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n    \t};\n\n    }\n\n    //\n\n    function CanvasRenderer () {\n\n    \tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n    \tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \tthis.clear = function () {};\n    \tthis.render = function () {};\n    \tthis.setClearColor = function () {};\n    \tthis.setSize = function () {};\n\n    }\n\n    Object.defineProperty( exports, 'AudioContext', {\n    \tget: function () {\n    \t\treturn exports.getAudioContext();\n    \t}\n    });\n\n    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n    exports.WebGLRenderTarget = WebGLRenderTarget;\n    exports.WebGLRenderer = WebGLRenderer;\n    exports.ShaderLib = ShaderLib;\n    exports.UniformsLib = UniformsLib;\n    exports.ShaderChunk = ShaderChunk;\n    exports.FogExp2 = FogExp2;\n    exports.Fog = Fog;\n    exports.Scene = Scene;\n    exports.LensFlare = LensFlare;\n    exports.Sprite = Sprite;\n    exports.LOD = LOD;\n    exports.SkinnedMesh = SkinnedMesh;\n    exports.Skeleton = Skeleton;\n    exports.Bone = Bone;\n    exports.Mesh = Mesh;\n    exports.LineSegments = LineSegments;\n    exports.Line = Line;\n    exports.Points = Points;\n    exports.Group = Group;\n    exports.VideoTexture = VideoTexture;\n    exports.DataTexture = DataTexture;\n    exports.CompressedTexture = CompressedTexture;\n    exports.CubeTexture = CubeTexture;\n    exports.CanvasTexture = CanvasTexture;\n    exports.DepthTexture = DepthTexture;\n    exports.TextureIdCount = TextureIdCount;\n    exports.Texture = Texture;\n    exports.MaterialIdCount = MaterialIdCount;\n    exports.CompressedTextureLoader = CompressedTextureLoader;\n    exports.BinaryTextureLoader = BinaryTextureLoader;\n    exports.DataTextureLoader = DataTextureLoader;\n    exports.CubeTextureLoader = CubeTextureLoader;\n    exports.TextureLoader = TextureLoader;\n    exports.ObjectLoader = ObjectLoader;\n    exports.MaterialLoader = MaterialLoader;\n    exports.BufferGeometryLoader = BufferGeometryLoader;\n    exports.LoadingManager = LoadingManager;\n    exports.JSONLoader = JSONLoader;\n    exports.ImageLoader = ImageLoader;\n    exports.FontLoader = FontLoader;\n    exports.XHRLoader = XHRLoader;\n    exports.Loader = Loader;\n    exports.AudioLoader = AudioLoader;\n    exports.SpotLightShadow = SpotLightShadow;\n    exports.SpotLight = SpotLight;\n    exports.PointLight = PointLight;\n    exports.HemisphereLight = HemisphereLight;\n    exports.DirectionalLightShadow = DirectionalLightShadow;\n    exports.DirectionalLight = DirectionalLight;\n    exports.AmbientLight = AmbientLight;\n    exports.LightShadow = LightShadow;\n    exports.Light = Light;\n    exports.StereoCamera = StereoCamera;\n    exports.PerspectiveCamera = PerspectiveCamera;\n    exports.OrthographicCamera = OrthographicCamera;\n    exports.CubeCamera = CubeCamera;\n    exports.Camera = Camera;\n    exports.AudioListener = AudioListener;\n    exports.PositionalAudio = PositionalAudio;\n    exports.getAudioContext = getAudioContext;\n    exports.AudioAnalyser = AudioAnalyser;\n    exports.Audio = Audio;\n    exports.VectorKeyframeTrack = VectorKeyframeTrack;\n    exports.StringKeyframeTrack = StringKeyframeTrack;\n    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n    exports.NumberKeyframeTrack = NumberKeyframeTrack;\n    exports.ColorKeyframeTrack = ColorKeyframeTrack;\n    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n    exports.PropertyMixer = PropertyMixer;\n    exports.PropertyBinding = PropertyBinding;\n    exports.KeyframeTrack = KeyframeTrack;\n    exports.AnimationObjectGroup = AnimationObjectGroup;\n    exports.AnimationMixer = AnimationMixer;\n    exports.AnimationClip = AnimationClip;\n    exports.Uniform = Uniform;\n    exports.InstancedBufferGeometry = InstancedBufferGeometry;\n    exports.BufferGeometry = BufferGeometry;\n    exports.GeometryIdCount = GeometryIdCount;\n    exports.Geometry = Geometry;\n    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n    exports.InterleavedBuffer = InterleavedBuffer;\n    exports.InstancedBufferAttribute = InstancedBufferAttribute;\n    exports.DynamicBufferAttribute = DynamicBufferAttribute;\n    exports.Float64Attribute = Float64Attribute;\n    exports.Float32Attribute = Float32Attribute;\n    exports.Uint32Attribute = Uint32Attribute;\n    exports.Int32Attribute = Int32Attribute;\n    exports.Uint16Attribute = Uint16Attribute;\n    exports.Int16Attribute = Int16Attribute;\n    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n    exports.Uint8Attribute = Uint8Attribute;\n    exports.Int8Attribute = Int8Attribute;\n    exports.BufferAttribute = BufferAttribute;\n    exports.Face3 = Face3;\n    exports.Object3DIdCount = Object3DIdCount;\n    exports.Object3D = Object3D;\n    exports.Raycaster = Raycaster;\n    exports.Layers = Layers;\n    exports.EventDispatcher = EventDispatcher;\n    exports.Clock = Clock;\n    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n    exports.LinearInterpolant = LinearInterpolant;\n    exports.DiscreteInterpolant = DiscreteInterpolant;\n    exports.CubicInterpolant = CubicInterpolant;\n    exports.Interpolant = Interpolant;\n    exports.Triangle = Triangle;\n    exports.Spline = Spline;\n    exports.Spherical = Spherical;\n    exports.Plane = Plane;\n    exports.Frustum = Frustum;\n    exports.Sphere = Sphere;\n    exports.Ray = Ray;\n    exports.Matrix4 = Matrix4;\n    exports.Matrix3 = Matrix3;\n    exports.Box3 = Box3;\n    exports.Box2 = Box2;\n    exports.Line3 = Line3;\n    exports.Euler = Euler;\n    exports.Vector4 = Vector4;\n    exports.Vector3 = Vector3;\n    exports.Vector2 = Vector2;\n    exports.Quaternion = Quaternion;\n    exports.Color = Color;\n    exports.MorphBlendMesh = MorphBlendMesh;\n    exports.ImmediateRenderObject = ImmediateRenderObject;\n    exports.VertexNormalsHelper = VertexNormalsHelper;\n    exports.SpotLightHelper = SpotLightHelper;\n    exports.SkeletonHelper = SkeletonHelper;\n    exports.PointLightHelper = PointLightHelper;\n    exports.HemisphereLightHelper = HemisphereLightHelper;\n    exports.GridHelper = GridHelper;\n    exports.FaceNormalsHelper = FaceNormalsHelper;\n    exports.DirectionalLightHelper = DirectionalLightHelper;\n    exports.CameraHelper = CameraHelper;\n    exports.BoundingBoxHelper = BoundingBoxHelper;\n    exports.BoxHelper = BoxHelper;\n    exports.ArrowHelper = ArrowHelper;\n    exports.AxisHelper = AxisHelper;\n    exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n    exports.SplineCurve3 = SplineCurve3;\n    exports.ArcCurve = ArcCurve;\n    exports.EllipseCurve = EllipseCurve;\n    exports.SplineCurve = SplineCurve;\n    exports.CubicBezierCurve = CubicBezierCurve;\n    exports.QuadraticBezierCurve = QuadraticBezierCurve;\n    exports.LineCurve = LineCurve;\n    exports.Shape = Shape;\n    exports.ShapePath = ShapePath;\n    exports.Path = Path;\n    exports.Font = Font;\n    exports.CurvePath = CurvePath;\n    exports.Curve = Curve;\n    exports.WireframeGeometry = WireframeGeometry;\n    exports.ParametricGeometry = ParametricGeometry;\n    exports.TetrahedronGeometry = TetrahedronGeometry;\n    exports.OctahedronGeometry = OctahedronGeometry;\n    exports.IcosahedronGeometry = IcosahedronGeometry;\n    exports.DodecahedronGeometry = DodecahedronGeometry;\n    exports.PolyhedronGeometry = PolyhedronGeometry;\n    exports.TubeGeometry = TubeGeometry;\n    exports.TorusKnotGeometry = TorusKnotGeometry;\n    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n    exports.TorusGeometry = TorusGeometry;\n    exports.TorusBufferGeometry = TorusBufferGeometry;\n    exports.TextGeometry = TextGeometry;\n    exports.SphereBufferGeometry = SphereBufferGeometry;\n    exports.SphereGeometry = SphereGeometry;\n    exports.RingGeometry = RingGeometry;\n    exports.RingBufferGeometry = RingBufferGeometry;\n    exports.PlaneBufferGeometry = PlaneBufferGeometry;\n    exports.PlaneGeometry = PlaneGeometry;\n    exports.LatheGeometry = LatheGeometry;\n    exports.LatheBufferGeometry = LatheBufferGeometry;\n    exports.ShapeGeometry = ShapeGeometry;\n    exports.ExtrudeGeometry = ExtrudeGeometry;\n    exports.EdgesGeometry = EdgesGeometry;\n    exports.ConeGeometry = ConeGeometry;\n    exports.ConeBufferGeometry = ConeBufferGeometry;\n    exports.CylinderGeometry = CylinderGeometry;\n    exports.CylinderBufferGeometry = CylinderBufferGeometry;\n    exports.CircleBufferGeometry = CircleBufferGeometry;\n    exports.CircleGeometry = CircleGeometry;\n    exports.BoxBufferGeometry = BoxBufferGeometry;\n    exports.BoxGeometry = BoxGeometry;\n    exports.ShadowMaterial = ShadowMaterial;\n    exports.SpriteMaterial = SpriteMaterial;\n    exports.RawShaderMaterial = RawShaderMaterial;\n    exports.ShaderMaterial = ShaderMaterial;\n    exports.PointsMaterial = PointsMaterial;\n    exports.MultiMaterial = MultiMaterial;\n    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n    exports.MeshStandardMaterial = MeshStandardMaterial;\n    exports.MeshPhongMaterial = MeshPhongMaterial;\n    exports.MeshNormalMaterial = MeshNormalMaterial;\n    exports.MeshLambertMaterial = MeshLambertMaterial;\n    exports.MeshDepthMaterial = MeshDepthMaterial;\n    exports.MeshBasicMaterial = MeshBasicMaterial;\n    exports.LineDashedMaterial = LineDashedMaterial;\n    exports.LineBasicMaterial = LineBasicMaterial;\n    exports.Material = Material;\n    exports.REVISION = REVISION;\n    exports.MOUSE = MOUSE;\n    exports.CullFaceNone = CullFaceNone;\n    exports.CullFaceBack = CullFaceBack;\n    exports.CullFaceFront = CullFaceFront;\n    exports.CullFaceFrontBack = CullFaceFrontBack;\n    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n    exports.BasicShadowMap = BasicShadowMap;\n    exports.PCFShadowMap = PCFShadowMap;\n    exports.PCFSoftShadowMap = PCFSoftShadowMap;\n    exports.FrontSide = FrontSide;\n    exports.BackSide = BackSide;\n    exports.DoubleSide = DoubleSide;\n    exports.FlatShading = FlatShading;\n    exports.SmoothShading = SmoothShading;\n    exports.NoColors = NoColors;\n    exports.FaceColors = FaceColors;\n    exports.VertexColors = VertexColors;\n    exports.NoBlending = NoBlending;\n    exports.NormalBlending = NormalBlending;\n    exports.AdditiveBlending = AdditiveBlending;\n    exports.SubtractiveBlending = SubtractiveBlending;\n    exports.MultiplyBlending = MultiplyBlending;\n    exports.CustomBlending = CustomBlending;\n    exports.BlendingMode = BlendingMode;\n    exports.AddEquation = AddEquation;\n    exports.SubtractEquation = SubtractEquation;\n    exports.ReverseSubtractEquation = ReverseSubtractEquation;\n    exports.MinEquation = MinEquation;\n    exports.MaxEquation = MaxEquation;\n    exports.ZeroFactor = ZeroFactor;\n    exports.OneFactor = OneFactor;\n    exports.SrcColorFactor = SrcColorFactor;\n    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n    exports.SrcAlphaFactor = SrcAlphaFactor;\n    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n    exports.DstAlphaFactor = DstAlphaFactor;\n    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n    exports.DstColorFactor = DstColorFactor;\n    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n    exports.NeverDepth = NeverDepth;\n    exports.AlwaysDepth = AlwaysDepth;\n    exports.LessDepth = LessDepth;\n    exports.LessEqualDepth = LessEqualDepth;\n    exports.EqualDepth = EqualDepth;\n    exports.GreaterEqualDepth = GreaterEqualDepth;\n    exports.GreaterDepth = GreaterDepth;\n    exports.NotEqualDepth = NotEqualDepth;\n    exports.MultiplyOperation = MultiplyOperation;\n    exports.MixOperation = MixOperation;\n    exports.AddOperation = AddOperation;\n    exports.NoToneMapping = NoToneMapping;\n    exports.LinearToneMapping = LinearToneMapping;\n    exports.ReinhardToneMapping = ReinhardToneMapping;\n    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n    exports.CineonToneMapping = CineonToneMapping;\n    exports.UVMapping = UVMapping;\n    exports.CubeReflectionMapping = CubeReflectionMapping;\n    exports.CubeRefractionMapping = CubeRefractionMapping;\n    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n    exports.SphericalReflectionMapping = SphericalReflectionMapping;\n    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n    exports.TextureMapping = TextureMapping;\n    exports.RepeatWrapping = RepeatWrapping;\n    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n    exports.TextureWrapping = TextureWrapping;\n    exports.NearestFilter = NearestFilter;\n    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n    exports.LinearFilter = LinearFilter;\n    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n    exports.TextureFilter = TextureFilter;\n    exports.UnsignedByteType = UnsignedByteType;\n    exports.ByteType = ByteType;\n    exports.ShortType = ShortType;\n    exports.UnsignedShortType = UnsignedShortType;\n    exports.IntType = IntType;\n    exports.UnsignedIntType = UnsignedIntType;\n    exports.FloatType = FloatType;\n    exports.HalfFloatType = HalfFloatType;\n    exports.UnsignedShort4444Type = UnsignedShort4444Type;\n    exports.UnsignedShort5551Type = UnsignedShort5551Type;\n    exports.UnsignedShort565Type = UnsignedShort565Type;\n    exports.UnsignedInt248Type = UnsignedInt248Type;\n    exports.AlphaFormat = AlphaFormat;\n    exports.RGBFormat = RGBFormat;\n    exports.RGBAFormat = RGBAFormat;\n    exports.LuminanceFormat = LuminanceFormat;\n    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n    exports.RGBEFormat = RGBEFormat;\n    exports.DepthFormat = DepthFormat;\n    exports.DepthStencilFormat = DepthStencilFormat;\n    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n    exports.RGB_ETC1_Format = RGB_ETC1_Format;\n    exports.LoopOnce = LoopOnce;\n    exports.LoopRepeat = LoopRepeat;\n    exports.LoopPingPong = LoopPingPong;\n    exports.InterpolateDiscrete = InterpolateDiscrete;\n    exports.InterpolateLinear = InterpolateLinear;\n    exports.InterpolateSmooth = InterpolateSmooth;\n    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n    exports.ZeroSlopeEnding = ZeroSlopeEnding;\n    exports.WrapAroundEnding = WrapAroundEnding;\n    exports.TrianglesDrawMode = TrianglesDrawMode;\n    exports.TriangleStripDrawMode = TriangleStripDrawMode;\n    exports.TriangleFanDrawMode = TriangleFanDrawMode;\n    exports.LinearEncoding = LinearEncoding;\n    exports.sRGBEncoding = sRGBEncoding;\n    exports.GammaEncoding = GammaEncoding;\n    exports.RGBEEncoding = RGBEEncoding;\n    exports.LogLuvEncoding = LogLuvEncoding;\n    exports.RGBM7Encoding = RGBM7Encoding;\n    exports.RGBM16Encoding = RGBM16Encoding;\n    exports.RGBDEncoding = RGBDEncoding;\n    exports.BasicDepthPacking = BasicDepthPacking;\n    exports.RGBADepthPacking = RGBADepthPacking;\n    exports.CubeGeometry = BoxGeometry;\n    exports.Face4 = Face4;\n    exports.LineStrip = LineStrip;\n    exports.LinePieces = LinePieces;\n    exports.MeshFaceMaterial = MultiMaterial;\n    exports.PointCloud = PointCloud;\n    exports.Particle = Sprite;\n    exports.ParticleSystem = ParticleSystem;\n    exports.PointCloudMaterial = PointCloudMaterial;\n    exports.ParticleBasicMaterial = ParticleBasicMaterial;\n    exports.ParticleSystemMaterial = ParticleSystemMaterial;\n    exports.Vertex = Vertex;\n    exports.EdgesHelper = EdgesHelper;\n    exports.WireframeHelper = WireframeHelper;\n    exports.GeometryUtils = GeometryUtils;\n    exports.ImageUtils = ImageUtils;\n    exports.Projector = Projector;\n    exports.CanvasRenderer = CanvasRenderer;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));","/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\n\nvar TWEEN = TWEEN || (function () {\n\n\tvar _tweens = [];\n\n\treturn {\n\n\t\tgetAll: function () {\n\n\t\t\treturn _tweens;\n\n\t\t},\n\n\t\tremoveAll: function () {\n\n\t\t\t_tweens = [];\n\n\t\t},\n\n\t\tadd: function (tween) {\n\n\t\t\t_tweens.push(tween);\n\n\t\t},\n\n\t\tremove: function (tween) {\n\n\t\t\tvar i = _tweens.indexOf(tween);\n\n\t\t\tif (i !== -1) {\n\t\t\t\t_tweens.splice(i, 1);\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function (time, preserve) {\n\n\t\t\tif (_tweens.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar i = 0;\n\n\t\t\ttime = time !== undefined ? time : TWEEN.now();\n\n\t\t\twhile (i < _tweens.length) {\n\n\t\t\t\tif (_tweens[i].update(time) || preserve) {\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\t_tweens.splice(i, 1);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\t};\n\n})();\n\n\n// Include a performance.now polyfill\n(function () {\n\t// In node.js, use process.hrtime.\n\tif (this.window === undefined && this.process !== undefined) {\n\t\tTWEEN.now = function () {\n\t\t\tvar time = process.hrtime();\n\n\t\t\t// Convert [seconds, microseconds] to milliseconds.\n\t\t\treturn time[0] * 1000 + time[1] / 1000;\n\t\t};\n\t}\n\t// In a browser, use window.performance.now if it is available.\n\telse if (this.window !== undefined &&\n\t         window.performance !== undefined &&\n\t\t window.performance.now !== undefined) {\n\n\t\t// This must be bound, because directly assigning this function\n\t\t// leads to an invocation exception in Chrome.\n\t\tTWEEN.now = window.performance.now.bind(window.performance);\n\t}\n\t// Use Date.now if it is available.\n\telse if (Date.now !== undefined) {\n\t\tTWEEN.now = Date.now;\n\t}\n\t// Otherwise, use 'new Date().getTime()'.\n\telse {\n\t\tTWEEN.now = function () {\n\t\t\treturn new Date().getTime();\n\t\t};\n\t}\n})();\n\n\nTWEEN.Tween = function (object) {\n\n\tvar _object = object;\n\tvar _valuesStart = {};\n\tvar _valuesEnd = {};\n\tvar _valuesStartRepeat = {};\n\tvar _duration = 1000;\n\tvar _repeat = 0;\n\tvar _yoyo = false;\n\tvar _isPlaying = false;\n\tvar _reversed = false;\n\tvar _delayTime = 0;\n\tvar _startTime = null;\n\tvar _easingFunction = TWEEN.Easing.Linear.None;\n\tvar _interpolationFunction = TWEEN.Interpolation.Linear;\n\tvar _chainedTweens = [];\n\tvar _onStartCallback = null;\n\tvar _onStartCallbackFired = false;\n\tvar _onUpdateCallback = null;\n\tvar _onCompleteCallback = null;\n\tvar _onStopCallback = null;\n\n\t// Set all starting values present on the target object\n\tfor (var field in object) {\n\t\t_valuesStart[field] = parseFloat(object[field], 10);\n\t}\n\n\tthis.to = function (properties, duration) {\n\n\t\tif (duration !== undefined) {\n\t\t\t_duration = duration;\n\t\t}\n\n\t\t_valuesEnd = properties;\n\n\t\treturn this;\n\n\t};\n\n\tthis.start = function (time) {\n\n\t\tTWEEN.add(this);\n\n\t\t_isPlaying = true;\n\n\t\t_onStartCallbackFired = false;\n\n\t\t_startTime = time !== undefined ? time : TWEEN.now();\n\t\t_startTime += _delayTime;\n\n\t\tfor (var property in _valuesEnd) {\n\n\t\t\t// Check if an Array was provided as property value\n\t\t\tif (_valuesEnd[property] instanceof Array) {\n\n\t\t\t\tif (_valuesEnd[property].length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Create a local copy of the Array with the start value at the front\n\t\t\t\t_valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);\n\n\t\t\t}\n\n\t\t\t// If `to()` specifies a property that doesn't exist in the source object,\n\t\t\t// we should not set that property in the object\n\t\t\tif (_valuesStart[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t_valuesStart[property] = _object[property];\n\n\t\t\tif ((_valuesStart[property] instanceof Array) === false) {\n\t\t\t\t_valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n\t\t\t}\n\n\t\t\t_valuesStartRepeat[property] = _valuesStart[property] || 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tthis.stop = function () {\n\n\t\tif (!_isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tTWEEN.remove(this);\n\t\t_isPlaying = false;\n\n\t\tif (_onStopCallback !== null) {\n\t\t\t_onStopCallback.call(_object);\n\t\t}\n\n\t\tthis.stopChainedTweens();\n\t\treturn this;\n\n\t};\n\n\tthis.stopChainedTweens = function () {\n\n\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t_chainedTweens[i].stop();\n\t\t}\n\n\t};\n\n\tthis.delay = function (amount) {\n\n\t\t_delayTime = amount;\n\t\treturn this;\n\n\t};\n\n\tthis.repeat = function (times) {\n\n\t\t_repeat = times;\n\t\treturn this;\n\n\t};\n\n\tthis.yoyo = function (yoyo) {\n\n\t\t_yoyo = yoyo;\n\t\treturn this;\n\n\t};\n\n\n\tthis.easing = function (easing) {\n\n\t\t_easingFunction = easing;\n\t\treturn this;\n\n\t};\n\n\tthis.interpolation = function (interpolation) {\n\n\t\t_interpolationFunction = interpolation;\n\t\treturn this;\n\n\t};\n\n\tthis.chain = function () {\n\n\t\t_chainedTweens = arguments;\n\t\treturn this;\n\n\t};\n\n\tthis.onStart = function (callback) {\n\n\t\t_onStartCallback = callback;\n\t\treturn this;\n\n\t};\n\n\tthis.onUpdate = function (callback) {\n\n\t\t_onUpdateCallback = callback;\n\t\treturn this;\n\n\t};\n\n\tthis.onComplete = function (callback) {\n\n\t\t_onCompleteCallback = callback;\n\t\treturn this;\n\n\t};\n\n\tthis.onStop = function (callback) {\n\n\t\t_onStopCallback = callback;\n\t\treturn this;\n\n\t};\n\n\tthis.update = function (time) {\n\n\t\tvar property;\n\t\tvar elapsed;\n\t\tvar value;\n\n\t\tif (time < _startTime) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (_onStartCallbackFired === false) {\n\n\t\t\tif (_onStartCallback !== null) {\n\t\t\t\t_onStartCallback.call(_object);\n\t\t\t}\n\n\t\t\t_onStartCallbackFired = true;\n\n\t\t}\n\n\t\telapsed = (time - _startTime) / _duration;\n\t\telapsed = elapsed > 1 ? 1 : elapsed;\n\n\t\tvalue = _easingFunction(elapsed);\n\n\t\tfor (property in _valuesEnd) {\n\n\t\t\t// Don't update properties that do not exist in the source object\n\t\t\tif (_valuesStart[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar start = _valuesStart[property] || 0;\n\t\t\tvar end = _valuesEnd[property];\n\n\t\t\tif (end instanceof Array) {\n\n\t\t\t\t_object[property] = _interpolationFunction(end, value);\n\n\t\t\t} else {\n\n\t\t\t\t// Parses relative end values with start as base (e.g.: +10, -3)\n\t\t\t\tif (typeof (end) === 'string') {\n\n\t\t\t\t\tif (end.charAt(0) === '+' || end.charAt(0) === '-') {\n\t\t\t\t\t\tend = start + parseFloat(end, 10);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tend = parseFloat(end, 10);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Protect against non numeric properties.\n\t\t\t\tif (typeof (end) === 'number') {\n\t\t\t\t\t_object[property] = start + (end - start) * value;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif (_onUpdateCallback !== null) {\n\t\t\t_onUpdateCallback.call(_object, value);\n\t\t}\n\n\t\tif (elapsed === 1) {\n\n\t\t\tif (_repeat > 0) {\n\n\t\t\t\tif (isFinite(_repeat)) {\n\t\t\t\t\t_repeat--;\n\t\t\t\t}\n\n\t\t\t\t// Reassign starting values, restart by making startTime = now\n\t\t\t\tfor (property in _valuesStartRepeat) {\n\n\t\t\t\t\tif (typeof (_valuesEnd[property]) === 'string') {\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property], 10);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_yoyo) {\n\t\t\t\t\t\tvar tmp = _valuesStartRepeat[property];\n\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property];\n\t\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t\t}\n\n\t\t\t\t\t_valuesStart[property] = _valuesStartRepeat[property];\n\n\t\t\t\t}\n\n\t\t\t\tif (_yoyo) {\n\t\t\t\t\t_reversed = !_reversed;\n\t\t\t\t}\n\n\t\t\t\t_startTime = time + _delayTime;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\tif (_onCompleteCallback !== null) {\n\t\t\t\t\t_onCompleteCallback.call(_object);\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t\t// Make the chained tweens start exactly at the time they should,\n\t\t\t\t\t// even if the `update()` method was called way past the duration of the tween\n\t\t\t\t\t_chainedTweens[i].start(_startTime + _duration);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n};\n\n\nTWEEN.Easing = {\n\n\tLinear: {\n\n\t\tNone: function (k) {\n\n\t\t\treturn k;\n\n\t\t}\n\n\t},\n\n\tQuadratic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn k * (2 - k);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * (--k * (k - 2) - 1);\n\n\t\t}\n\n\t},\n\n\tCubic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn --k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tQuartic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn 1 - (--k * k * k * k);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * ((k -= 2) * k * k * k - 2);\n\n\t\t}\n\n\t},\n\n\tQuintic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn --k * k * k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tSinusoidal: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn 1 - Math.cos(k * Math.PI / 2);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn Math.sin(k * Math.PI / 2);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * k));\n\n\t\t}\n\n\t},\n\n\tExponential: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k === 0 ? 0 : Math.pow(1024, k - 1);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn k === 1 ? 1 : 1 - Math.pow(2, - 10 * k);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, k - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (- Math.pow(2, - 10 * (k - 1)) + 2);\n\n\t\t}\n\n\t},\n\n\tCircular: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn 1 - Math.sqrt(1 - k * k);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn Math.sqrt(1 - (--k * k));\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn - 0.5 * (Math.sqrt(1 - k * k) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\n\t\t}\n\n\t},\n\n\tElastic: {\n\n\t\tIn: function (k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tk *= 2;\n\n\t\t\tif (k < 1) {\n\t\t\t\treturn -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t\t}\n\n\t\t\treturn 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\n\n\t\t}\n\n\t},\n\n\tBack: {\n\n\t\tIn: function (k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn k * k * ((s + 1) * k - s);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn --k * k * ((s + 1) * k + s) + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tvar s = 1.70158 * 1.525;\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * (k * k * ((s + 1) * k - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\n\t\t}\n\n\t},\n\n\tBounce: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn 1 - TWEEN.Easing.Bounce.Out(1 - k);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\tif (k < (1 / 2.75)) {\n\t\t\t\treturn 7.5625 * k * k;\n\t\t\t} else if (k < (2 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n\t\t\t} else if (k < (2.5 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n\t\t\t} else {\n\t\t\t\treturn 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n\t\t\t}\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif (k < 0.5) {\n\t\t\t\treturn TWEEN.Easing.Bounce.In(k * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n\n\t\t}\n\n\t}\n\n};\n\nTWEEN.Interpolation = {\n\n\tLinear: function (v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.Linear;\n\n\t\tif (k < 0) {\n\t\t\treturn fn(v[0], v[1], f);\n\t\t}\n\n\t\tif (k > 1) {\n\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t}\n\n\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\n\t},\n\n\tBezier: function (v, k) {\n\n\t\tvar b = 0;\n\t\tvar n = v.length - 1;\n\t\tvar pw = Math.pow;\n\t\tvar bn = TWEEN.Interpolation.Utils.Bernstein;\n\n\t\tfor (var i = 0; i <= n; i++) {\n\t\t\tb += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n\t\t}\n\n\t\treturn b;\n\n\t},\n\n\tCatmullRom: function (v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.CatmullRom;\n\n\t\tif (v[0] === v[m]) {\n\n\t\t\tif (k < 0) {\n\t\t\t\ti = Math.floor(f = m * (1 + k));\n\t\t\t}\n\n\t\t\treturn fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n\n\t\t} else {\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n\t\t\t}\n\n\t\t\treturn fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n\n\t\t}\n\n\t},\n\n\tUtils: {\n\n\t\tLinear: function (p0, p1, t) {\n\n\t\t\treturn (p1 - p0) * t + p0;\n\n\t\t},\n\n\t\tBernstein: function (n, i) {\n\n\t\t\tvar fc = TWEEN.Interpolation.Utils.Factorial;\n\n\t\t\treturn fc(n) / fc(i) / fc(n - i);\n\n\t\t},\n\n\t\tFactorial: (function () {\n\n\t\t\tvar a = [1];\n\n\t\t\treturn function (n) {\n\n\t\t\t\tvar s = 1;\n\n\t\t\t\tif (a[n]) {\n\t\t\t\t\treturn a[n];\n\t\t\t\t}\n\n\t\t\t\tfor (var i = n; i > 1; i--) {\n\t\t\t\t\ts *= i;\n\t\t\t\t}\n\n\t\t\t\ta[n] = s;\n\t\t\t\treturn s;\n\n\t\t\t};\n\n\t\t})(),\n\n\t\tCatmullRom: function (p0, p1, p2, p3, t) {\n\n\t\t\tvar v0 = (p2 - p0) * 0.5;\n\t\t\tvar v1 = (p3 - p1) * 0.5;\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t * t2;\n\n\t\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (- 3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\n\t\t}\n\n\t}\n\n};\n\n// UMD (Universal Module Definition)\n(function (root) {\n\n\tif (typeof define === 'function' && define.amd) {\n\n\t\t// AMD\n\t\tdefine([], function () {\n\t\t\treturn TWEEN;\n\t\t});\n\n\t} else if (typeof module !== 'undefined' && typeof exports === 'object') {\n\n\t\t// Node.js\n\t\tmodule.exports = TWEEN;\n\n\t} else if (root !== undefined) {\n\n\t\t// Global variable\n\t\troot.TWEEN = TWEEN;\n\n\t}\n\n})(this);\n","\"use strict\";\n\nvar THREE        = require('three'),\n    TWEEN        = require('tween.js'),\n    projector    = require('three.js-projector'),\n    renderer     = require('three-canvas-renderer');\n\n\n//===============================\n//      LANDING ANIMATION\n//===============================\n\ndocument.addEventListener('DOMContentLoaded', function() {\n\n    var container;\n    var camera, scene, renderer;\n\n    var raycaster;\n    var mouse;\n\n    function init() {\n\n        container = document.getElementById('particles');\n\n        camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 10000 );\n        camera.position.y = 300;\n        camera.position.z = 500;\n\n        scene = new THREE.Scene();\n\n        var geometry = new THREE.BoxGeometry( 30, 30, 30 );\n\n        function buildCube() {\n\n            var colors = [\n                0x231cc7,\n                0xefefef,\n                //0x004cd9,\n                //0x2700d9,\n                //0x5300d9,\n                //0x7400d9,\n                // 0xa200d9\n            ];\n\n            var randomNum = Math.floor(Math.random() * (2 - 0) + 0);\n\n            var color = colors[randomNum];\n\n            var object = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( {\n            color: color, opacity: 0.9 }));\n            object.position.x = Math.random() * 800 - 400;\n            object.position.y = Math.random() * 800 - 400;\n            object.position.z = Math.random() * 800 - 400;\n\n            object.scale.x = 0.01 * 1 + 1;\n            object.scale.y = 0.01 * 1 + 1;\n            object.scale.z = 0.01 * 1 + 1;\n\n            object.rotation.x = Math.random() * 2 * Math.PI;\n            object.rotation.y = Math.random() * 2 * Math.PI;\n            object.rotation.z = Math.random() * 2 * Math.PI;\n            scene.add( object );\n\n        }\n\n        function setIntervalX(callback, delay, repetitions) {\n            var x = 0;\n            var intervalID = window.setInterval(function () {\n\n               callback();\n\n               if (++x === repetitions) {\n                   window.clearInterval(intervalID);\n               }\n            }, delay);\n        }\n\n        // This will be repeated every for 5 times with 1 second intervals:\n        setTimeout(function() {\n            setIntervalX(function () {\n                buildCube();\n            }, 75, 25);\n        }, 3350);\n\n        raycaster = new THREE.Raycaster();\n        mouse = new THREE.Vector2();\n\n        renderer = new THREE.CanvasRenderer();\n        renderer.setClearColor( 0xffffff );\n        renderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        container.appendChild(renderer.domElement);\n\n        document.addEventListener( 'mousedown', onDocumentMouseDown, false );\n        document.addEventListener( 'touchstart', onDocumentTouchStart, false );\n\n        //\n\n        window.addEventListener( 'resize', onWindowResize, false );\n\n    }\n\n    function getRandomColor() {\n        var colors = [\n            // 0x8A8FFC,\n            // 0xFD8BB5,\n            // 0xFEDB8E,\n            // 0x92D4F5,\n            // 0x75DF98,\n            // 0xF3A273,\n            // 0x688FE2,\n            // 0xEB6E7B,\n            // 0x60D0E3,\n            // 0xD999DE,\n            // 0xD0F187,\n            // 0xFD98E2,\n            // 0xBB99FC,\n            // 0x6DEDBE,\n            0x004cd9,\n            0x2700d9,\n            0x5300d9,\n            0x7400d9,\n            0xa200d9\n        ];\n        var randomNum = Math.floor(Math.random() * (5 - 0) + 0);\n        var color = colors[randomNum];\n\n        return color;\n    }\n\n    function onWindowResize() {\n\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n\n        renderer.setSize( window.innerWidth, window.innerHeight );\n\n    }\n\n    function onDocumentTouchStart( event ) {\n\n        event.preventDefault();\n\n        event.clientX = event.touches[0].clientX;\n        event.clientY = event.touches[0].clientY;\n        onDocumentMouseDown( event );\n\n    }\n\n    function onDocumentMouseDown( event ) {\n\n        event.preventDefault();\n\n        mouse.x = ( event.clientX / renderer.domElement.clientWidth ) * 2 - 1;\n        mouse.y = - ( event.clientY / renderer.domElement.clientHeight ) * 2 + 1;\n\n        raycaster.setFromCamera( mouse, camera );\n\n        var intersects = raycaster.intersectObjects( scene.children );\n\n        if ( intersects.length > 0 ) {\n\n            new TWEEN.Tween( intersects[ 0 ].object.position ).to( {\n                x: Math.random() * 800 - 400,\n                y: Math.random() * 800 - 400,\n                z: Math.random() * 800 - 400 }, 2000 )\n            .easing( TWEEN.Easing.Elastic.Out).start();\n\n            new TWEEN.Tween( intersects[ 0 ].object.rotation ).to( {\n                x: Math.random() * 2 * Math.PI,\n                y: Math.random() * 2 * Math.PI,\n                z: Math.random() * 2 * Math.PI }, 2000 )\n            .easing( TWEEN.Easing.Elastic.Out).start();\n\n            intersects[0].object.material.color.setHex( getRandomColor() );\n\n        }\n\n    }\n\n    function animate() {\n\n        requestAnimationFrame( animate );\n        render();\n\n    }\n\n    var radius = 600;\n    var theta = 0;\n\n    function render() {\n\n        TWEEN.update();\n\n        theta += 0.1;\n\n        camera.position.x = radius * Math.sin( THREE.Math.degToRad( theta ) );\n        camera.position.y = radius * Math.sin( THREE.Math.degToRad( theta ) );\n        camera.position.z = radius * Math.cos( THREE.Math.degToRad( theta ) );\n        camera.lookAt( scene.position );\n\n        renderer.render( scene, camera );\n\n    }\n\n    var animateOnResize = debounce(function() {\n        var windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\n            particles   = document.getElementById('particles');\n\n        if(windowWidth > 480 && !particles.hasChildNodes()) {\n            init();\n            animate();\n        }\n\n        if(windowWidth < 480 && particles.hasChildNodes()) {\n            particles.removeChild(particles.firstChild);\n        }\n\n    }, 500);\n\n    window.addEventListener('resize', animateOnResize);\n\n    function callAnimation() {\n        var windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n\n        if(windowWidth > 480) {\n            init();\n            animate();\n        }\n    }\n    callAnimation();\n\n});\n\n\n\n//===============================\n//      MISC FUNCTIONALITY\n//===============================\n\ndocument.addEventListener('DOMContentLoaded', function() {\n\n    var about = document.getElementById('about');\n    about.classList.add('visible');\n\n    var scrollAnimate = debounce(function() {\n        var about   = document.getElementById('about'),\n            work    = document.getElementById('work'),\n            contact = document.getElementById('contact');\n\n        var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\n        var scroll   = window.pageYOffset + (h / 3),\n            aboutTop = about.getBoundingClientRect().top,\n            workTop  = work.getBoundingClientRect().top;\n\n        if(scroll > aboutTop)\n            about.classList.add('show-text');\n\n        if(scroll < aboutTop)\n            about.classList.remove('show-text');\n\n        if(window.pageYOffset > workTop)\n            contact.classList.add('visible');\n\n        if(window.pageYOffset < workTop)\n            contact.classList.remove('visible');\n\n\n    }, 5);\n\n    window.addEventListener('scroll', scrollAnimate);\n\n});\n\n\n\n//===============================\n//      SMOOTH SCROLL\n//===============================\n\ndocument.addEventListener('DOMContentLoaded', function() {\n\n    // Feature Test\n    if ( 'querySelector' in document && 'addEventListener' in window && Array.prototype.forEach ) {\n\n        // Function to animate the scroll\n        var smoothScroll = function (anchor, duration, easing) {\n\n            // Function to control easing\n            var easingPattern = function (type, time) {\n                return time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;\n            };\n\n            // Calculate how far and how fast to scroll\n            // http://www.quirksmode.org/blog/archives/2008/01/using_the_assig.html\n            var startLocation = window.pageYOffset;\n            var endLocation = function (anchor) {\n                var distance = 0;\n                if (anchor.offsetParent) {\n                    do {\n                        distance += anchor.offsetTop;\n                        anchor = anchor.offsetParent;\n                    } while (anchor);\n                }\n                return distance + 25;\n            };\n            var distance = endLocation(anchor) - startLocation;\n            var increments = distance / (duration / 16);\n            var timeLapsed = 0;\n            var percentage, position, stopAnimation;\n\n            // Scroll the page by an increment, and check if it's time to stop\n            var animateScroll = function () {\n                timeLapsed += 16;\n                percentage = ( timeLapsed / duration );\n                percentage = ( percentage > 1 ) ? 1 : percentage;\n                position = startLocation + ( distance * easingPattern(easing, percentage) );\n                window.scrollTo(0, position);\n                stopAnimation();\n            };\n\n            // Stop the animation\n            if ( increments >= 0 ) { // If scrolling down\n                // Stop animation when you reach the anchor OR the bottom of the page\n                stopAnimation = function () {\n                    var travelled = window.pageYOffset;\n                    if ( (travelled >= (endLocation(anchor) - increments)) || ((window.innerHeight + travelled) >= document.body.scrollHeight) ) {\n                        clearInterval(runAnimation);\n                    }\n                };\n            } else { // If scrolling up\n                // Stop animation when you reach the anchor OR the top of the page\n                stopAnimation = function () {\n                    var travelled = window.pageYOffset;\n                    if ( travelled <= endLocation(anchor) || travelled <= 0 ) {\n                        clearInterval(runAnimation);\n                    }\n                };\n            }\n\n            // Loop the animation function\n            var runAnimation = setInterval(animateScroll, 16);\n\n        };\n\n        // For each smooth scroll link\n        var scrollToggle = document.querySelectorAll('.smooth-scroll');\n        [].forEach.call(scrollToggle, function(toggle) {\n\n            // When the smooth scroll link is clicked\n            toggle.addEventListener('click', function(e) {\n\n                // Prevent the default link behavior\n                e.preventDefault();\n\n                // Get anchor link and calculate distance from the top\n                var dataID = toggle.getAttribute('href');\n                var dataTarget = document.querySelector(dataID);\n                var dataSpeed = toggle.getAttribute('data-speed');\n                var dataEasing = toggle.getAttribute('data-easing');\n\n                // If the anchor exists\n                if (dataTarget) {\n                    // Scroll to the anchor\n                    smoothScroll(dataTarget, dataSpeed || 500, dataEasing || 'easeInOutCubic');\n                }\n\n            }, false);\n\n        });\n\n    }\n\n});\n\n// Debounce function\n\nfunction debounce(func, wait, immediate) {\n\tvar timeout;\n\treturn function() {\n\t\tvar context = this, args = arguments;\n\t\tvar later = function() {\n\t\t\ttimeout = null;\n\t\t\tif (!immediate) func.apply(context, args);\n\t\t};\n\t\tvar callNow = immediate && !timeout;\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(later, wait);\n\t\tif (callNow) func.apply(context, args);\n\t};\n};\n"]}